{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Home Page Certifications-and-Learning Fedora SilverBlue Terminal_Related Cool Resources Cool Articles","title":"Home"},{"location":"#welcome-to-home-page","text":"Certifications-and-Learning Fedora SilverBlue Terminal_Related Cool Resources Cool Articles","title":"Welcome to Home Page"},{"location":"Cool-Articles/","text":"Cool and Interesting Blog https://specbranch.com/posts/one-big-server/ Pixar Rule or 2+2 rather than 4 --> https://news.gregjeanneau.com/pixar-camera-1961/ What is Professional - https://hrpa.s3.amazonaws.com/uploads/2020/10/What-it-means-to-be-a-professional.pdf comes from \"profess\" - claim that one has (a quality or feeling), especially when this is not the case. On Professional, Amazing - https://youtu.be/FedQ2NlgxMI?t=5051 Low code eating software - https://venturebeat.com/programming-development/software-may-be-eating-the-world-but-low-code-could-eat-software/","title":"Cool and Interesting Blog"},{"location":"Cool-Articles/#cool-and-interesting-blog","text":"https://specbranch.com/posts/one-big-server/ Pixar Rule or 2+2 rather than 4 --> https://news.gregjeanneau.com/pixar-camera-1961/ What is Professional - https://hrpa.s3.amazonaws.com/uploads/2020/10/What-it-means-to-be-a-professional.pdf comes from \"profess\" - claim that one has (a quality or feeling), especially when this is not the case. On Professional, Amazing - https://youtu.be/FedQ2NlgxMI?t=5051 Low code eating software - https://venturebeat.com/programming-development/software-may-be-eating-the-world-but-low-code-could-eat-software/","title":"Cool and Interesting Blog"},{"location":"Cool-Resources/","text":"Cool websites to use in daily life Ref Link - https://www.youtube.com/watch?v=PiYS3PMXOjc Witeboard: https://witeboard.com <-- Draw anything quick. Blush: https://blush.design <-- Create custom SVG fast. Carrd: https://carrd.co <-- Instantly create a one page website card, like intro page. What runs: https://www.whatruns.com <-- A plug in for broswer to see what tech stack any website is using. Coverr: https://coverr.co <-- A lot of professional videos that can be used for free. Like Pexel or Pixabay. Flourish: https://flourish.studio <-- Make data driven animated charts and all. Untools: https://untools.co <-- Amazing tools and guides for better thinking. Lumen5: https://lumen5.com <-- Make video out of any website or blog or text. Canva <-- Making presentations, banner and stationary related. Pexels and Pixabay <-- Lot of video, audio and image resources for free Flaticon: https://www.flaticon.com/animated-icons <-- Icons and clipart for web and other stuff Freepik: https://www.freepik.com/ <-- Lot of png and eps illustrations and items MarmaLead: https://marmalead.com/pricing/ <-- Keyword research in ETSY DALL-AI 2: https://openai.com/dall-e-2/ <-- AI text to realistic image render GravityAI: https://www.gravity-ai.com/ <-- Sell AI models online - https://www.youtube.com/watch?v=i6qL3NqFjs4","title":"Cool websites to use in daily life"},{"location":"Cool-Resources/#cool-websites-to-use-in-daily-life","text":"Ref Link - https://www.youtube.com/watch?v=PiYS3PMXOjc Witeboard: https://witeboard.com <-- Draw anything quick. Blush: https://blush.design <-- Create custom SVG fast. Carrd: https://carrd.co <-- Instantly create a one page website card, like intro page. What runs: https://www.whatruns.com <-- A plug in for broswer to see what tech stack any website is using. Coverr: https://coverr.co <-- A lot of professional videos that can be used for free. Like Pexel or Pixabay. Flourish: https://flourish.studio <-- Make data driven animated charts and all. Untools: https://untools.co <-- Amazing tools and guides for better thinking. Lumen5: https://lumen5.com <-- Make video out of any website or blog or text. Canva <-- Making presentations, banner and stationary related. Pexels and Pixabay <-- Lot of video, audio and image resources for free Flaticon: https://www.flaticon.com/animated-icons <-- Icons and clipart for web and other stuff Freepik: https://www.freepik.com/ <-- Lot of png and eps illustrations and items MarmaLead: https://marmalead.com/pricing/ <-- Keyword research in ETSY DALL-AI 2: https://openai.com/dall-e-2/ <-- AI text to realistic image render GravityAI: https://www.gravity-ai.com/ <-- Sell AI models online - https://www.youtube.com/watch?v=i6qL3NqFjs4","title":"Cool websites to use in daily life"},{"location":"Fedora_Silveblue_Setup/","text":"Silverblue essentials podman podman-compose issue in fedora silverblue 36 issue. Below solves it rpm-ostree install containernetworking-plugins # Necceary for podman and podman-compose to work properly in version 36 of silverblue fedora CheatSheet for Silverblue rpm-ostree install git wget curl fish tmux fzf gh htop neofetch neovim powerline-fonts rpm-ostree install screenkey scrot sox terminator kitty tor xclip To prevent issues with python, install below rpm-ostree install python3-devel python3-tkinter rpm-ostree install go clojure rust cargo Link for Tauri Pre-Requisites rpm-ostree install dbus-devel openssl-devel glib2-devel # This is needed by tauri app development for RUST backend rpm-ostree install git wget curl yum ruby ruby-devel pip install ranger-fm # To install terminal based file explorer --> https://www.linuxfordevices.com/tutorials/linux/ranger-file-manager echo \"set preview_images true\" >> ~/.config/ranger/rc.conf echo \"set preview_images false\" >> ~/.config/ranger/rc.conf --> The above makes viewing images in ranger --> https://www.baeldung.com/linux/view-images-from-terminal npm install --global yarn rpm-ostree install yum Java JDK - https://docs.fedoraproject.org/en-US/quick-docs/installing-java/ SE - https://www.oracle.com/java/technologies/downloads/ dnf search openjdk sudo dnf install java-latest-openjdk-devel.x86_64 Intellij Editor Instruction - https://www.jetbrains.com/help/idea/installation-guide.html#67c5a40d Download - https://www.jetbrains.com/idea/download/#section=linux Git and Github ssh-keygen -t rsa -b 4096 -C \"manasvimsharma@email.com\" ssh-add ~/.ssh/id_rsa cat ~/.ssh/id_rsa.pub Now go to github.com > settings > SSH and GPG Keys > New SSH Key > paste point 3 output into \"Key\" section. Create a new repositor: You will get an SSH link to repo similar to -> git@github.com:YOUR-USERNAME/YOUR-REPO-NAME.git Adding Project to the created repository: Make a folder and create any project there cd into the project folder git init git add . git commit -m \"first commit\" git branch -M master Ensure remote --> git remote show origin git remote add origin git@github.com:YOUR-USERNAME/YOUR-REPO-NAME.git git push -u origin master All done setting up github and repo Using gh which is Github CLI https://www.youtube.com/watch?v=BRAG1Kj4-Ss&t=628s https://cli.github.com/manual/ type gh and read the help page and man page Repo creation cloning and forking LogIN --> gh auth login Check protocol --> gh config get git_protocol Set protocol --> gh config set git_protocol ssh Set editor --> gh config set editor \"nvim --wait\" Check editor --> gh config get editor Create Repo --> gh repo create You can create a brand new one and follow instructions You can add the current git init folder as well Clone a repo --> gh repo clone expressjs/express <-- This clones but set origin to the original owner Update the origin --> gh repo-fork <-- after you cd into clonned repo, Now the clone is in our repo Fork a repo --> gh repo fork expressjs/express <-- Now this way you have your copy. DO THIS ALWAYS!! Github GIST gh gist create --public gh gist create gh gist create - <--- Wrtie anything in command line and then ctrl-t to submit gist (not working for me in fish, cant stop it) gh gist list/edit/delete etc etc Issues gh issue create Screenkey rpm-ostree install screenkey screenkey --show-settings pkill -9 screenkey # Stop it screenkey # Start it. Or start from apps drawer Terminal Setup In Silverblue --> At top level we have host and container (toolbox distrobox podman) terminals. Each Container has its own terminal. Now we can use terminal emulators like kitty terminator, on default shell. We can then use default shell, or install fish. Then we have tmux for terminal session and window management. In the tmux.config, we need to tell which default shell to use. So that tmux starts in that, like fish or bash/shell. So how it all binds up: 1. We make a toolbox/ distrobox 2. We install a base shell like fish OR just go with an emulator like kitty. 3. Then we install tmux, ranger etc. 4. Now in tmux.config, we tell that which shell to use, fish or shell. Ranger Link --> https://unix.stackexchange.com/questions/367452/how-to-change-the-default-text-editor-in-ranger pip install ranger-fm Get all ranger config files --> ranger --copy-config=all Change default text editor Open nvim rifle.conf # Get location from above command Replace in 2 lines, $EDITOR with nvim or vim or gedit --> label editor = $EDITOR -- \"$@\" with label editor, ext xml|json|csv|tex|py|pl|rb|js|sh|php = $EDITOR -- \"$@\" Above we set nvim as editor, can select vim or gedit Ranger Commands LINK -> https://manpages.org/ranger s <-- open shell in the current folder q <-- close/ exit ranger yy <-- copy selection dd <-- cut selection pp <-- paste into the selection .d <-- Filter only directories .f <-- Filter only files .c <-- Remove filters z then z <-- Filter by text search Running Shell --> s and then tmux, opens tmux in selection Sorting Files --> press o and the choose from list. Choose mtime with m, this shows latest edited on the top. Hidden Files --> press z and then choose h option Configuring terminal with fish nvm does not work in fish, hence use fnm NOTE --> in fish, to activate python venv use \"source venv/bin/activate.fish\" instead of \"source venv/bin/activate\" Scripts in Fish To run Fish Scripts add #!/bin/fish on top instead of #!/bin/bash OR use fish myscript.sh instead of bash myscript.sh In bash we use var=\"something\" In fish we use set var \"something\" Issues nvm does not work --> https://askubuntu.com/questions/989605/command-not-found-when-using-nvm-in-fish-shell Use fnm --> https://github.com/jorgebucaran/nvm.fish fisher install jorgebucaran/nvm.fish Aliases in fish LINK - https://stackoverflow.com/questions/2762994/define-an-alias-in-fish-shell To make long commands short, we can define aliases open --> nvim /var/home/silver/.config/fish/config.fish # this is config.fish file alias n=\"nvim\" alias lll=\"ls -lrt\" alias qq=\"flatpak run com.notepadqq.Notepadqq\" alias code=\"flatpak run com.visualstudio.code\" alias n=\"nvim\" # Opens nvim alias nn=\"fzf -m | xargs -I{} nvim {}\" # Search and open file or files alias nnn=\"n -o (fzf -m)\" # Open all files at once alias cdd=\"cd (find . -type d -print | fzf)\" # Search and open folder Below are not needed, I wonder why I used them...??... funcsave n funcsave lll funcsave qq funcsave code Now instead of using nvim, you can use n Or instead of using ls -lrt, you can use lll Links Main link - https://github.com/craftzdog/dotfiles-public https://github.com/jorgebucaran/fisher https://github.com/IlanCosman/tide https://fedoramagazine.org/tuning-your-bash-or-zsh-shell-in-workstation-and-silverblue/ <--- Check it out more https://fedoramagazine.org/fish-a-friendly-interactive-shell/ Installation rpm-ostree install fish fish # This will run fish shell fisher install jorgebucaran/nvm.fish <--- For NVM curl -sL https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish | source && fisher install jorgebucaran/fisher fisher list fisher install ilancosman/tide@v5 tide configure // Finally in the terminal, in the run command instead of shell, enter fish Make fish even more powerful curl -L https://get.oh-my.fish | fish rpm-ostree install powerline-fonts fontawesome-fonts omf install bobthefish // Some more omf installations to consider Link -> https://www.milanvit.net/post/my-ultimate-shell-setup-with-fish-shell-and-tmux/ omf install bobthefish # Theme omf install aws # AWS integration & command completion omf install bass # Allows running heavily Bash-dependant utilities, like nvm omf install brew # Integrate Homebrew paths omf install colored-man-pages omf install export # Bring back Bash-like export command omf install https://github.com/jhillyerd/plugin-git omf install osx # Finder/macOS integration and utilities omf install wifi-password omf install z # Autojump implementation Install Nerd Fonts git clone --depth=1 https://github.com/ryanoasis/nerd-fonts ~/.nerd-fonts cd .nerd-fonts sudo ./install.sh Neovim and vimviki and plug rpm-ostree install neovim mkdir -p .config/nvim/ cd .config/nvim/ # --> this is actually in /var/home/silver/.config/nvim/ nvim .config/nvim/init.vim ``` .config/nvim/init.vim set nocompatible filetype plugin on syntax on call plug#begin() Plug 'vimwiki/vimwiki' call plug#end() let g:vimwiki_list = [{'path': '/path/to/my/wiki/', \\ 'syntax': 'markdown', 'ext': '.md'}] :PlugInstall <--- Run this in vim command to install vimviki Links: https://sudoedit.com/install-vimwiki-neovim/ https://github.com/junegunn/vim-plug#unix-linux Might be useful --> https://dev.to/psiho/vimwiki-how-to-automate-wikis-per-project-folder-neovim-3k72 https://medium.com/weekly-webtips/vim-neovim-silverlight-ctags-make-up-an-awesome-editor-49f3980b575d https://github.com/chipsenkbeil/vimwiki.nvim ## Tmux split screen and session management LINK - https://fedoramagazine.org/use-tmux-more-powerful-terminal/ rpm-ostree install tmux ### Configigure FISH in tmux find fish path --> which fish or command -s fish touch ~/.tmux.conf ```.tmux.conf set-option -g default-shell /usr/bin/fish set-option -g default-command /usr/bin/fish The above will run fish inside tmux! To run tmux automatically on fish shell refer this link --> https://medium.com/@HazuliFidastian/run-tmux-automatically-on-fish-shell-2b62622661c7 Tmux commands Cheat sheet --> https://www.makeuseof.com/tag/cheat-sheet-tmux-commands-cheat-sheet/ Create and start a session called base tmux new-session -d -s base tmux attach-session -d -t base List sessions tmux list-sessions Scroll in tmux --> Ctrl+b, [ and then use arrow key. Once done, press q Show Time --> Ctrl+b, t Horizontal split --> Ctrl+b, \u201c Vertical split --> Ctrl+b, % Move in splits --> Ctrl+b, arrow Move by number --> Ctrl+b, q # Now you will see numbers on each split for 1 sec, type in the number to go to it Create new window --> Ctrl+b, c Go to previous window --> Ctrl+b, p Go to next window --> Ctrl+b, n Go directly to window --> Ctrl+b, (0-9 number) Detach from session --> Ctrl+b, d List Sessions --> tmux list-sessions # This is once we detach Attach a session --> tmux attach-session -t (session number or name) Kill all sessions --> tmux kill-session -a Example Workflow: 1. Create multiple sessions tmux new-session -d -s work tmux new-session -d -s personal tmux new-session -d -s wiki 2. tmux attach-session -t work make splits, windows, setup etc then press Ctrl+b, d to detach 3. tmux attach-session -t personal Again do whatever and then then press Ctrl+b, d to detach List Sessions Kill Specific sessions --> tmux kill-session -t work Kill all sessions --> tmux kill-session -a Tor setup in linux LINK - https://www.geeksforgeeks.org/how-to-setup-proxychains-in-linux-without-any-errors/ service tor status rpm-ostree install tor nano /etc/proxychains.conf Upload to google drive from terminal LINK - https://towardsdatascience.com/uploading-files-to-google-drive-directly-from-the-terminal-using-curl-2b89db28bb06 Python install sudo dnf install python-devel python -m pip freeze > requirements.txt python -m pip install -r requirements.txt NodeJS issue Some packages like truffle does not get installed on virtual container based OS or systems. Need to find a way to install nodejs to some custom location, where me as a user will have folder access and all global installations can be done. MAYBE USE NVM (Node Version Manager) which is similar to pyenv https://realpython.com/intro-to-pyenv/ Best option is to use toolbox based container to run anything. NOTE###########TRY version v14.19.1 for truffle Installation LINK - https://ostechnix.com/install-node-js-linux/ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash Now exit and re-open terminal command -v nvm output should be --> nvm nvm use --delete-prefix v17.9.0 # you might need to run Installing different versions nvm ls-remote nvm install node nvm install v16.12.0 nvm install v14.19.1 Running different versions nvm use node v16.12.0 nvm install v14.19.1 nvm use node #Takes you to the latest version Check node versions installed on os nvm list node --version npm -v nvm uninstall npm cache clean --force Setting Alias nvm alias default v14.19.1 nvm use default <-- Post setting alias, you can use Single line Commenting in various file formats css --> / This way / html --> js, json --> // This way pytho, shell --> # This way In html part in nextjs --> {/ This way /} Install any website as app on,linux using epiphany browser, like notion whatsapp etc https://www.tekbyte.net/install-notion-web-app-on-linux/ flatpak install flathub org.gnome.Epiphany This did not work for me!!! Install > google chrome Install > https://flathub.org/apps/details/com.github.tchx84.Flatseal Now give relevent access in flatseal to google chrome (will ask for following) - ~/.local/share/applications - ~/.local/share/icons Use this link to control effects on linux > https://extensions.gnome.org/local/ Terminal based web explorer sudo apt-get install lynx lynx www.google.com HAVE FUN! LOL Running custom scripts in nautilus file explorer linux Go to --> cd ~/.local/share/nautilus/scripts/ Make your script --> nano helloworld.sh Make all files in folder executable --> chmod u+x $(ls) Reset Nautilus --> nautilus -q In the script, at the top add: python --> #!/usr/bin/env python3 bash --> #!/bin/bash Fedora filemanager is nautilus and terminal is gnome-terminal ...... use them for shortcuts Cool linux effects https://fostips.com/effects-make-ubuntu-fedora-shine/ More edits on Fedora and Fedora SilverBlue https://fedoramagazine.org/how-i-customize-fedora-silverblue-and-fedora-kinoite/ Make containers with toolbox https://docs.fedoraproject.org/en-US/fedora-silverblue/toolbox/ Fun cal <-- shows calender in terminal date <-- shows date and time in terminal Containers with Distrobox Distrobox Make containers with distrobox https://github.com/89luca89/distrobox https://github.com/89luca89/distrobox/blob/main/docs/compatibility.md#containers-distros https://fedoramagazine.org/run-distrobox-on-fedora-linux/ distrobox-create --name ubuntu-20 --image ubuntu:20.04 distrobox-create --name arch-distrobox --image archlinux:latest distrobox-create --name debian8-distrobox --image debian:8 distrobox-create --name kali-distrobox --image docker.io/kalilinux/kali-rolling:latest distrobox-enter --name ubuntu-20 distrobox-enter --name kali-distrobox NOTE - For KALI LINUX run LINK - https://www.kali.org/docs/general-use/metapackages/ sudo apt update sudo apt install -y kali-linux-default Basic usage Create a new distrobox: distrobox create -n test Enter created distrobox: distrobox enter test Execute a command in a distrobox: distrobox enter test -- command-to-execute List running distroboxes: distrobox list Stop a running distrobox: distrobox stop test Remove a distrobox distrobox rm test Podman Run an fedora image --> podman run --rm -it fedora:35 bash Run an fedora image and mount a folder --> podman run --rm -it -v ./folder_in_host/:/folder_in_host:Z fedora:35 bash pip install podman-compose # Use this to have docker compose like functionality. In fedora silverblue 35, things were ok with podman-compose; but with silverblue 36 we need to install: rpm-ostree install containernetworking-plugins Toolbox toolbox create toolbox create --distro fedora --release f36 toolbox enter dnf install gcc pip3 install wheel If you wish to make a container from a docker image toolbox create --image docker.io/ubuntu:latest Issue is that I am not able to open the terminal with this method Terminal launching different containters Open terminal preference add a profile and name it \"something\" > Go into command tab > tick box run a custom command instead of my shell > in the customer command put \"distrobox-enter --name \". Now open settings > shortcuts and in the custom shortcut command type \"gnome-terminal --profile=something\"","title":"Silverblue essentials"},{"location":"Fedora_Silveblue_Setup/#silverblue-essentials","text":"podman podman-compose issue in fedora silverblue 36 issue. Below solves it rpm-ostree install containernetworking-plugins # Necceary for podman and podman-compose to work properly in version 36 of silverblue fedora CheatSheet for Silverblue rpm-ostree install git wget curl fish tmux fzf gh htop neofetch neovim powerline-fonts rpm-ostree install screenkey scrot sox terminator kitty tor xclip To prevent issues with python, install below rpm-ostree install python3-devel python3-tkinter rpm-ostree install go clojure rust cargo Link for Tauri Pre-Requisites rpm-ostree install dbus-devel openssl-devel glib2-devel # This is needed by tauri app development for RUST backend rpm-ostree install git wget curl yum ruby ruby-devel pip install ranger-fm # To install terminal based file explorer --> https://www.linuxfordevices.com/tutorials/linux/ranger-file-manager echo \"set preview_images true\" >> ~/.config/ranger/rc.conf echo \"set preview_images false\" >> ~/.config/ranger/rc.conf --> The above makes viewing images in ranger --> https://www.baeldung.com/linux/view-images-from-terminal npm install --global yarn rpm-ostree install yum","title":"Silverblue essentials"},{"location":"Fedora_Silveblue_Setup/#java","text":"JDK - https://docs.fedoraproject.org/en-US/quick-docs/installing-java/ SE - https://www.oracle.com/java/technologies/downloads/ dnf search openjdk sudo dnf install java-latest-openjdk-devel.x86_64 Intellij Editor Instruction - https://www.jetbrains.com/help/idea/installation-guide.html#67c5a40d Download - https://www.jetbrains.com/idea/download/#section=linux","title":"Java"},{"location":"Fedora_Silveblue_Setup/#git-and-github","text":"ssh-keygen -t rsa -b 4096 -C \"manasvimsharma@email.com\" ssh-add ~/.ssh/id_rsa cat ~/.ssh/id_rsa.pub Now go to github.com > settings > SSH and GPG Keys > New SSH Key > paste point 3 output into \"Key\" section. Create a new repositor: You will get an SSH link to repo similar to -> git@github.com:YOUR-USERNAME/YOUR-REPO-NAME.git Adding Project to the created repository: Make a folder and create any project there cd into the project folder git init git add . git commit -m \"first commit\" git branch -M master Ensure remote --> git remote show origin git remote add origin git@github.com:YOUR-USERNAME/YOUR-REPO-NAME.git git push -u origin master All done setting up github and repo","title":"Git and Github"},{"location":"Fedora_Silveblue_Setup/#using-gh-which-is-github-cli","text":"https://www.youtube.com/watch?v=BRAG1Kj4-Ss&t=628s https://cli.github.com/manual/ type gh and read the help page and man page","title":"Using gh which is Github CLI"},{"location":"Fedora_Silveblue_Setup/#repo-creation-cloning-and-forking","text":"LogIN --> gh auth login Check protocol --> gh config get git_protocol Set protocol --> gh config set git_protocol ssh Set editor --> gh config set editor \"nvim --wait\" Check editor --> gh config get editor Create Repo --> gh repo create You can create a brand new one and follow instructions You can add the current git init folder as well Clone a repo --> gh repo clone expressjs/express <-- This clones but set origin to the original owner Update the origin --> gh repo-fork <-- after you cd into clonned repo, Now the clone is in our repo Fork a repo --> gh repo fork expressjs/express <-- Now this way you have your copy. DO THIS ALWAYS!!","title":"Repo creation cloning and forking"},{"location":"Fedora_Silveblue_Setup/#github-gist","text":"gh gist create --public gh gist create gh gist create - <--- Wrtie anything in command line and then ctrl-t to submit gist (not working for me in fish, cant stop it) gh gist list/edit/delete etc etc","title":"Github GIST"},{"location":"Fedora_Silveblue_Setup/#issues","text":"gh issue create","title":"Issues"},{"location":"Fedora_Silveblue_Setup/#screenkey","text":"rpm-ostree install screenkey screenkey --show-settings pkill -9 screenkey # Stop it screenkey # Start it. Or start from apps drawer","title":"Screenkey"},{"location":"Fedora_Silveblue_Setup/#terminal-setup","text":"In Silverblue --> At top level we have host and container (toolbox distrobox podman) terminals. Each Container has its own terminal. Now we can use terminal emulators like kitty terminator, on default shell. We can then use default shell, or install fish. Then we have tmux for terminal session and window management. In the tmux.config, we need to tell which default shell to use. So that tmux starts in that, like fish or bash/shell. So how it all binds up: 1. We make a toolbox/ distrobox 2. We install a base shell like fish OR just go with an emulator like kitty. 3. Then we install tmux, ranger etc. 4. Now in tmux.config, we tell that which shell to use, fish or shell.","title":"Terminal Setup"},{"location":"Fedora_Silveblue_Setup/#ranger","text":"Link --> https://unix.stackexchange.com/questions/367452/how-to-change-the-default-text-editor-in-ranger pip install ranger-fm Get all ranger config files --> ranger --copy-config=all","title":"Ranger"},{"location":"Fedora_Silveblue_Setup/#change-default-text-editor","text":"Open nvim rifle.conf # Get location from above command Replace in 2 lines, $EDITOR with nvim or vim or gedit --> label editor = $EDITOR -- \"$@\" with label editor, ext xml|json|csv|tex|py|pl|rb|js|sh|php = $EDITOR -- \"$@\" Above we set nvim as editor, can select vim or gedit","title":"Change default text editor"},{"location":"Fedora_Silveblue_Setup/#ranger-commands","text":"LINK -> https://manpages.org/ranger s <-- open shell in the current folder q <-- close/ exit ranger yy <-- copy selection dd <-- cut selection pp <-- paste into the selection .d <-- Filter only directories .f <-- Filter only files .c <-- Remove filters z then z <-- Filter by text search Running Shell --> s and then tmux, opens tmux in selection Sorting Files --> press o and the choose from list. Choose mtime with m, this shows latest edited on the top. Hidden Files --> press z and then choose h option","title":"Ranger Commands"},{"location":"Fedora_Silveblue_Setup/#configuring-terminal-with-fish","text":"nvm does not work in fish, hence use fnm NOTE --> in fish, to activate python venv use \"source venv/bin/activate.fish\" instead of \"source venv/bin/activate\"","title":"Configuring terminal with fish"},{"location":"Fedora_Silveblue_Setup/#scripts-in-fish","text":"To run Fish Scripts add #!/bin/fish on top instead of #!/bin/bash OR use fish myscript.sh instead of bash myscript.sh In bash we use var=\"something\" In fish we use set var \"something\"","title":"Scripts in Fish"},{"location":"Fedora_Silveblue_Setup/#issues_1","text":"nvm does not work --> https://askubuntu.com/questions/989605/command-not-found-when-using-nvm-in-fish-shell Use fnm --> https://github.com/jorgebucaran/nvm.fish fisher install jorgebucaran/nvm.fish","title":"Issues"},{"location":"Fedora_Silveblue_Setup/#aliases-in-fish","text":"LINK - https://stackoverflow.com/questions/2762994/define-an-alias-in-fish-shell To make long commands short, we can define aliases open --> nvim /var/home/silver/.config/fish/config.fish # this is config.fish file alias n=\"nvim\" alias lll=\"ls -lrt\" alias qq=\"flatpak run com.notepadqq.Notepadqq\" alias code=\"flatpak run com.visualstudio.code\" alias n=\"nvim\" # Opens nvim alias nn=\"fzf -m | xargs -I{} nvim {}\" # Search and open file or files alias nnn=\"n -o (fzf -m)\" # Open all files at once alias cdd=\"cd (find . -type d -print | fzf)\" # Search and open folder Below are not needed, I wonder why I used them...??... funcsave n funcsave lll funcsave qq funcsave code Now instead of using nvim, you can use n Or instead of using ls -lrt, you can use lll","title":"Aliases in fish"},{"location":"Fedora_Silveblue_Setup/#links","text":"Main link - https://github.com/craftzdog/dotfiles-public https://github.com/jorgebucaran/fisher https://github.com/IlanCosman/tide https://fedoramagazine.org/tuning-your-bash-or-zsh-shell-in-workstation-and-silverblue/ <--- Check it out more https://fedoramagazine.org/fish-a-friendly-interactive-shell/","title":"Links"},{"location":"Fedora_Silveblue_Setup/#installation","text":"rpm-ostree install fish fish # This will run fish shell fisher install jorgebucaran/nvm.fish <--- For NVM curl -sL https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish | source && fisher install jorgebucaran/fisher fisher list fisher install ilancosman/tide@v5 tide configure // Finally in the terminal, in the run command instead of shell, enter fish Make fish even more powerful curl -L https://get.oh-my.fish | fish rpm-ostree install powerline-fonts fontawesome-fonts omf install bobthefish // Some more omf installations to consider Link -> https://www.milanvit.net/post/my-ultimate-shell-setup-with-fish-shell-and-tmux/ omf install bobthefish # Theme omf install aws # AWS integration & command completion omf install bass # Allows running heavily Bash-dependant utilities, like nvm omf install brew # Integrate Homebrew paths omf install colored-man-pages omf install export # Bring back Bash-like export command omf install https://github.com/jhillyerd/plugin-git omf install osx # Finder/macOS integration and utilities omf install wifi-password omf install z # Autojump implementation Install Nerd Fonts git clone --depth=1 https://github.com/ryanoasis/nerd-fonts ~/.nerd-fonts cd .nerd-fonts sudo ./install.sh","title":"Installation"},{"location":"Fedora_Silveblue_Setup/#neovim-and-vimviki-and-plug","text":"rpm-ostree install neovim mkdir -p .config/nvim/ cd .config/nvim/ # --> this is actually in /var/home/silver/.config/nvim/ nvim .config/nvim/init.vim ``` .config/nvim/init.vim set nocompatible filetype plugin on syntax on call plug#begin() Plug 'vimwiki/vimwiki' call plug#end() let g:vimwiki_list = [{'path': '/path/to/my/wiki/', \\ 'syntax': 'markdown', 'ext': '.md'}] :PlugInstall <--- Run this in vim command to install vimviki Links: https://sudoedit.com/install-vimwiki-neovim/ https://github.com/junegunn/vim-plug#unix-linux Might be useful --> https://dev.to/psiho/vimwiki-how-to-automate-wikis-per-project-folder-neovim-3k72 https://medium.com/weekly-webtips/vim-neovim-silverlight-ctags-make-up-an-awesome-editor-49f3980b575d https://github.com/chipsenkbeil/vimwiki.nvim ## Tmux split screen and session management LINK - https://fedoramagazine.org/use-tmux-more-powerful-terminal/ rpm-ostree install tmux ### Configigure FISH in tmux find fish path --> which fish or command -s fish touch ~/.tmux.conf ```.tmux.conf set-option -g default-shell /usr/bin/fish set-option -g default-command /usr/bin/fish The above will run fish inside tmux! To run tmux automatically on fish shell refer this link --> https://medium.com/@HazuliFidastian/run-tmux-automatically-on-fish-shell-2b62622661c7","title":"Neovim and vimviki and plug"},{"location":"Fedora_Silveblue_Setup/#tmux-commands","text":"Cheat sheet --> https://www.makeuseof.com/tag/cheat-sheet-tmux-commands-cheat-sheet/ Create and start a session called base tmux new-session -d -s base tmux attach-session -d -t base List sessions tmux list-sessions Scroll in tmux --> Ctrl+b, [ and then use arrow key. Once done, press q Show Time --> Ctrl+b, t Horizontal split --> Ctrl+b, \u201c Vertical split --> Ctrl+b, % Move in splits --> Ctrl+b, arrow Move by number --> Ctrl+b, q # Now you will see numbers on each split for 1 sec, type in the number to go to it Create new window --> Ctrl+b, c Go to previous window --> Ctrl+b, p Go to next window --> Ctrl+b, n Go directly to window --> Ctrl+b, (0-9 number) Detach from session --> Ctrl+b, d List Sessions --> tmux list-sessions # This is once we detach Attach a session --> tmux attach-session -t (session number or name) Kill all sessions --> tmux kill-session -a Example Workflow: 1. Create multiple sessions tmux new-session -d -s work tmux new-session -d -s personal tmux new-session -d -s wiki 2. tmux attach-session -t work make splits, windows, setup etc then press Ctrl+b, d to detach 3. tmux attach-session -t personal Again do whatever and then then press Ctrl+b, d to detach List Sessions Kill Specific sessions --> tmux kill-session -t work Kill all sessions --> tmux kill-session -a","title":"Tmux commands"},{"location":"Fedora_Silveblue_Setup/#tor-setup-in-linux","text":"LINK - https://www.geeksforgeeks.org/how-to-setup-proxychains-in-linux-without-any-errors/ service tor status rpm-ostree install tor nano /etc/proxychains.conf","title":"Tor setup in linux"},{"location":"Fedora_Silveblue_Setup/#upload-to-google-drive-from-terminal","text":"LINK - https://towardsdatascience.com/uploading-files-to-google-drive-directly-from-the-terminal-using-curl-2b89db28bb06","title":"Upload to google drive from terminal"},{"location":"Fedora_Silveblue_Setup/#python","text":"install sudo dnf install python-devel python -m pip freeze > requirements.txt python -m pip install -r requirements.txt","title":"Python"},{"location":"Fedora_Silveblue_Setup/#nodejs-issue","text":"Some packages like truffle does not get installed on virtual container based OS or systems. Need to find a way to install nodejs to some custom location, where me as a user will have folder access and all global installations can be done. MAYBE USE NVM (Node Version Manager) which is similar to pyenv https://realpython.com/intro-to-pyenv/ Best option is to use toolbox based container to run anything. NOTE###########TRY version v14.19.1 for truffle","title":"NodeJS issue"},{"location":"Fedora_Silveblue_Setup/#installation_1","text":"LINK - https://ostechnix.com/install-node-js-linux/ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash Now exit and re-open terminal command -v nvm output should be --> nvm nvm use --delete-prefix v17.9.0 # you might need to run","title":"Installation"},{"location":"Fedora_Silveblue_Setup/#installing-different-versions","text":"nvm ls-remote nvm install node nvm install v16.12.0 nvm install v14.19.1","title":"Installing different versions"},{"location":"Fedora_Silveblue_Setup/#running-different-versions","text":"nvm use node v16.12.0 nvm install v14.19.1 nvm use node #Takes you to the latest version","title":"Running different versions"},{"location":"Fedora_Silveblue_Setup/#check-node-versions-installed-on-os","text":"nvm list node --version npm -v nvm uninstall npm cache clean --force","title":"Check node versions installed on os"},{"location":"Fedora_Silveblue_Setup/#setting-alias","text":"nvm alias default v14.19.1 nvm use default <-- Post setting alias, you can use","title":"Setting Alias"},{"location":"Fedora_Silveblue_Setup/#single-line-commenting-in-various-file-formats","text":"css --> / This way / html --> js, json --> // This way pytho, shell --> # This way In html part in nextjs --> {/ This way /}","title":"Single line Commenting in various file formats"},{"location":"Fedora_Silveblue_Setup/#install-any-website-as-app-onlinux-using-epiphany-browser-like-notion-whatsapp-etc","text":"https://www.tekbyte.net/install-notion-web-app-on-linux/ flatpak install flathub org.gnome.Epiphany This did not work for me!!! Install > google chrome Install > https://flathub.org/apps/details/com.github.tchx84.Flatseal Now give relevent access in flatseal to google chrome (will ask for following) - ~/.local/share/applications - ~/.local/share/icons Use this link to control effects on linux > https://extensions.gnome.org/local/","title":"Install any website as app on,linux using epiphany browser, like notion whatsapp etc"},{"location":"Fedora_Silveblue_Setup/#terminal-based-web-explorer","text":"sudo apt-get install lynx lynx www.google.com HAVE FUN! LOL","title":"Terminal based web explorer"},{"location":"Fedora_Silveblue_Setup/#running-custom-scripts-in-nautilus-file-explorer-linux","text":"Go to --> cd ~/.local/share/nautilus/scripts/ Make your script --> nano helloworld.sh Make all files in folder executable --> chmod u+x $(ls) Reset Nautilus --> nautilus -q In the script, at the top add: python --> #!/usr/bin/env python3 bash --> #!/bin/bash","title":"Running custom scripts in nautilus file explorer linux"},{"location":"Fedora_Silveblue_Setup/#fedora-filemanager-is-nautilus-and-terminal-is-gnome-terminal-use-them-for-shortcuts","text":"","title":"Fedora filemanager is nautilus and terminal is gnome-terminal ...... use them for shortcuts"},{"location":"Fedora_Silveblue_Setup/#cool-linux-effects","text":"https://fostips.com/effects-make-ubuntu-fedora-shine/ More edits on Fedora and Fedora SilverBlue https://fedoramagazine.org/how-i-customize-fedora-silverblue-and-fedora-kinoite/ Make containers with toolbox https://docs.fedoraproject.org/en-US/fedora-silverblue/toolbox/","title":"Cool linux effects"},{"location":"Fedora_Silveblue_Setup/#fun","text":"cal <-- shows calender in terminal date <-- shows date and time in terminal","title":"Fun"},{"location":"Fedora_Silveblue_Setup/#containers-with-distrobox","text":"","title":"Containers with Distrobox"},{"location":"Fedora_Silveblue_Setup/#distrobox","text":"Make containers with distrobox https://github.com/89luca89/distrobox https://github.com/89luca89/distrobox/blob/main/docs/compatibility.md#containers-distros https://fedoramagazine.org/run-distrobox-on-fedora-linux/ distrobox-create --name ubuntu-20 --image ubuntu:20.04 distrobox-create --name arch-distrobox --image archlinux:latest distrobox-create --name debian8-distrobox --image debian:8 distrobox-create --name kali-distrobox --image docker.io/kalilinux/kali-rolling:latest distrobox-enter --name ubuntu-20 distrobox-enter --name kali-distrobox NOTE - For KALI LINUX run LINK - https://www.kali.org/docs/general-use/metapackages/ sudo apt update sudo apt install -y kali-linux-default","title":"Distrobox"},{"location":"Fedora_Silveblue_Setup/#basic-usage","text":"Create a new distrobox: distrobox create -n test Enter created distrobox: distrobox enter test Execute a command in a distrobox: distrobox enter test -- command-to-execute List running distroboxes: distrobox list Stop a running distrobox: distrobox stop test Remove a distrobox distrobox rm test","title":"Basic usage"},{"location":"Fedora_Silveblue_Setup/#podman","text":"Run an fedora image --> podman run --rm -it fedora:35 bash Run an fedora image and mount a folder --> podman run --rm -it -v ./folder_in_host/:/folder_in_host:Z fedora:35 bash pip install podman-compose # Use this to have docker compose like functionality. In fedora silverblue 35, things were ok with podman-compose; but with silverblue 36 we need to install: rpm-ostree install containernetworking-plugins","title":"Podman"},{"location":"Fedora_Silveblue_Setup/#toolbox","text":"toolbox create toolbox create --distro fedora --release f36 toolbox enter dnf install gcc pip3 install wheel","title":"Toolbox"},{"location":"Fedora_Silveblue_Setup/#if-you-wish-to-make-a-container-from-a-docker-image","text":"toolbox create --image docker.io/ubuntu:latest Issue is that I am not able to open the terminal with this method","title":"If you wish to make a container from a docker image"},{"location":"Fedora_Silveblue_Setup/#terminal-launching-different-containters","text":"Open terminal preference add a profile and name it \"something\" > Go into command tab > tick box run a custom command instead of my shell > in the customer command put \"distrobox-enter --name \". Now open settings > shortcuts and in the custom shortcut command type \"gnome-terminal --profile=something\"","title":"Terminal launching different containters"},{"location":"Tasks/","text":"Tasks This is just an example file. Add task to any file. The format to follow is following ::Task description,tags,importance,person ::Emails and communications verified on blockchain to reduce spam,idea spam blockchain email,7,me ::Check out api for gateio kucoin mexc and sushi pancake uniswap and see how can we get price and place orders,blockchain arbitrage,10,me node #python ::node ::python","title":"Tasks"},{"location":"Tasks/#tasks","text":"This is just an example file. Add task to any file. The format to follow is following ::Task description,tags,importance,person ::Emails and communications verified on blockchain to reduce spam,idea spam blockchain email,7,me ::Check out api for gateio kucoin mexc and sushi pancake uniswap and see how can we get price and place orders,blockchain arbitrage,10,me","title":"Tasks"},{"location":"Tasks/#node-python-node-python","text":"","title":"node #python ::node ::python"},{"location":"Terminal_Related/","text":"General useful stuff Install nvm using this link --> https://tecadmin.net/how-to-install-nvm-on-ubuntu-20-04/ ASCII art in bash --> https://www.tecmint.com/create-ascii-text-banners-in-linux-terminal/ Rename Files --> rename 'existingString' 'replacementWith' .md -a # applies to only .md file coz od .md ctrl + a <-- Takes cursor to line start ctrl + e <-- Takes cursor to line end ctrl + z <-- Takes the current active process in terminal to the background fg <-- Brings back the background process to the foreground (process which was sent back using ctrl + z) cd ~ <-- Jump to home folder cd - <-- Jump to previous folder cd $dirprev <-- same as cd - cd $dirnext <-- Not Sure, check it out cd .. <-- Jump to outer folder comman | column <-- Pipe any file or command to column and output would be two columns eg ls | column pushd <-- pushd folder/name/here --> put in any number of paths popd <-- popd --> repeat popd to open the pushd items one by one FZF and searching fzf <-- Github --> Link https://github.com/junegunn/fzf Tutorial --> https://www.youtube.com/watch?v=qgG5Jhi_Els fzf <-- Then type any file name to search fzf -m <-- Select multiple from result, press tab or shift-tab to select multiple nvim $(fzf) <-- Open the selection in nvim cd $(find . -type d -print | fzf) <-- cd into a folder in current directory cd $(find ../ -type d -print | fzf) <-- cd into a folder into outer directory directory fzf -m | xargs -I{} nvim {} <-- Select multiple and open in vim one by one nvim (find . -type f -print | fzf -m) # Search and open folder in current folder nvim -o (fzf -m) # Open all files at once GLOBALLY cd (find . -type d -print | fzf) #Search and open folder Start with ' for exact match Spaces between terms: Example folder something <-- this find in folder name something and files with .md at the end something <-- Inside folders something <-- inside folder of folder Vim and vimwiki LINK: https://github.com/~/vimwiki.txt) Cheat sheet Link: http://thedarnedestthing.com/~ki%20cheatsheet FZF A plugin called FZF seems very cool --> https://github.com/junegunn/fzf/blob/master/README-VIM.md Type :FZF and type, then you will get live search to what you searching and then with arrow you can select files and open NERDTree install using --> Plug 'preservim/nerdtree' To always open nerdtree in current file dirctory, set autochdir in config file Open nerdtree --> :NERDTree # use q to exit and ? for help To exit nerdtree --> q To go back to nerdtree after opening file --> ctrl + w + w General :colorscheme [space] [Ctrl+d] --> select a color scheme #https://phoenixnap.com/kb/vim-color-schemes Unwrap lines --> :set wrap Toggle Wrapping lines --> :set wrap! Added shortcut :nnoremap :set wrap! :nnoremap :set wrap Find your vimrc config file by --> :echo $MYVIMRC Run any shell command from within nvim --> :! command Run shell command in a terminal for neovim --> !terminal Run shell command in a terminal for vim --> !shell Enable Spell Check --> :set spell spelllang=en_us Jump to next spelling error --> ]s Jump to previous spelling error --> [s Correct the spelling --> z= Undu --> u Redo --> ctrl+r In a file, if there is a location return, like in the imports for most projects, you can jump into that file and come back by: Put cursor on location Press --> gf To go back, press --> ctrl+o Select --> v and the cursor to move Select Line --> V Copy selection --> y (yy for copy line, if slection was not done) Cut selection --> d (dd for cut line, if selection was not done) Paste --> p Copy to clipboard --> \"+ then yy or dd etc ... # In some cases \"* is used, but in neovim fedora, \"+ is used checklink Set bookmark at any line --> m and then (a-z or A-Z) Access bookmark --> :marks Jump to bookmark --> ` (a-z or A-Z) Line jumping --> number, then j for down, k for up eg 5k takes 5 lines up, 10j takes 10 lines down Vimwiki specific Create Table of contents in any specific wiki from Headings --> :VimwikiTOC In the index page, create links of all the md files in that folder or wiki --> :VimwikiGenerateLinks Create links in Diary Index Page --> :VimwikiDiaryGenerateLinks \\ww to open vimviki \\ws to select wiki of choice \\w\\w to open todays diary entry \\wi to open diary index page \\w\\i to Build Diary Links z= on any misspelled word to open the dictonery Find and replace a complete word in a file. --> :%s/\\<WORD>/REPLACEWOD/ MKdocs for making a website version Note that MDwiki is different from this! Prefer to use 11ty or Jekyll or Hugo etc Link - https://www.mkdocs.org/getting-started/ pip install mkdocs mkdocs new my-project cd my-project nvim mkdocs.yml # mkdocs.yml site_name: MkLorum site_url: https://example.com/ nav: - Home: index.md - About: about.md theme: readthedocs mkdocs serve mkdocs build mkdocs --help mkdocs build --help","title":"General useful stuff"},{"location":"Terminal_Related/#general-useful-stuff","text":"Install nvm using this link --> https://tecadmin.net/how-to-install-nvm-on-ubuntu-20-04/ ASCII art in bash --> https://www.tecmint.com/create-ascii-text-banners-in-linux-terminal/ Rename Files --> rename 'existingString' 'replacementWith' .md -a # applies to only .md file coz od .md ctrl + a <-- Takes cursor to line start ctrl + e <-- Takes cursor to line end ctrl + z <-- Takes the current active process in terminal to the background fg <-- Brings back the background process to the foreground (process which was sent back using ctrl + z) cd ~ <-- Jump to home folder cd - <-- Jump to previous folder cd $dirprev <-- same as cd - cd $dirnext <-- Not Sure, check it out cd .. <-- Jump to outer folder comman | column <-- Pipe any file or command to column and output would be two columns eg ls | column pushd <-- pushd folder/name/here --> put in any number of paths popd <-- popd --> repeat popd to open the pushd items one by one","title":"General useful stuff"},{"location":"Terminal_Related/#fzf-and-searching","text":"fzf <-- Github --> Link https://github.com/junegunn/fzf Tutorial --> https://www.youtube.com/watch?v=qgG5Jhi_Els fzf <-- Then type any file name to search fzf -m <-- Select multiple from result, press tab or shift-tab to select multiple nvim $(fzf) <-- Open the selection in nvim cd $(find . -type d -print | fzf) <-- cd into a folder in current directory cd $(find ../ -type d -print | fzf) <-- cd into a folder into outer directory directory fzf -m | xargs -I{} nvim {} <-- Select multiple and open in vim one by one nvim (find . -type f -print | fzf -m) # Search and open folder in current folder nvim -o (fzf -m) # Open all files at once GLOBALLY cd (find . -type d -print | fzf) #Search and open folder Start with ' for exact match Spaces between terms: Example folder something <-- this find in folder name something and files with .md at the end something <-- Inside folders something <-- inside folder of folder","title":"FZF and searching"},{"location":"Terminal_Related/#vim-and-vimwiki","text":"LINK: https://github.com/~/vimwiki.txt) Cheat sheet Link: http://thedarnedestthing.com/~ki%20cheatsheet","title":"Vim and vimwiki"},{"location":"Terminal_Related/#fzf","text":"A plugin called FZF seems very cool --> https://github.com/junegunn/fzf/blob/master/README-VIM.md Type :FZF and type, then you will get live search to what you searching and then with arrow you can select files and open","title":"FZF"},{"location":"Terminal_Related/#nerdtree","text":"install using --> Plug 'preservim/nerdtree' To always open nerdtree in current file dirctory, set autochdir in config file Open nerdtree --> :NERDTree # use q to exit and ? for help To exit nerdtree --> q To go back to nerdtree after opening file --> ctrl + w + w","title":"NERDTree"},{"location":"Terminal_Related/#general","text":":colorscheme [space] [Ctrl+d] --> select a color scheme #https://phoenixnap.com/kb/vim-color-schemes Unwrap lines --> :set wrap Toggle Wrapping lines --> :set wrap! Added shortcut :nnoremap :set wrap! :nnoremap :set wrap Find your vimrc config file by --> :echo $MYVIMRC Run any shell command from within nvim --> :! command Run shell command in a terminal for neovim --> !terminal Run shell command in a terminal for vim --> !shell Enable Spell Check --> :set spell spelllang=en_us Jump to next spelling error --> ]s Jump to previous spelling error --> [s Correct the spelling --> z= Undu --> u Redo --> ctrl+r In a file, if there is a location return, like in the imports for most projects, you can jump into that file and come back by: Put cursor on location Press --> gf To go back, press --> ctrl+o Select --> v and the cursor to move Select Line --> V Copy selection --> y (yy for copy line, if slection was not done) Cut selection --> d (dd for cut line, if selection was not done) Paste --> p Copy to clipboard --> \"+ then yy or dd etc ... # In some cases \"* is used, but in neovim fedora, \"+ is used checklink Set bookmark at any line --> m and then (a-z or A-Z) Access bookmark --> :marks Jump to bookmark --> ` (a-z or A-Z) Line jumping --> number, then j for down, k for up eg 5k takes 5 lines up, 10j takes 10 lines down","title":"General"},{"location":"Terminal_Related/#vimwiki-specific","text":"Create Table of contents in any specific wiki from Headings --> :VimwikiTOC In the index page, create links of all the md files in that folder or wiki --> :VimwikiGenerateLinks Create links in Diary Index Page --> :VimwikiDiaryGenerateLinks \\ww to open vimviki \\ws to select wiki of choice \\w\\w to open todays diary entry \\wi to open diary index page \\w\\i to Build Diary Links z= on any misspelled word to open the dictonery Find and replace a complete word in a file. --> :%s/\\<WORD>/REPLACEWOD/","title":"Vimwiki specific"},{"location":"Terminal_Related/#mkdocs-for-making-a-website-version","text":"Note that MDwiki is different from this! Prefer to use 11ty or Jekyll or Hugo etc Link - https://www.mkdocs.org/getting-started/ pip install mkdocs mkdocs new my-project cd my-project nvim mkdocs.yml # mkdocs.yml site_name: MkLorum site_url: https://example.com/ nav: - Home: index.md - About: about.md theme: readthedocs mkdocs serve mkdocs build mkdocs --help mkdocs build --help","title":"MKdocs for making a website version"},{"location":"Trading_Notes/","text":"Trading Notes Good people to follow https://www.youtube.com/c/IntradayHunter Rules to follow Overall strategy Find out buyers stop losses and sellers stop losses in day start Create an opinion on the direction for start, up or down. Once market opens, continuously modify opinion based on candle sizes A few very long candles in 1 min chart indicates stop losses being hit Slow rise or fall on multiple small candles mean actual trading and mood Keep checking which SL are being hit all day and take positions Also, watching charts of the option contract is kind of useful, but keep things simple Rainbow chart also can assist you once in trade, but do not exit based on it, do it only based on PL ratio Do not enter or exit during large candles and movements; watch it and capture it. In case of loss, you should have exited earlier, but if caught in momentum, then exit on retracement, but with too much momentum, exit there. Entry Based on the opinion, take a position, with PL ration of at least 20% (As per intraday hunter) Exit on loss and exit on profit You can take multiple trades, but try keeping things simple Holding Keep holding profit over PL ratio as long as u-turn Exit at loss exact based on PL ratio Exit Inspired by Shakti from Conceptual Trader -https://www.youtube.com/c/ConceptualTrading 1. After entry, exit in 2-4 steps 2. For a good position, keep adding 3. For a bad position exit at PL ratio","title":"Trading Notes"},{"location":"Trading_Notes/#trading-notes","text":"Good people to follow https://www.youtube.com/c/IntradayHunter","title":"Trading Notes"},{"location":"Trading_Notes/#rules-to-follow","text":"","title":"Rules to follow"},{"location":"Trading_Notes/#overall-strategy","text":"Find out buyers stop losses and sellers stop losses in day start Create an opinion on the direction for start, up or down. Once market opens, continuously modify opinion based on candle sizes A few very long candles in 1 min chart indicates stop losses being hit Slow rise or fall on multiple small candles mean actual trading and mood Keep checking which SL are being hit all day and take positions Also, watching charts of the option contract is kind of useful, but keep things simple Rainbow chart also can assist you once in trade, but do not exit based on it, do it only based on PL ratio Do not enter or exit during large candles and movements; watch it and capture it. In case of loss, you should have exited earlier, but if caught in momentum, then exit on retracement, but with too much momentum, exit there.","title":"Overall strategy"},{"location":"Trading_Notes/#entry","text":"Based on the opinion, take a position, with PL ration of at least 20% (As per intraday hunter) Exit on loss and exit on profit You can take multiple trades, but try keeping things simple","title":"Entry"},{"location":"Trading_Notes/#holding","text":"Keep holding profit over PL ratio as long as u-turn Exit at loss exact based on PL ratio","title":"Holding"},{"location":"Trading_Notes/#exit","text":"Inspired by Shakti from Conceptual Trader -https://www.youtube.com/c/ConceptualTrading 1. After entry, exit in 2-4 steps 2. For a good position, keep adding 3. For a bad position exit at PL ratio","title":"Exit"},{"location":"about/","text":"About me This is about me.","title":"About"},{"location":"about/#about-me","text":"This is about me.","title":"About me"},{"location":"Certifications-and-Learning/","text":"Learning Overall Workflow The Foundation DSA - Data Structures and Algorithms OOP - Object Oriented Programming LLD - Design Patterns SOLID Principles By Uncle Bob HLD - System Design TDD - Test Driven Development Practice Competitive Programming Ninja Practice One Level Up Languages, Libraries and Frameworks Web-App Development Blockchain and Web3 Machine Learning and AI Even Higher Level Flatpak App Development Docker GIT Cloud Other PMP Creativity","title":"Learning"},{"location":"Certifications-and-Learning/#learning","text":"Overall Workflow","title":"Learning"},{"location":"Certifications-and-Learning/#the-foundation","text":"DSA - Data Structures and Algorithms OOP - Object Oriented Programming LLD - Design Patterns SOLID Principles By Uncle Bob HLD - System Design TDD - Test Driven Development","title":"The Foundation"},{"location":"Certifications-and-Learning/#practice","text":"Competitive Programming Ninja Practice","title":"Practice"},{"location":"Certifications-and-Learning/#one-level-up","text":"Languages, Libraries and Frameworks Web-App Development Blockchain and Web3 Machine Learning and AI","title":"One Level Up"},{"location":"Certifications-and-Learning/#even-higher-level","text":"Flatpak App Development Docker GIT Cloud","title":"Even Higher Level"},{"location":"Certifications-and-Learning/#other","text":"PMP Creativity","title":"Other"},{"location":"Certifications-and-Learning/Flatpak-Apps-Development/","text":"Flatpak apps development https://docs.flatpak.org/en/latest/first-build.html","title":"Flatpak apps development"},{"location":"Certifications-and-Learning/Flatpak-Apps-Development/#flatpak-apps-development","text":"https://docs.flatpak.org/en/latest/first-build.html","title":"Flatpak apps development"},{"location":"Certifications-and-Learning/Overall-Workflow/","text":"Overall Workflow This document describes how I can have my development environment setup to ensure fast and reliable development NOTE: The flow does not work in case docker-in-docker cases. Like in hyperledger fabric, it kind of fails because it depends on docker constructions and a container in container kind of is not recommended, though can be done. For that, we need virtual machines to create complete machines for each project, which is kind of stupid to me. Proxmox for a central unit I am considering. Logic Map Proxmox can also be used at the top Level on a server spec PC OS - Fedora Silverblue (HOST) ostree to manage OS images rpm-ostree to manage global setups in each OS image Multiple Linux containers using toolbox/ podman (fedora or ubuntu or arch etc) Master Folder with projects and wikis dockerfile and compose for each project and various services with networks docker images commited to dockerhub/ other container registries and github packages Each project commited to github The Flow OS Level (HOST) Setup fedroa silverblue as needed Make various commits and branches if needed with ostree Upload to remote (learn to do so) Setup git and github for all projects and wikis on host Back the data up on google/ usb/ github etc OS container level Spin up a linux containers of choice, as per the work and support on the internet Work on your projects through these containers Copy from host to container or vice-verse Take backups of the OS containers on google/ usb/ hardist/ dropbox etc This enables me to track and run all my projects and files from all devices instantly Remote SSH into these containers (learn to do). Guacomoauli can be used to access them as well, if UI needed to work. Project Level Make a project. Make a readme and wiki. Make images for each service using dockerfile Connect each image with docker-compose on a network and shared volumes if needed Learn Networks - Host to container AND Container to Container Learn Volumes - Host to container AND Container to Container Push them on the github App Level Make a backend Make a database (local or remote or headless like sanity) Make a frontend Web version with javascript/ react etc Mobile version with ionic/ react-native/ cordova etc Desktop version with tauri/ electron/ eel etc CLI version too Each packaged by flatpak or other formats, based on dockerfiles etc","title":"Overall Workflow"},{"location":"Certifications-and-Learning/Overall-Workflow/#overall-workflow","text":"This document describes how I can have my development environment setup to ensure fast and reliable development NOTE: The flow does not work in case docker-in-docker cases. Like in hyperledger fabric, it kind of fails because it depends on docker constructions and a container in container kind of is not recommended, though can be done. For that, we need virtual machines to create complete machines for each project, which is kind of stupid to me. Proxmox for a central unit I am considering.","title":"Overall Workflow"},{"location":"Certifications-and-Learning/Overall-Workflow/#logic-map","text":"Proxmox can also be used at the top Level on a server spec PC OS - Fedora Silverblue (HOST) ostree to manage OS images rpm-ostree to manage global setups in each OS image Multiple Linux containers using toolbox/ podman (fedora or ubuntu or arch etc) Master Folder with projects and wikis dockerfile and compose for each project and various services with networks docker images commited to dockerhub/ other container registries and github packages Each project commited to github","title":"Logic Map"},{"location":"Certifications-and-Learning/Overall-Workflow/#the-flow","text":"","title":"The Flow"},{"location":"Certifications-and-Learning/Overall-Workflow/#os-level-host","text":"Setup fedroa silverblue as needed Make various commits and branches if needed with ostree Upload to remote (learn to do so) Setup git and github for all projects and wikis on host Back the data up on google/ usb/ github etc","title":"OS Level (HOST)"},{"location":"Certifications-and-Learning/Overall-Workflow/#os-container-level","text":"Spin up a linux containers of choice, as per the work and support on the internet Work on your projects through these containers Copy from host to container or vice-verse Take backups of the OS containers on google/ usb/ hardist/ dropbox etc This enables me to track and run all my projects and files from all devices instantly Remote SSH into these containers (learn to do). Guacomoauli can be used to access them as well, if UI needed to work.","title":"OS container level"},{"location":"Certifications-and-Learning/Overall-Workflow/#project-level","text":"Make a project. Make a readme and wiki. Make images for each service using dockerfile Connect each image with docker-compose on a network and shared volumes if needed Learn Networks - Host to container AND Container to Container Learn Volumes - Host to container AND Container to Container Push them on the github","title":"Project Level"},{"location":"Certifications-and-Learning/Overall-Workflow/#app-level","text":"Make a backend Make a database (local or remote or headless like sanity) Make a frontend Web version with javascript/ react etc Mobile version with ionic/ react-native/ cordova etc Desktop version with tauri/ electron/ eel etc CLI version too Each packaged by flatpak or other formats, based on dockerfiles etc","title":"App Level"},{"location":"Certifications-and-Learning/SOLID-Principles-By-Uncle-Bob/","text":"The Principles https://www.youtube.com/watch?v=69sfWNzxTMc Uncle Bob - https://www.youtube.com/watch?v=zHiWqnTWsn4&t=4s S - Single Responsibility - A class should have only one reason to change. Do only one thing? O - Open/ Close - Open for extension, but closed for modification L - Liskov Subsitution - The parent class can be replaced by the child class anywhere in code, and everything still works fine. I - Interface Segregation - If we make a class from interface, it should use all methods in interface. So make more smaller interfaces, and make class from combination of interfaces. D - Dependency Inversion - Depend on abstractions and not concrete instances. Do not modify something directly, always make a middle layer between object and actual implementation class. All in all, objective is: 1. Write code in such a way that the future modification/ extension of code is simple. 2. Change in one place, should not affect other places. 3. It should be easy to read by your future self, and others in present. 4. Once written, nothing to be changed and any future addition of code has no affect. How? some general, one rule mantra? For everything, we have two things, an objective and a result. Place a kind of bridge between them, always. 1. Like, make a class of the objective. 2. List the things it can interact with. 3. Add that list in the bridge class. 4. Connect that bridge class to the final other objective.","title":"The Principles"},{"location":"Certifications-and-Learning/SOLID-Principles-By-Uncle-Bob/#the-principles","text":"https://www.youtube.com/watch?v=69sfWNzxTMc Uncle Bob - https://www.youtube.com/watch?v=zHiWqnTWsn4&t=4s S - Single Responsibility - A class should have only one reason to change. Do only one thing? O - Open/ Close - Open for extension, but closed for modification L - Liskov Subsitution - The parent class can be replaced by the child class anywhere in code, and everything still works fine. I - Interface Segregation - If we make a class from interface, it should use all methods in interface. So make more smaller interfaces, and make class from combination of interfaces. D - Dependency Inversion - Depend on abstractions and not concrete instances. Do not modify something directly, always make a middle layer between object and actual implementation class. All in all, objective is: 1. Write code in such a way that the future modification/ extension of code is simple. 2. Change in one place, should not affect other places. 3. It should be easy to read by your future self, and others in present. 4. Once written, nothing to be changed and any future addition of code has no affect. How? some general, one rule mantra? For everything, we have two things, an objective and a result. Place a kind of bridge between them, always. 1. Like, make a class of the objective. 2. List the things it can interact with. 3. Add that list in the bridge class. 4. Connect that bridge class to the final other objective.","title":"The Principles"},{"location":"Certifications-and-Learning/DSA/","text":"Contents DSA by Mosh About Missing - i think but not sure Good Links Cheat sheets Understanding - Total Learning - Flow of solving a problem Basics - Big O - Linear Data Structures - Non Linear Data Structures - Sort, Search and String Manipulation Other Section - Problem Solving Techniques - Solving Optimization Problems - Multiple solutions and we want all - Questions and Answers DSA by Mosh About Starting by Code with Mosh tutorial. Teacher Details: Twitter: https://twitter.com/moshhamedani Facebook: https://www.facebook.com/programmingwithmosh YouTube: https://www.youtube.com/user/programmingwithmosh LinkedIn: https://www.linkedin.com/in/mosh-hamedani/ I have made a folder in this wiki, where all exercise files will go. Missing - i think but not sure Bit Manipulation Tabulation Good Links https://www.hackerearth.com/ Cheat sheets https://www.bigocheatsheet.com/ https://hackingcpp.com/cpp/cheat_sheets.html https://cheatography.com/burcuco/cheat-sheets/data-structures-and-algorithms/ Python - https://intellipaat.com/blog/tutorial/python-tutorial/data-structures-with-python-cheat-sheet/ Python PDF - https://intellipaat.com/mediaFiles/2019/02/Python-Data-structures-cheat-sheet.pdf Understanding Total Learning Construct each DS in python. Learn indexing, search, insert, delete and sort in each. Memorise complexity of search and sort in each, from a cheat sheet. Learn complexity of loops Choose iterations or recursion. Recursion is shorter, while iteration seems natural. Practice Brute Force, Dynamic Programming and Greedy Methods Flow of solving a problem Visualise and think of which DS to use. Check mathematical answer, if any. -- https://www.geeksforgeeks.org/mathematical-algorithms/ Apply Brute Force with loops. Then optimize with Dynamic Learn to build each DS in a language Learn to add standard methods to each DS Traversal in each case add and remove, in front, in the end, in between update item search item sort item size of collection conversion from one collection type to another error handling if empty OOP based creating data structures, then adding add, remove etc methods with error handling next item, previous item, jumping in steps Basics Big O 01 BigO Linear Data Structures 02 Array 03 LinkedList 04 Stacks 05 Queues 06 Hash Tables Non Linear Data Structures 07 Binary Trees 08 AVL Trees - balancing binary trees 09 Heaps - binary trees with heap properties 10 Tries - type of tree but not binary tree 11 Graphs - Modern and versatile 12 Uni Directed Graphs Sort, Search and String Manipulation 13 Sorting Algorithms 14 Searching Algorithms 15 String Manipulation Other Section BFS and DFS - Graph Traversal Methods Note: Array vs LinkedList Static Array have fixed size, and takes specific memory Dynamic Array grow by 50%-100% when they get full But certain operations on LinkedList are faster than array Its a fine balance of performance and memory Problem Solving Techniques Solving Optimization Problems Both are used to solve optimization problems. Meaning where we want to find min or max 01 Dynamic Programming - Has no constrain, hence need accuracy 02 Greedy Algorithms - Has constrain, so we solve for it, result is per the constrain. Multiple solutions and we want all 03 Back Tracking - DFS 04 Branch and Bound - BFS - Also used for solving optimization problems 05 Divide and Conquer Questions and Answers Neetcode","title":"Contents"},{"location":"Certifications-and-Learning/DSA/#contents","text":"DSA by Mosh About Missing - i think but not sure Good Links Cheat sheets Understanding - Total Learning - Flow of solving a problem Basics - Big O - Linear Data Structures - Non Linear Data Structures - Sort, Search and String Manipulation Other Section - Problem Solving Techniques - Solving Optimization Problems - Multiple solutions and we want all - Questions and Answers","title":"Contents"},{"location":"Certifications-and-Learning/DSA/#dsa-by-mosh","text":"","title":"DSA by Mosh"},{"location":"Certifications-and-Learning/DSA/#about","text":"Starting by Code with Mosh tutorial. Teacher Details: Twitter: https://twitter.com/moshhamedani Facebook: https://www.facebook.com/programmingwithmosh YouTube: https://www.youtube.com/user/programmingwithmosh LinkedIn: https://www.linkedin.com/in/mosh-hamedani/ I have made a folder in this wiki, where all exercise files will go.","title":"About"},{"location":"Certifications-and-Learning/DSA/#missing-i-think-but-not-sure","text":"Bit Manipulation Tabulation","title":"Missing - i think but not sure"},{"location":"Certifications-and-Learning/DSA/#good-links","text":"https://www.hackerearth.com/","title":"Good Links"},{"location":"Certifications-and-Learning/DSA/#cheat-sheets","text":"https://www.bigocheatsheet.com/ https://hackingcpp.com/cpp/cheat_sheets.html https://cheatography.com/burcuco/cheat-sheets/data-structures-and-algorithms/ Python - https://intellipaat.com/blog/tutorial/python-tutorial/data-structures-with-python-cheat-sheet/ Python PDF - https://intellipaat.com/mediaFiles/2019/02/Python-Data-structures-cheat-sheet.pdf","title":"Cheat sheets"},{"location":"Certifications-and-Learning/DSA/#understanding","text":"","title":"Understanding"},{"location":"Certifications-and-Learning/DSA/#total-learning","text":"Construct each DS in python. Learn indexing, search, insert, delete and sort in each. Memorise complexity of search and sort in each, from a cheat sheet. Learn complexity of loops Choose iterations or recursion. Recursion is shorter, while iteration seems natural. Practice Brute Force, Dynamic Programming and Greedy Methods","title":"Total Learning"},{"location":"Certifications-and-Learning/DSA/#flow-of-solving-a-problem","text":"Visualise and think of which DS to use. Check mathematical answer, if any. -- https://www.geeksforgeeks.org/mathematical-algorithms/ Apply Brute Force with loops. Then optimize with Dynamic Learn to build each DS in a language Learn to add standard methods to each DS Traversal in each case add and remove, in front, in the end, in between update item search item sort item size of collection conversion from one collection type to another error handling if empty OOP based creating data structures, then adding add, remove etc methods with error handling next item, previous item, jumping in steps","title":"Flow of solving a problem"},{"location":"Certifications-and-Learning/DSA/#basics","text":"","title":"Basics"},{"location":"Certifications-and-Learning/DSA/#big-o","text":"01 BigO","title":"Big O"},{"location":"Certifications-and-Learning/DSA/#linear-data-structures","text":"02 Array 03 LinkedList 04 Stacks 05 Queues 06 Hash Tables","title":"Linear Data Structures"},{"location":"Certifications-and-Learning/DSA/#non-linear-data-structures","text":"07 Binary Trees 08 AVL Trees - balancing binary trees 09 Heaps - binary trees with heap properties 10 Tries - type of tree but not binary tree 11 Graphs - Modern and versatile 12 Uni Directed Graphs","title":"Non Linear Data Structures"},{"location":"Certifications-and-Learning/DSA/#sort-search-and-string-manipulation","text":"13 Sorting Algorithms 14 Searching Algorithms 15 String Manipulation","title":"Sort, Search and String Manipulation"},{"location":"Certifications-and-Learning/DSA/#other-section","text":"BFS and DFS - Graph Traversal Methods Note: Array vs LinkedList Static Array have fixed size, and takes specific memory Dynamic Array grow by 50%-100% when they get full But certain operations on LinkedList are faster than array Its a fine balance of performance and memory","title":"Other Section"},{"location":"Certifications-and-Learning/DSA/#problem-solving-techniques","text":"","title":"Problem Solving Techniques"},{"location":"Certifications-and-Learning/DSA/#solving-optimization-problems","text":"Both are used to solve optimization problems. Meaning where we want to find min or max 01 Dynamic Programming - Has no constrain, hence need accuracy 02 Greedy Algorithms - Has constrain, so we solve for it, result is per the constrain.","title":"Solving Optimization Problems"},{"location":"Certifications-and-Learning/DSA/#multiple-solutions-and-we-want-all","text":"03 Back Tracking - DFS 04 Branch and Bound - BFS - Also used for solving optimization problems 05 Divide and Conquer","title":"Multiple solutions and we want all"},{"location":"Certifications-and-Learning/DSA/#questions-and-answers","text":"Neetcode","title":"Questions and Answers"},{"location":"Certifications-and-Learning/DSA/01-BigO/","text":"Big O Runtime complexity or Time complexity --> Time takes in max load/ worst case Space complexity --> Memory used in max load/ worst case With algo with multiple loops and functions, we choose the largest O only, and drop remaining. Eg If any loop has O(n^2), and others O(n), we choose O(n^2) instead of O(n + n^2) Time Complexity O(1) - Constant Runs in constant time, like print(\"Hello\") O(n) - Linear Runs based on size of input. Loop with i++ and addition subtractions based iterations Two loops, independent from each other, not nested --> O(n+n) = O(2n) Two nested loops, with i++ -- etc --> O(n*n) = O(n^2) O(n^2) - Quadratic Two Nested Loops case. For three nested loops its n^3 For 4 its n^4 ... and so on O(log n) - Logarithmic When algo goes half half to tackle the whole problem, like in binary search. O(2^n) - Exponential Exponential, opposite of Log n. Space Complexity Optimizing for space in a small watch is important. O(1) space -- A simple loop with empty list O(n) space -- A simple loop with itmes in list O(n^2) space -- Check, I am making it up. A loop, which gives a result to store, and save the previous result too.","title":"Big O"},{"location":"Certifications-and-Learning/DSA/01-BigO/#big-o","text":"Runtime complexity or Time complexity --> Time takes in max load/ worst case Space complexity --> Memory used in max load/ worst case With algo with multiple loops and functions, we choose the largest O only, and drop remaining. Eg If any loop has O(n^2), and others O(n), we choose O(n^2) instead of O(n + n^2)","title":"Big O"},{"location":"Certifications-and-Learning/DSA/01-BigO/#time-complexity","text":"","title":"Time Complexity"},{"location":"Certifications-and-Learning/DSA/01-BigO/#o1-constant","text":"Runs in constant time, like print(\"Hello\")","title":"O(1) - Constant"},{"location":"Certifications-and-Learning/DSA/01-BigO/#on-linear","text":"Runs based on size of input. Loop with i++ and addition subtractions based iterations Two loops, independent from each other, not nested --> O(n+n) = O(2n) Two nested loops, with i++ -- etc --> O(n*n) = O(n^2)","title":"O(n) - Linear"},{"location":"Certifications-and-Learning/DSA/01-BigO/#on2-quadratic","text":"Two Nested Loops case. For three nested loops its n^3 For 4 its n^4 ... and so on","title":"O(n^2) - Quadratic"},{"location":"Certifications-and-Learning/DSA/01-BigO/#olog-n-logarithmic","text":"When algo goes half half to tackle the whole problem, like in binary search.","title":"O(log n) - Logarithmic"},{"location":"Certifications-and-Learning/DSA/01-BigO/#o2n-exponential","text":"Exponential, opposite of Log n.","title":"O(2^n) - Exponential"},{"location":"Certifications-and-Learning/DSA/01-BigO/#space-complexity","text":"Optimizing for space in a small watch is important. O(1) space -- A simple loop with empty list O(n) space -- A simple loop with itmes in list O(n^2) space -- Check, I am making it up. A loop, which gives a result to store, and save the previous result too.","title":"Space Complexity"},{"location":"Certifications-and-Learning/DSA/01-Dynamic-Programming/","text":"Contents Dynamic Programming Very Basics Methodology Optemise a Fibonacci function grid Traveller brute force Memoize Dynamic Programming Very Basics https://www.youtube.com/watch?v=oBt53YbR9Kk Very Good explanation - https://www.youtube.com/watch?v=5dRGRueKU3M Recursion is kind of the CORE to it. We decompose larger problem into smaller and cache result in each step (memoization). Or use tabulation to solve. Thing problems in terms of trees Two Ways Memoization - Store values Tabulation - Make tables out Methodology Make it work by bruteforce: Visualise as tree Implement with recursion test it for various cases Make it efficient using memoization: Add memo dict add new base case to return memo values store return values into the memo def dib(n): if n<=1: return return dib(n-1) # O(n) OR return dib(n-1) + dib(n-1) # O(2^n) OR return dib(n-1) return dib(n-1) return dib(n-1) # O(3^n) Notice if we call: dib(n) once, its O(n) <-- 1d like list dib(n) twice, its O(2^n) <-- 2d like list dib(n) thrice, its O(3^n) <-- 3d like list a fib function calls twice Optemise a Fibonacci function https://youtu.be/oBt53YbR9Kk?t=1933 Makes O(2^n) to O(n) From exponantial to linear !! WOW! 1 1 2 3 5 8 13 21 memo = {} def fib(n, memo): if n in memo: return memo.n if n<=2: return 1 memo.n = fib(n-1, memo) + fib(n-2, memo) return memo.n x=fib(5, memo) print(x) grid Traveller https://youtu.be/oBt53YbR9Kk?t=2956 brute force def gt(m,n): if m==1 and n==1: return 1 if m==0 or n==0: return 0 return gt(m-1, n) + gt(m, n-1) # Moving in m direction is m-1,n and for n direction is m, n-1 Memoize memo = {} def gt(m,n, memo): key = m + \",\" + n if key in memo: return memo[key] if m==1 and n==1: return 1 if m==0 or n==0: return 0 memo[key] = gt(m-1, n) + gt(m, n-1) return memo[key] Find if given items in list adds to the given target https://youtu.be/oBt53YbR9Kk?t=4225 Make the root as the target root - each item gives difference in the leaf if leaf becomes zero, we found our answer n = 7 l = [5,3,4,7] def p(n,l): if n == 0: return True if n < 0: return False for each in l: m = n - each if p(m, l) == True: return True return False","title":"Contents"},{"location":"Certifications-and-Learning/DSA/01-Dynamic-Programming/#contents","text":"Dynamic Programming Very Basics Methodology Optemise a Fibonacci function grid Traveller brute force Memoize","title":"Contents"},{"location":"Certifications-and-Learning/DSA/01-Dynamic-Programming/#dynamic-programming","text":"","title":"Dynamic Programming"},{"location":"Certifications-and-Learning/DSA/01-Dynamic-Programming/#very-basics","text":"https://www.youtube.com/watch?v=oBt53YbR9Kk Very Good explanation - https://www.youtube.com/watch?v=5dRGRueKU3M Recursion is kind of the CORE to it. We decompose larger problem into smaller and cache result in each step (memoization). Or use tabulation to solve. Thing problems in terms of trees","title":"Very Basics"},{"location":"Certifications-and-Learning/DSA/01-Dynamic-Programming/#two-ways","text":"Memoization - Store values Tabulation - Make tables out","title":"Two Ways"},{"location":"Certifications-and-Learning/DSA/01-Dynamic-Programming/#methodology","text":"Make it work by bruteforce: Visualise as tree Implement with recursion test it for various cases Make it efficient using memoization: Add memo dict add new base case to return memo values store return values into the memo def dib(n): if n<=1: return return dib(n-1) # O(n) OR return dib(n-1) + dib(n-1) # O(2^n) OR return dib(n-1) return dib(n-1) return dib(n-1) # O(3^n) Notice if we call: dib(n) once, its O(n) <-- 1d like list dib(n) twice, its O(2^n) <-- 2d like list dib(n) thrice, its O(3^n) <-- 3d like list a fib function calls twice","title":"Methodology"},{"location":"Certifications-and-Learning/DSA/01-Dynamic-Programming/#optemise-a-fibonacci-function","text":"https://youtu.be/oBt53YbR9Kk?t=1933 Makes O(2^n) to O(n) From exponantial to linear !! WOW! 1 1 2 3 5 8 13 21 memo = {} def fib(n, memo): if n in memo: return memo.n if n<=2: return 1 memo.n = fib(n-1, memo) + fib(n-2, memo) return memo.n x=fib(5, memo) print(x)","title":"Optemise a Fibonacci function"},{"location":"Certifications-and-Learning/DSA/01-Dynamic-Programming/#grid-traveller","text":"https://youtu.be/oBt53YbR9Kk?t=2956","title":"grid Traveller"},{"location":"Certifications-and-Learning/DSA/01-Dynamic-Programming/#brute-force","text":"def gt(m,n): if m==1 and n==1: return 1 if m==0 or n==0: return 0 return gt(m-1, n) + gt(m, n-1) # Moving in m direction is m-1,n and for n direction is m, n-1","title":"brute force"},{"location":"Certifications-and-Learning/DSA/01-Dynamic-Programming/#memoize","text":"memo = {} def gt(m,n, memo): key = m + \",\" + n if key in memo: return memo[key] if m==1 and n==1: return 1 if m==0 or n==0: return 0 memo[key] = gt(m-1, n) + gt(m, n-1) return memo[key]","title":"Memoize"},{"location":"Certifications-and-Learning/DSA/01-Dynamic-Programming/#find-if-given-items-in-list-adds-to-the-given-target","text":"https://youtu.be/oBt53YbR9Kk?t=4225 Make the root as the target root - each item gives difference in the leaf if leaf becomes zero, we found our answer n = 7 l = [5,3,4,7] def p(n,l): if n == 0: return True if n < 0: return False for each in l: m = n - each if p(m, l) == True: return True return False","title":"Find if given items in list adds to the given target"},{"location":"Certifications-and-Learning/DSA/02-Array/","text":"Array List in python. Square brackets --> [1,2,3] Intro Good - O(1) searching since items are indexed Bad - Fixed length in java, meaning they are static, which means we can waste memory if the size is too big and we don't fill them with enough items. Lookup - O(1) Insert - O(n) Delete - O(n) In Java, creating dynamic array Array n = new Array(length:3); n.insert(item:10); n.insert(item:20); n.insert(item:30); n.insert(item:40); n.removeAt(index:3); n.indexOf(10); n.toString(); // For printing Vector: Synchronized, single thread ArrayList list = new ArrayList<>();","title":"Array"},{"location":"Certifications-and-Learning/DSA/02-Array/#array","text":"List in python. Square brackets --> [1,2,3]","title":"Array"},{"location":"Certifications-and-Learning/DSA/02-Array/#intro","text":"Good - O(1) searching since items are indexed Bad - Fixed length in java, meaning they are static, which means we can waste memory if the size is too big and we don't fill them with enough items. Lookup - O(1) Insert - O(n) Delete - O(n)","title":"Intro"},{"location":"Certifications-and-Learning/DSA/02-Array/#in-java-creating-dynamic-array","text":"Array n = new Array(length:3); n.insert(item:10); n.insert(item:20); n.insert(item:30); n.insert(item:40); n.removeAt(index:3); n.indexOf(10); n.toString(); // For printing Vector: Synchronized, single thread ArrayList list = new ArrayList<>();","title":"In Java, creating dynamic array"},{"location":"Certifications-and-Learning/DSA/02-Greedy-Algorithms/","text":"Contents Theory by Abdul Bari Famous Problems which comes under it Overview General Method and Approach Greedy Algorithms Examples Bulb Problem Highest Product Disjoint Intervals Largest Permutations Meeting Rooms Distribute Candies Seats Assign mise to holes Majourity Element Gas Station Theory by Abdul Bari https://www.youtube.com/watch?v=ARvQcqJ_-NY&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=39 Famous Problems which comes under it Knapsack Problem - https://www.youtube.com/watch?v=oTTzNMHM05I&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=40 Job Sequencing Optimal Merge Pattern Huffman Coding Prims and Kruskals Dijkstra Algo - For finding shortest paths Overview To solve optemisation problem. Min and Max type. Can have many solution. Then we always have a constrain or condition. We need to choose the solution as per the constraints. We can have multiple constraints. Hence we have a jargon of feasible solution. Solution which considers the constraints. We can have multiple feasible solutions, but we choose the best, jargon alert, called Optimal Solution. Note: In case of dynamic programming, we do not have constrain, and we go for the best solution. Faster then dynamic programming, but solution is based on constrain, so not most accurate. Dynamic Programming is slower but more accurate. General Method and Approach https://youtu.be/ARvQcqJ_-NY?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&t=378 Problem to be solved in stages. In each stage, check feasibility of solution. If feasible, include in solutions list, else reject. Then we end up with the final Optimal Solution. For loop if loop Solution Famous Problems Knapsack Problem https://www.youtube.com/watch?v=oTTzNMHM05I&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=40 Problem is 2D. Two things to consider for maximizing or minimizing. We have n items. Each item has profit margin + Each item has a weight. - 2D. We need to fill a bag, with a constraint of say 15 kg max weight allowed. - Constraint. We need to fill it, such that the final profit is maximised. - Expectation. Method: Convert 2D to 1D first. Either we fill by maximum items OR fill by maximum weight. We need a combination, a weighted average, where max weight is 15 kg, and get max profit. Calculate profit/ weight, call it p/w. Now this becomes a 1D problem. My solution - Now, we can see the max in 1D list, and divide the constraint, 15kg by the max. And include only the highest profit/ weight item. Standard Solution - Take max p/w, subtract from 15kg, remaining 14kg take second max p/w, subtract from 14kg, remaining 12kg ...etc Finally, multiply each weight and profit and add, to get result. ISSUE: Not in the video, nor on geekforgeek, it is explicitly tells that we need to include most item, and can not include only one. So, somewhere it is assumed that we need to include more than one item, and not only one with max profit. It is assumed we can take maximum of one unit, and minimum any fraction if needed. (in video) On geek for geek, they say fractions not allowed. Job Sequencing https://www.youtube.com/watch?v=zPtI8q9gvX8&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=41 A list of jobs with returns/ profit - [20, 15, 10, 5, 1] B list of deadlines - [2 , 2, 1, 3, 3] Constraint - Max in deadline, ie 3 slots available, max in deadline. Assumption - Each job takes a unit of time to complete. Expectation - Solve for max profit. Only one job can be done at a time. Fractional completion not allowed. How to see the problem. You are a painter. You take 1 hour to make a portrait. Say five people are there, each wiling to give you money as per their capacity. You open shop at 12pm. Refer list above. 1st person says, I will pay you 20 bucks and can wait till 2pm 2nd says, I will pay 15 bucks and wait till 2pm 3rd says, I will pay 10 bucks and wait till 1pm 4th says, I will pay 5 bucks and wait till 3pm How to approach, greedy method. 1st Guy, 2nd Guy then 4th Guy, coz third guy wanted delivery at 1pm, but we used that time for 2nd person. Optimal Merge Pattern https://www.youtube.com/watch?v=HHIc5JZyenI&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=42 You have 5 list of different sizes. Perform 2-way merge sort so that total cost of merging is minimised. Cost is = Total of all internal nodes, leaving the leaves out. Method: Find len(eachList) Start with two smallest list. Get a result. Now we have 4 lists, 2 combined, and 3 from earlier. Then again choose smallest list, including the above result list and continue.... What you get is optimal merge sort. Huffman Coding https://www.youtube.com/watch?v=co4_ahEDCho&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=43 Depends on understanding of Optimal Merge Pattern. All about compressing a string message. Better for storage and network communication. Prims and Kruskals https://www.youtube.com/watch?v=4ZlRH0eK-qQ&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=44 Jargon - Minimum Cost Spanning Tree We have a graph with Vertices and Edges. Vertices have value and each edge has weights. The graph is closed and maybe cyclic. We need to find minimum cost spanning tree, based on edge weights, which means removing some edges from the given graph, and making an open graph. 2D - See we have vertices value and edge weight, hence greedy approach is relevant. So we have two algo for this, prim and kruskals Prims https://youtu.be/4ZlRH0eK-qQ?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&t=491 Note: In optimal merge tree, we choose smallest list size to start with. Here we start with smallest edge weight. and then move forward, selecting minimum edge weight, which are connected to selected vertices.* imp Kruskals https://youtu.be/4ZlRH0eK-qQ?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&t=733 Like prim, but here we always choose smallest edge, BUT condition of connected vertices is not there. Important consideration: While selecting the minimum edge, if we end up closing a graph, don't select the edge. O(n^2) But if using min heap, it becomes O(n log n) Note: This may work for disconnected graphs too, but does not find spanning tree overall. Find spanning tree for each disconnected graph. - https://youtu.be/4ZlRH0eK-qQ?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&t=938 For missing edge weight, once can find the minimum weights for those edges too - https://youtu.be/4ZlRH0eK-qQ?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&t=1008 Dijkstra Algo https://www.youtube.com/watch?v=XB4MIexjvY0&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=45 Another algo called Bellman-Ford for shortest path - https://www.youtube.com/watch?v=2raV0H9KqY8&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=80 For shortest path problems. Works on directed and non directed graphs. For a given starting node in a graph, any node can be selected, finding its minimum distance to all other nodes. Jargon - Relaxation Select Node and see less weight nodes, choose the less weight edge and relax the node Choose next node and again less weight node, relax the node by updating the node. ..... till all nodes updated. Finally we get a table with shortest distance of each node from the starting node. Worst Case O(n^2) Drawbacks - https://youtu.be/XB4MIexjvY0?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&t=862 If edge weight is negative value. Greedy Algorithms Examples https://www.youtube.com/watch?v=bC7o8P_Ste4 Python solution - https://www.geeksforgeeks.org/0-1-knapsack-problem-dp-10/ Find the fastest solution, but not guaranteed the optimal one. Think of minesweeper game. A 2d grid, where we move in different directions without knowing what lies ahead. We keep choosing the best block and move. Bulb Problem https://youtu.be/bC7o8P_Ste4?t=327 A list like [1,0,1,1,0,0,1,1,0,1,0,0,0,0,1] is given On each element if 0, we flip it by 1, and also flip remaining to opposite of what they are. We need to find minimum number of switches to turn all of them on, ie 1 O(n^2) and O(1) space in bruteforce def bulbs(A): cost = 0 for each in A: # This is O(n) solution if cost%2 ==0: each = each else: each = not each if b%2==1: continue else: cost +=1 return cost Highest Product Disjoint Intervals Largest Permutations https://youtu.be/bC7o8P_Ste4?t=1757 For list L and A number N, Swap two items in list, N number of times, so that when each item in list is concatenated, it forms the biggest number possible. Eg L = [1,3,2] and N = 1 We swap item 3, with 1 to get [3,1,2] -> 312 <-- this is biggest number L = [1,2,3,4] and N = 1. Swap 4 with 1, to get 4231 N=3 L = [1,3,2,7,6,5,4] def swap(L,a,b): L[a], L[b] = L[b], L[a] return L Meeting Rooms https://youtu.be/bC7o8P_Ste4?t=2919 ------------My logic, need to check------ L = [[5,10],[15,20],[0,30]] L1 = [5,5,30] - Time to complete a meeting, difference taken of sub list. L2 = [1,1,1] - How many meeting rooms needed per meeting. Max rooms 3, if all run. 30 is max, 1 room needed Sum of remaining, 5 + 5 less than 30, only one more room for needed. Answer is 2. L = [[5,15],[10,30],[0,60],[20,90]] L1 = [5,20,60,70] - total 95....[0.05,0.21,0.63,0.73] - L2 = [1,1,1,1] 70 Max, 1 room 5+20+60 = 85 > 70, then 60 max, 1 room 5+20 = 25 < 60, then 1 more room. Answer is 3 rooms. M = [] for each in L: m.append(each[1]-each[0]) Distribute Candies https://youtu.be/bC7o8P_Ste4?t=3032 Rating = [1,7,4,3,1] -- [1,1,3,4,7] children = [1,1,1,1,1] Give a candy to lowest, and then more candy to every higher rating kid from previous. --------My solution rating = rating.sort() total = 1 inc = 1 for i in len(range(rating)): if each[i]>each[i-1]: inc+=1 total+=inc else: total+=inc Seats Assign mise to holes Majourity Element Gas Station","title":"Contents"},{"location":"Certifications-and-Learning/DSA/02-Greedy-Algorithms/#contents","text":"Theory by Abdul Bari Famous Problems which comes under it Overview General Method and Approach Greedy Algorithms Examples Bulb Problem Highest Product Disjoint Intervals Largest Permutations Meeting Rooms Distribute Candies Seats Assign mise to holes Majourity Element Gas Station","title":"Contents"},{"location":"Certifications-and-Learning/DSA/02-Greedy-Algorithms/#theory-by-abdul-bari","text":"https://www.youtube.com/watch?v=ARvQcqJ_-NY&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=39","title":"Theory by Abdul Bari"},{"location":"Certifications-and-Learning/DSA/02-Greedy-Algorithms/#famous-problems-which-comes-under-it","text":"Knapsack Problem - https://www.youtube.com/watch?v=oTTzNMHM05I&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=40 Job Sequencing Optimal Merge Pattern Huffman Coding Prims and Kruskals Dijkstra Algo - For finding shortest paths","title":"Famous Problems which comes under it"},{"location":"Certifications-and-Learning/DSA/02-Greedy-Algorithms/#overview","text":"To solve optemisation problem. Min and Max type. Can have many solution. Then we always have a constrain or condition. We need to choose the solution as per the constraints. We can have multiple constraints. Hence we have a jargon of feasible solution. Solution which considers the constraints. We can have multiple feasible solutions, but we choose the best, jargon alert, called Optimal Solution. Note: In case of dynamic programming, we do not have constrain, and we go for the best solution. Faster then dynamic programming, but solution is based on constrain, so not most accurate. Dynamic Programming is slower but more accurate.","title":"Overview"},{"location":"Certifications-and-Learning/DSA/02-Greedy-Algorithms/#general-method-and-approach","text":"https://youtu.be/ARvQcqJ_-NY?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&t=378 Problem to be solved in stages. In each stage, check feasibility of solution. If feasible, include in solutions list, else reject. Then we end up with the final Optimal Solution. For loop if loop Solution","title":"General Method and Approach"},{"location":"Certifications-and-Learning/DSA/02-Greedy-Algorithms/#famous-problems","text":"","title":"Famous Problems"},{"location":"Certifications-and-Learning/DSA/02-Greedy-Algorithms/#knapsack-problem","text":"https://www.youtube.com/watch?v=oTTzNMHM05I&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=40 Problem is 2D. Two things to consider for maximizing or minimizing. We have n items. Each item has profit margin + Each item has a weight. - 2D. We need to fill a bag, with a constraint of say 15 kg max weight allowed. - Constraint. We need to fill it, such that the final profit is maximised. - Expectation. Method: Convert 2D to 1D first. Either we fill by maximum items OR fill by maximum weight. We need a combination, a weighted average, where max weight is 15 kg, and get max profit. Calculate profit/ weight, call it p/w. Now this becomes a 1D problem. My solution - Now, we can see the max in 1D list, and divide the constraint, 15kg by the max. And include only the highest profit/ weight item. Standard Solution - Take max p/w, subtract from 15kg, remaining 14kg take second max p/w, subtract from 14kg, remaining 12kg ...etc Finally, multiply each weight and profit and add, to get result. ISSUE: Not in the video, nor on geekforgeek, it is explicitly tells that we need to include most item, and can not include only one. So, somewhere it is assumed that we need to include more than one item, and not only one with max profit. It is assumed we can take maximum of one unit, and minimum any fraction if needed. (in video) On geek for geek, they say fractions not allowed.","title":"Knapsack Problem"},{"location":"Certifications-and-Learning/DSA/02-Greedy-Algorithms/#job-sequencing","text":"https://www.youtube.com/watch?v=zPtI8q9gvX8&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=41 A list of jobs with returns/ profit - [20, 15, 10, 5, 1] B list of deadlines - [2 , 2, 1, 3, 3] Constraint - Max in deadline, ie 3 slots available, max in deadline. Assumption - Each job takes a unit of time to complete. Expectation - Solve for max profit. Only one job can be done at a time. Fractional completion not allowed. How to see the problem. You are a painter. You take 1 hour to make a portrait. Say five people are there, each wiling to give you money as per their capacity. You open shop at 12pm. Refer list above. 1st person says, I will pay you 20 bucks and can wait till 2pm 2nd says, I will pay 15 bucks and wait till 2pm 3rd says, I will pay 10 bucks and wait till 1pm 4th says, I will pay 5 bucks and wait till 3pm How to approach, greedy method. 1st Guy, 2nd Guy then 4th Guy, coz third guy wanted delivery at 1pm, but we used that time for 2nd person.","title":"Job Sequencing"},{"location":"Certifications-and-Learning/DSA/02-Greedy-Algorithms/#optimal-merge-pattern","text":"https://www.youtube.com/watch?v=HHIc5JZyenI&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=42 You have 5 list of different sizes. Perform 2-way merge sort so that total cost of merging is minimised. Cost is = Total of all internal nodes, leaving the leaves out. Method: Find len(eachList) Start with two smallest list. Get a result. Now we have 4 lists, 2 combined, and 3 from earlier. Then again choose smallest list, including the above result list and continue.... What you get is optimal merge sort.","title":"Optimal Merge Pattern"},{"location":"Certifications-and-Learning/DSA/02-Greedy-Algorithms/#huffman-coding","text":"https://www.youtube.com/watch?v=co4_ahEDCho&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=43 Depends on understanding of Optimal Merge Pattern. All about compressing a string message. Better for storage and network communication.","title":"Huffman Coding"},{"location":"Certifications-and-Learning/DSA/02-Greedy-Algorithms/#prims-and-kruskals","text":"https://www.youtube.com/watch?v=4ZlRH0eK-qQ&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=44 Jargon - Minimum Cost Spanning Tree We have a graph with Vertices and Edges. Vertices have value and each edge has weights. The graph is closed and maybe cyclic. We need to find minimum cost spanning tree, based on edge weights, which means removing some edges from the given graph, and making an open graph. 2D - See we have vertices value and edge weight, hence greedy approach is relevant. So we have two algo for this, prim and kruskals","title":"Prims and Kruskals"},{"location":"Certifications-and-Learning/DSA/02-Greedy-Algorithms/#prims","text":"https://youtu.be/4ZlRH0eK-qQ?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&t=491 Note: In optimal merge tree, we choose smallest list size to start with. Here we start with smallest edge weight. and then move forward, selecting minimum edge weight, which are connected to selected vertices.* imp","title":"Prims"},{"location":"Certifications-and-Learning/DSA/02-Greedy-Algorithms/#kruskals","text":"https://youtu.be/4ZlRH0eK-qQ?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&t=733 Like prim, but here we always choose smallest edge, BUT condition of connected vertices is not there. Important consideration: While selecting the minimum edge, if we end up closing a graph, don't select the edge. O(n^2) But if using min heap, it becomes O(n log n) Note: This may work for disconnected graphs too, but does not find spanning tree overall. Find spanning tree for each disconnected graph. - https://youtu.be/4ZlRH0eK-qQ?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&t=938 For missing edge weight, once can find the minimum weights for those edges too - https://youtu.be/4ZlRH0eK-qQ?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&t=1008","title":"Kruskals"},{"location":"Certifications-and-Learning/DSA/02-Greedy-Algorithms/#dijkstra-algo","text":"https://www.youtube.com/watch?v=XB4MIexjvY0&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=45 Another algo called Bellman-Ford for shortest path - https://www.youtube.com/watch?v=2raV0H9KqY8&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=80 For shortest path problems. Works on directed and non directed graphs. For a given starting node in a graph, any node can be selected, finding its minimum distance to all other nodes. Jargon - Relaxation Select Node and see less weight nodes, choose the less weight edge and relax the node Choose next node and again less weight node, relax the node by updating the node. ..... till all nodes updated. Finally we get a table with shortest distance of each node from the starting node. Worst Case O(n^2) Drawbacks - https://youtu.be/XB4MIexjvY0?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&t=862 If edge weight is negative value.","title":"Dijkstra Algo"},{"location":"Certifications-and-Learning/DSA/02-Greedy-Algorithms/#greedy-algorithms-examples","text":"https://www.youtube.com/watch?v=bC7o8P_Ste4 Python solution - https://www.geeksforgeeks.org/0-1-knapsack-problem-dp-10/ Find the fastest solution, but not guaranteed the optimal one. Think of minesweeper game. A 2d grid, where we move in different directions without knowing what lies ahead. We keep choosing the best block and move.","title":"Greedy Algorithms Examples"},{"location":"Certifications-and-Learning/DSA/02-Greedy-Algorithms/#bulb-problem","text":"https://youtu.be/bC7o8P_Ste4?t=327 A list like [1,0,1,1,0,0,1,1,0,1,0,0,0,0,1] is given On each element if 0, we flip it by 1, and also flip remaining to opposite of what they are. We need to find minimum number of switches to turn all of them on, ie 1 O(n^2) and O(1) space in bruteforce def bulbs(A): cost = 0 for each in A: # This is O(n) solution if cost%2 ==0: each = each else: each = not each if b%2==1: continue else: cost +=1 return cost","title":"Bulb Problem"},{"location":"Certifications-and-Learning/DSA/02-Greedy-Algorithms/#highest-product","text":"","title":"Highest Product"},{"location":"Certifications-and-Learning/DSA/02-Greedy-Algorithms/#disjoint-intervals","text":"","title":"Disjoint Intervals"},{"location":"Certifications-and-Learning/DSA/02-Greedy-Algorithms/#largest-permutations","text":"https://youtu.be/bC7o8P_Ste4?t=1757 For list L and A number N, Swap two items in list, N number of times, so that when each item in list is concatenated, it forms the biggest number possible. Eg L = [1,3,2] and N = 1 We swap item 3, with 1 to get [3,1,2] -> 312 <-- this is biggest number L = [1,2,3,4] and N = 1. Swap 4 with 1, to get 4231 N=3 L = [1,3,2,7,6,5,4] def swap(L,a,b): L[a], L[b] = L[b], L[a] return L","title":"Largest Permutations"},{"location":"Certifications-and-Learning/DSA/02-Greedy-Algorithms/#meeting-rooms","text":"https://youtu.be/bC7o8P_Ste4?t=2919 ------------My logic, need to check------ L = [[5,10],[15,20],[0,30]] L1 = [5,5,30] - Time to complete a meeting, difference taken of sub list. L2 = [1,1,1] - How many meeting rooms needed per meeting. Max rooms 3, if all run. 30 is max, 1 room needed Sum of remaining, 5 + 5 less than 30, only one more room for needed. Answer is 2. L = [[5,15],[10,30],[0,60],[20,90]] L1 = [5,20,60,70] - total 95....[0.05,0.21,0.63,0.73] - L2 = [1,1,1,1] 70 Max, 1 room 5+20+60 = 85 > 70, then 60 max, 1 room 5+20 = 25 < 60, then 1 more room.","title":"Meeting Rooms"},{"location":"Certifications-and-Learning/DSA/02-Greedy-Algorithms/#answer-is-3-rooms","text":"M = [] for each in L: m.append(each[1]-each[0])","title":"Answer is 3 rooms."},{"location":"Certifications-and-Learning/DSA/02-Greedy-Algorithms/#distribute-candies","text":"https://youtu.be/bC7o8P_Ste4?t=3032 Rating = [1,7,4,3,1] -- [1,1,3,4,7] children = [1,1,1,1,1] Give a candy to lowest, and then more candy to every higher rating kid from previous. --------My solution rating = rating.sort() total = 1 inc = 1 for i in len(range(rating)): if each[i]>each[i-1]: inc+=1 total+=inc else: total+=inc","title":"Distribute Candies"},{"location":"Certifications-and-Learning/DSA/02-Greedy-Algorithms/#seats","text":"","title":"Seats"},{"location":"Certifications-and-Learning/DSA/02-Greedy-Algorithms/#assign-mise-to-holes","text":"","title":"Assign mise to holes"},{"location":"Certifications-and-Learning/DSA/02-Greedy-Algorithms/#majourity-element","text":"","title":"Majourity Element"},{"location":"Certifications-and-Learning/DSA/02-Greedy-Algorithms/#gas-station","text":"","title":"Gas Station"},{"location":"Certifications-and-Learning/DSA/03-Back-Tracking/","text":"Back Tracking https://www.youtube.com/watch?v=DKCbsiDBN6c&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=63 Bruteforce like dynamic programming, but here it is not used for optimization problems Uses DFS - Depth First Search Create State Space Tree Bounding Function to stop","title":"Back Tracking"},{"location":"Certifications-and-Learning/DSA/03-Back-Tracking/#back-tracking","text":"https://www.youtube.com/watch?v=DKCbsiDBN6c&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=63 Bruteforce like dynamic programming, but here it is not used for optimization problems Uses DFS - Depth First Search Create State Space Tree Bounding Function to stop","title":"Back Tracking"},{"location":"Certifications-and-Learning/DSA/03-LinkedList/","text":"Linked List Intro Can grow and shrink, unlike array. Stacks and Ques are implemented using linked list. Key Value pair, each node has 1. data and 2. link to next node HEAD > ... Many in the Middle ... > TAIL Insert End O(1) Start O(1) Middle O(n) Delete End O(n) Start O(1) Middle O(n) Working in java LinkedList //E could be interger, string etc LinkedList list = new LinkedList() list.addLast(e:10); list.contains(10); list.indexOf(10); list.size(); list.toArray(); Exercise Make linked list in python addFirst addLast deleteFirst deleteLast contains indexOf Types Singly Point only to next item Doubly Point to next and previous item Reversing a linked list - #interview question https://codewithmosh.com/courses/639884/lectures/11425352","title":"Linked List"},{"location":"Certifications-and-Learning/DSA/03-LinkedList/#linked-list","text":"","title":"Linked List"},{"location":"Certifications-and-Learning/DSA/03-LinkedList/#intro","text":"Can grow and shrink, unlike array. Stacks and Ques are implemented using linked list. Key Value pair, each node has 1. data and 2. link to next node HEAD > ... Many in the Middle ... > TAIL Insert End O(1) Start O(1) Middle O(n) Delete End O(n) Start O(1) Middle O(n)","title":"Intro"},{"location":"Certifications-and-Learning/DSA/03-LinkedList/#working-in-java","text":"LinkedList //E could be interger, string etc LinkedList list = new LinkedList() list.addLast(e:10); list.contains(10); list.indexOf(10); list.size(); list.toArray();","title":"Working in java"},{"location":"Certifications-and-Learning/DSA/03-LinkedList/#exercise","text":"Make linked list in python addFirst addLast deleteFirst deleteLast contains indexOf","title":"Exercise"},{"location":"Certifications-and-Learning/DSA/03-LinkedList/#types","text":"","title":"Types"},{"location":"Certifications-and-Learning/DSA/03-LinkedList/#singly","text":"Point only to next item","title":"Singly"},{"location":"Certifications-and-Learning/DSA/03-LinkedList/#doubly","text":"Point to next and previous item","title":"Doubly"},{"location":"Certifications-and-Learning/DSA/03-LinkedList/#reversing-a-linked-list-interview-question","text":"https://codewithmosh.com/courses/639884/lectures/11425352","title":"Reversing a linked list - #interview question"},{"location":"Certifications-and-Learning/DSA/04-Branch-and-Bound/","text":"Branch and Bound Same as backtracking, but uses BFS - Breadth First Search","title":"Branch and Bound"},{"location":"Certifications-and-Learning/DSA/04-Branch-and-Bound/#branch-and-bound","text":"Same as backtracking, but uses BFS - Breadth First Search","title":"Branch and Bound"},{"location":"Certifications-and-Learning/DSA/04-Stacks/","text":"Stacks https://codewithmosh.com/courses/639884/lectures/11425390 We use them for Implement undo/ redo feature Build navigation forward and back Evaluate expressions like 1 + 2 *3 Build compilers like syntax checking Its kind of wrap around array and linkedlist, which allow us to access and store objects in certain ways. Operations All operations are O(1) push - Add on top pop - Remove from top peek - Access top, but not remove isEmpty - Empty or not Interview questions Mostly when reversing anything, stack is used. https://codewithmosh.com/courses/639884/lectures/11425392 Reverse the string. https://codewithmosh.com/courses/639884/lectures/11425399 Check if brackets close properly, string is balanced or not","title":"Stacks"},{"location":"Certifications-and-Learning/DSA/04-Stacks/#stacks","text":"https://codewithmosh.com/courses/639884/lectures/11425390 We use them for Implement undo/ redo feature Build navigation forward and back Evaluate expressions like 1 + 2 *3 Build compilers like syntax checking Its kind of wrap around array and linkedlist, which allow us to access and store objects in certain ways.","title":"Stacks"},{"location":"Certifications-and-Learning/DSA/04-Stacks/#operations","text":"All operations are O(1) push - Add on top pop - Remove from top peek - Access top, but not remove isEmpty - Empty or not","title":"Operations"},{"location":"Certifications-and-Learning/DSA/04-Stacks/#interview-questions","text":"Mostly when reversing anything, stack is used. https://codewithmosh.com/courses/639884/lectures/11425392 Reverse the string. https://codewithmosh.com/courses/639884/lectures/11425399 Check if brackets close properly, string is balanced or not","title":"Interview questions"},{"location":"Certifications-and-Learning/DSA/05-Divide-and-Conquer/","text":"Contents Divide and Conquer General Problems which can be solved using this Recurrence Relation Masters theorem decreasing function - https://www.youtube.com/watch?v=CyknhZbfMqc&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=23 Masters Theorem for Dividing Functions: When passing root n in the recursive call Binary Search Heap Merge Sort - General O(m+n) -> O(n) 2-way merge sort O(n log n) Merge sort Algo - This is divide and conquer O(n log n) Pros and Con Quick Sort O(n log n) to O(n^2) Improvement? Strassen's Matrix Multiplication Divide and Conquer https://www.youtube.com/watch?v=2Rr2tW9zvRg&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=18 Problem of input size P, which has solution S If P is large, we can divide into smaller problems P1 P2 P3 .... We can get Solutions for sub problems and get S1 S2 S3 Combine all S1 S2 ... to get S using a METHOD. Note: Every sub problem is similar to parent problem. If problem is sort, then sub problem is also sort. HENCE - Recursive way to solve problem. General Problems which can be solved using this Binary Search Finding Max and Min MergeSort QuickSort Strassen's Matrix Multiplication Recurrence Relation Masters theorem decreasing function - https://www.youtube.com/watch?v=CyknhZbfMqc&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=23 Here in recursive call, the next recursion in recursion, n-1 is given as input. T(n) = T(n-1) + 1 --> Like a print function O(n) T(n) = T(n-1) + n --> Loop, increment is O(n+1) i++ or i-- --> O(n^2) T(n) = T(n-1) + log n --> Loop, increment is O(log n) i * 2 --> O(n log n) T(n) = 2 T(n-1) + 1 --> Recursion called twice within function --> O(2^n) *Loop inside the recursion function https://www.youtube.com/watch?v=MhT7XmxhaCE&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=21 Notice: Overall O(n) is just multiply equation by n T(n) = T(n-1) + 1 --> O(n) T(n) = T(n-1) + n --> O(n^2) T(n) = T(n-1) + log n --> O(n log n) T(n) = T(n-1) + n^2 --> O(n^3) T(n) = 2 T(n-1) + 1 --> O(2^n) T(n) = 3 T(n-1) + 1 --> O(3^n) T(n) = 2 T(n-1) + n --> O(n2^n) Masters Theorem for Dividing Functions: Here in the recursive call, next recursion in recursion, n/2 is passed as input. In Binary search uses n/2 since left OR right being processed. T(n) = T(n/2) + 1 --> O(log n) - No loop within T(n) = T(n/2) + n --> O(n) - One loop within T(n) = 2 T(n/2) + n --> O(n log n) - Two recursion calls T(n) = 2 T(n/2) + n^2 --> O(n^2) - Two recursion calls T(n) = 4 T(n/2) + 1 --> O(n^2) T(n) = 4 T(n/2) + n --> O(n^2) Final explanation - https://www.youtube.com/watch?v=OynWkEj0S-s&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=27 When passing root n in the recursive call T(n) = T(root of n) + 1 --> O(loglog base 2 n) Binary Search https://www.youtube.com/watch?v=C2apEw9pgtw&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=30 https://www.youtube.com/watch?v=C2apEw9pgtw&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=31 Assumed list is sorted Iterative approach O(1) to O(log n) -- If search item at middle, O(1) Recursive approach O(log n) Heap Heaps - Main file Merge Sort - General O(m+n) -> O(n) https://www.youtube.com/watch?v=6pV2IF0fgKY&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=33 We have two sorted list. A and B. We make two index i and j We create third empty list. C. We make an index k for C. We compare first element in A with first element in B, the smaller of the two is put in C. We continue till all elements of A and B are compared, and C is full. Size of A n and B is m. So O(m+n) which is O(n) If we have multiple lists A B C D E F Watch --> https://youtu.be/6pV2IF0fgKY?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&t=529 M-way merging - Merging M lists - We take M lists, compare all at once then merge. 2-way merging - Merging 2 lists - We take 2 lists at a time, merge them, then take next list.. so on 4-way merging - Merging 4 lists - We take 4 lists at a time, merge them, then take next three lists.. so on NOTE THE DIFFERENCE: Merge Sort - This is recursive algo 2-way Merge Sort - This is iterative algo 2-way merge sort O(n log n) https://youtu.be/6pV2IF0fgKY?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&t=806 Also watch Optimal Merge Pattern, which two list selected to start with - https://www.youtube.com/watch?v=HHIc5JZyenI&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=42 Image a single list. Assume each item in list is a list. Each item is not an actual list, its just a number. So if a list A has 8 items, so we think like we are sorting 8 lists. But since each item in the list is a number, its already sorted; its just a number. Jargon - 1st pass, 2nd pass. See image example. Merge sort Algo - This is divide and conquer O(n log n) https://www.youtube.com/watch?v=mB5HXBb_HY8&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=34 Break a list into smaller smaller, half half and perform comparison on last items. Pros and Con https://www.youtube.com/watch?v=ak-pz7tS5DE&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=35 Pros Large size list Linked List - Only pointer can be changed without creating 3rd empty list External Sorting - Image two large files 10gb each. We can bring files in chunks. Stable - Duplicates arrangement is also maintained. In a list 2 duplicates, in final sort, 1st duplicate comes before 2nd duplicate. Cons Extra Space (not in place sort) No small problem - if n<=15 then merge sort is better Recursive - O(n+log n) space where log n is stack space. Quick Sort O(n log n) to O(n^2) https://www.youtube.com/watch?v=7h1s2SojIRw&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=36 Imagine a class and teacher asks children to stand in line height wise. Shortest guy knows he is shortest, goes in front, the tallest at back, and rest speak to each other and sort. Idea is, each item looks who is infront and back, and stands. In list, an item only ensures that item on left is smaller and item on right is larger. This is quick sort. Jargon - Pivot, Partition Pivot - The item in the list, from which we start our procedure. It could be 1st item or middle or random. If Partition done on middle and pivot is 1st item then O(n log n) If list already sorted, partition in middle and pivot at 1st, worst case is O(n^2) Improvement? Always take the starting pivot as middle element Maybe one can take a random element as pivot.... but above is better. Strassen's Matrix Multiplication https://www.youtube.com/watch?v=0oJyNmEbS4w&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=38 Time taken to multiply two matrix is O(n^3). Basically 3 loops are needed to multiply two matrix. That is why O(n^3) Assumption that dimensions are in power of 2. 2x2, 4x4, 8x8..... If not in powers of 2, we can fill in 0 to make them in power of two. Normal multiplication - O(n^3) Strassen's - O(n^2.81) - slightly faster OPEN PROBLEM - A better way to multiply matrix is needed on earth.","title":"Contents"},{"location":"Certifications-and-Learning/DSA/05-Divide-and-Conquer/#contents","text":"Divide and Conquer General Problems which can be solved using this Recurrence Relation Masters theorem decreasing function - https://www.youtube.com/watch?v=CyknhZbfMqc&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=23 Masters Theorem for Dividing Functions: When passing root n in the recursive call Binary Search Heap Merge Sort - General O(m+n) -> O(n) 2-way merge sort O(n log n) Merge sort Algo - This is divide and conquer O(n log n) Pros and Con Quick Sort O(n log n) to O(n^2) Improvement? Strassen's Matrix Multiplication","title":"Contents"},{"location":"Certifications-and-Learning/DSA/05-Divide-and-Conquer/#divide-and-conquer","text":"https://www.youtube.com/watch?v=2Rr2tW9zvRg&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=18 Problem of input size P, which has solution S If P is large, we can divide into smaller problems P1 P2 P3 .... We can get Solutions for sub problems and get S1 S2 S3 Combine all S1 S2 ... to get S using a METHOD. Note: Every sub problem is similar to parent problem. If problem is sort, then sub problem is also sort. HENCE - Recursive way to solve problem.","title":"Divide and Conquer"},{"location":"Certifications-and-Learning/DSA/05-Divide-and-Conquer/#general-problems-which-can-be-solved-using-this","text":"Binary Search Finding Max and Min MergeSort QuickSort Strassen's Matrix Multiplication","title":"General Problems which can be solved using this"},{"location":"Certifications-and-Learning/DSA/05-Divide-and-Conquer/#recurrence-relation","text":"","title":"Recurrence Relation"},{"location":"Certifications-and-Learning/DSA/05-Divide-and-Conquer/#masters-theorem-decreasing-function-httpswwwyoutubecomwatchvcyknhzbfmqclistpldn4rrl48xkpzkf03iyfl-o29szjtrs_oindex23","text":"Here in recursive call, the next recursion in recursion, n-1 is given as input. T(n) = T(n-1) + 1 --> Like a print function O(n) T(n) = T(n-1) + n --> Loop, increment is O(n+1) i++ or i-- --> O(n^2) T(n) = T(n-1) + log n --> Loop, increment is O(log n) i * 2 --> O(n log n) T(n) = 2 T(n-1) + 1 --> Recursion called twice within function --> O(2^n) *Loop inside the recursion function https://www.youtube.com/watch?v=MhT7XmxhaCE&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=21 Notice: Overall O(n) is just multiply equation by n T(n) = T(n-1) + 1 --> O(n) T(n) = T(n-1) + n --> O(n^2) T(n) = T(n-1) + log n --> O(n log n) T(n) = T(n-1) + n^2 --> O(n^3) T(n) = 2 T(n-1) + 1 --> O(2^n) T(n) = 3 T(n-1) + 1 --> O(3^n) T(n) = 2 T(n-1) + n --> O(n2^n)","title":"Masters theorem decreasing function - https://www.youtube.com/watch?v=CyknhZbfMqc&amp;list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&amp;index=23"},{"location":"Certifications-and-Learning/DSA/05-Divide-and-Conquer/#masters-theorem-for-dividing-functions","text":"Here in the recursive call, next recursion in recursion, n/2 is passed as input. In Binary search uses n/2 since left OR right being processed. T(n) = T(n/2) + 1 --> O(log n) - No loop within T(n) = T(n/2) + n --> O(n) - One loop within T(n) = 2 T(n/2) + n --> O(n log n) - Two recursion calls T(n) = 2 T(n/2) + n^2 --> O(n^2) - Two recursion calls T(n) = 4 T(n/2) + 1 --> O(n^2) T(n) = 4 T(n/2) + n --> O(n^2) Final explanation - https://www.youtube.com/watch?v=OynWkEj0S-s&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=27","title":"Masters Theorem for Dividing Functions:"},{"location":"Certifications-and-Learning/DSA/05-Divide-and-Conquer/#when-passing-root-n-in-the-recursive-call","text":"T(n) = T(root of n) + 1 --> O(loglog base 2 n)","title":"When passing root n in the recursive call"},{"location":"Certifications-and-Learning/DSA/05-Divide-and-Conquer/#binary-search","text":"https://www.youtube.com/watch?v=C2apEw9pgtw&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=30 https://www.youtube.com/watch?v=C2apEw9pgtw&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=31 Assumed list is sorted Iterative approach O(1) to O(log n) -- If search item at middle, O(1) Recursive approach O(log n)","title":"Binary Search"},{"location":"Certifications-and-Learning/DSA/05-Divide-and-Conquer/#heap","text":"Heaps - Main file","title":"Heap"},{"location":"Certifications-and-Learning/DSA/05-Divide-and-Conquer/#merge-sort-general-omn-on","text":"https://www.youtube.com/watch?v=6pV2IF0fgKY&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=33 We have two sorted list. A and B. We make two index i and j We create third empty list. C. We make an index k for C. We compare first element in A with first element in B, the smaller of the two is put in C. We continue till all elements of A and B are compared, and C is full. Size of A n and B is m. So O(m+n) which is O(n) If we have multiple lists A B C D E F Watch --> https://youtu.be/6pV2IF0fgKY?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&t=529 M-way merging - Merging M lists - We take M lists, compare all at once then merge. 2-way merging - Merging 2 lists - We take 2 lists at a time, merge them, then take next list.. so on 4-way merging - Merging 4 lists - We take 4 lists at a time, merge them, then take next three lists.. so on NOTE THE DIFFERENCE: Merge Sort - This is recursive algo 2-way Merge Sort - This is iterative algo","title":"Merge Sort - General O(m+n) -&gt; O(n)"},{"location":"Certifications-and-Learning/DSA/05-Divide-and-Conquer/#2-way-merge-sort-on-log-n","text":"https://youtu.be/6pV2IF0fgKY?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&t=806 Also watch Optimal Merge Pattern, which two list selected to start with - https://www.youtube.com/watch?v=HHIc5JZyenI&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=42 Image a single list. Assume each item in list is a list. Each item is not an actual list, its just a number. So if a list A has 8 items, so we think like we are sorting 8 lists. But since each item in the list is a number, its already sorted; its just a number. Jargon - 1st pass, 2nd pass. See image example.","title":"2-way merge sort O(n log n)"},{"location":"Certifications-and-Learning/DSA/05-Divide-and-Conquer/#merge-sort-algo-this-is-divide-and-conquer-on-log-n","text":"https://www.youtube.com/watch?v=mB5HXBb_HY8&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=34 Break a list into smaller smaller, half half and perform comparison on last items.","title":"Merge sort Algo - This is divide and conquer O(n log n)"},{"location":"Certifications-and-Learning/DSA/05-Divide-and-Conquer/#pros-and-con","text":"https://www.youtube.com/watch?v=ak-pz7tS5DE&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=35 Pros Large size list Linked List - Only pointer can be changed without creating 3rd empty list External Sorting - Image two large files 10gb each. We can bring files in chunks. Stable - Duplicates arrangement is also maintained. In a list 2 duplicates, in final sort, 1st duplicate comes before 2nd duplicate. Cons Extra Space (not in place sort) No small problem - if n<=15 then merge sort is better Recursive - O(n+log n) space where log n is stack space.","title":"Pros and Con"},{"location":"Certifications-and-Learning/DSA/05-Divide-and-Conquer/#quick-sort-on-log-n-to-on2","text":"https://www.youtube.com/watch?v=7h1s2SojIRw&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=36 Imagine a class and teacher asks children to stand in line height wise. Shortest guy knows he is shortest, goes in front, the tallest at back, and rest speak to each other and sort. Idea is, each item looks who is infront and back, and stands. In list, an item only ensures that item on left is smaller and item on right is larger. This is quick sort. Jargon - Pivot, Partition Pivot - The item in the list, from which we start our procedure. It could be 1st item or middle or random. If Partition done on middle and pivot is 1st item then O(n log n) If list already sorted, partition in middle and pivot at 1st, worst case is O(n^2)","title":"Quick Sort O(n log n) to O(n^2)"},{"location":"Certifications-and-Learning/DSA/05-Divide-and-Conquer/#improvement","text":"Always take the starting pivot as middle element Maybe one can take a random element as pivot.... but above is better.","title":"Improvement?"},{"location":"Certifications-and-Learning/DSA/05-Divide-and-Conquer/#strassens-matrix-multiplication","text":"https://www.youtube.com/watch?v=0oJyNmEbS4w&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=38 Time taken to multiply two matrix is O(n^3). Basically 3 loops are needed to multiply two matrix. That is why O(n^3) Assumption that dimensions are in power of 2. 2x2, 4x4, 8x8..... If not in powers of 2, we can fill in 0 to make them in power of two. Normal multiplication - O(n^3) Strassen's - O(n^2.81) - slightly faster OPEN PROBLEM - A better way to multiply matrix is needed on earth.","title":"Strassen's Matrix Multiplication"},{"location":"Certifications-and-Learning/DSA/05-Queues/","text":"Queues Similar to stack, but FIFO Like real world que in a ticket counter, first person gets ticket first Usage printers use it OS use it web servers live support systems post sales services in a company Operations - all are O(1) enqueue - adding to back dequeue - removing in front peek - get front item without removing isEmpty isFull Interview Questions https://codewithmosh.com/courses/639884/lectures/11425515 reverse the queue build queue using array build queue using linkedlist build queue using stack circular arrays priority queue - not order based on sequence, but based on importance, like emails","title":"Queues"},{"location":"Certifications-and-Learning/DSA/05-Queues/#queues","text":"Similar to stack, but FIFO Like real world que in a ticket counter, first person gets ticket first Usage printers use it OS use it web servers live support systems post sales services in a company","title":"Queues"},{"location":"Certifications-and-Learning/DSA/05-Queues/#operations-all-are-o1","text":"enqueue - adding to back dequeue - removing in front peek - get front item without removing isEmpty isFull","title":"Operations - all are O(1)"},{"location":"Certifications-and-Learning/DSA/05-Queues/#interview-questions","text":"https://codewithmosh.com/courses/639884/lectures/11425515 reverse the queue build queue using array build queue using linkedlist build queue using stack circular arrays priority queue - not order based on sequence, but based on importance, like emails","title":"Interview Questions"},{"location":"Certifications-and-Learning/DSA/06-Hash-Tables/","text":"Contents Hash Tables Operations O(1), sometimes worst case is O(1) Interview questions - Finding related Hash Functions Hash Tables Key Value Pair. Like dictionary in python Used? -- whenever searching fast is needed Spell checkers use it Dictionaries Compilers to look up items Code editors use it for look ups Java calls it HashMap JavaScript calls it Objects Python and C# calls it Dictionaries Google search java map interface https://codewithmosh.com/courses/639884/lectures/11425544 Operations O(1), sometimes worst case is O(1) insert lookup delete Interview questions - Finding related https://codewithmosh.com/courses/639884/lectures/11425545 Find first non repeating character Find first repeated Hash Functions https://codewithmosh.com/courses/639884/lectures/11425551 When the keys in a dictionery are converted to hashes. Example, keys can be name, number etc. But to make them easily searchable, they should be numbers in a way. So, to convert the string to number, hashing of key or index is done. Its exactly like what we do in cryptography. A digest of the key is what is saved. Collisions Two or more keys create the same digest. md5 it happens. We can prevent collisions by Chaining (each key can point to linkedlist, and collisions are added to it) Open Addressing (we assign new location in memory for new hash) Linear Probing Quadratic probing Double Hashing","title":"Contents"},{"location":"Certifications-and-Learning/DSA/06-Hash-Tables/#contents","text":"Hash Tables Operations O(1), sometimes worst case is O(1) Interview questions - Finding related Hash Functions","title":"Contents"},{"location":"Certifications-and-Learning/DSA/06-Hash-Tables/#hash-tables","text":"Key Value Pair. Like dictionary in python Used? -- whenever searching fast is needed Spell checkers use it Dictionaries Compilers to look up items Code editors use it for look ups Java calls it HashMap JavaScript calls it Objects Python and C# calls it Dictionaries Google search java map interface https://codewithmosh.com/courses/639884/lectures/11425544","title":"Hash Tables"},{"location":"Certifications-and-Learning/DSA/06-Hash-Tables/#operations-o1-sometimes-worst-case-is-o1","text":"insert lookup delete","title":"Operations O(1), sometimes worst case is O(1)"},{"location":"Certifications-and-Learning/DSA/06-Hash-Tables/#interview-questions-finding-related","text":"https://codewithmosh.com/courses/639884/lectures/11425545 Find first non repeating character Find first repeated","title":"Interview questions - Finding related"},{"location":"Certifications-and-Learning/DSA/06-Hash-Tables/#hash-functions","text":"https://codewithmosh.com/courses/639884/lectures/11425551 When the keys in a dictionery are converted to hashes. Example, keys can be name, number etc. But to make them easily searchable, they should be numbers in a way. So, to convert the string to number, hashing of key or index is done. Its exactly like what we do in cryptography. A digest of the key is what is saved.","title":"Hash Functions"},{"location":"Certifications-and-Learning/DSA/06-Hash-Tables/#collisions","text":"Two or more keys create the same digest. md5 it happens. We can prevent collisions by Chaining (each key can point to linkedlist, and collisions are added to it) Open Addressing (we assign new location in memory for new hash) Linear Probing Quadratic probing Double Hashing","title":"Collisions"},{"location":"Certifications-and-Learning/DSA/07-Binary-Trees/","text":"Binary Trees Use? Represent hierarchical data Databases Auto-completions Compilers Compressions jpeg and mp3 tree in python - https://www.youtube.com/watch?v=EitnYxinKkw&list=PL3edoBgC7ScWhy0mlNvLPssa_sDGnyUcb&index=3 https://codewithmosh.com/courses/650827/lectures/11620088 Following only if tree is balanced. Height Left- height Right <= 1 If right child is long, right skewed If left is long, left skewed Larger values than root node goes to right and smaller values to left Lookup - O(log n) Insert - O(log n) Delete - O(log n) Trees Parent - Children Root Node -leaf nodes Each child is a Sub trees Building it Tree has root Node has value, leftchild and rightchild insert find: boolean Important https://codewithmosh.com/courses/650827/lectures/11620012 Traversing Breadth First, also called Level Order Traversal Depth first pre-order - root-left-right in-order - left-root-right - Gives ascending order - do right-root-left for decending post-order - left-right-root All the above are done using recursion https://codewithmosh.com/courses/650827/lectures/11620021 Recursion Replacement for loop, call function/ method from within itself Interview https://codewithmosh.com/courses/650827/lectures/11620010 Check Equality of two trees https://codewithmosh.com/courses/650827/lectures/11620016 Validate (BST) Binary Search Tree Meaning, all value on left sub tree should be less than root and all value on the right sub tree should be more than root https://codewithmosh.com/courses/650827/lectures/11620015 Find K-Distance in tree print all leaves 3 level down or 2 level etc https://codewithmosh.com/courses/650827/lectures/11620022 Level order traversal, breadth first","title":"Binary Trees"},{"location":"Certifications-and-Learning/DSA/07-Binary-Trees/#binary-trees","text":"Use? Represent hierarchical data Databases Auto-completions Compilers Compressions jpeg and mp3 tree in python - https://www.youtube.com/watch?v=EitnYxinKkw&list=PL3edoBgC7ScWhy0mlNvLPssa_sDGnyUcb&index=3 https://codewithmosh.com/courses/650827/lectures/11620088 Following only if tree is balanced. Height Left- height Right <= 1 If right child is long, right skewed If left is long, left skewed Larger values than root node goes to right and smaller values to left Lookup - O(log n) Insert - O(log n) Delete - O(log n)","title":"Binary Trees"},{"location":"Certifications-and-Learning/DSA/07-Binary-Trees/#trees","text":"Parent - Children Root Node -leaf nodes Each child is a Sub trees","title":"Trees"},{"location":"Certifications-and-Learning/DSA/07-Binary-Trees/#building-it","text":"Tree has root Node has value, leftchild and rightchild insert find: boolean","title":"Building it"},{"location":"Certifications-and-Learning/DSA/07-Binary-Trees/#important","text":"https://codewithmosh.com/courses/650827/lectures/11620012 Traversing Breadth First, also called Level Order Traversal Depth first pre-order - root-left-right in-order - left-root-right - Gives ascending order - do right-root-left for decending post-order - left-right-root All the above are done using recursion https://codewithmosh.com/courses/650827/lectures/11620021 Recursion Replacement for loop, call function/ method from within itself","title":"Important"},{"location":"Certifications-and-Learning/DSA/07-Binary-Trees/#interview","text":"https://codewithmosh.com/courses/650827/lectures/11620010 Check Equality of two trees https://codewithmosh.com/courses/650827/lectures/11620016 Validate (BST) Binary Search Tree Meaning, all value on left sub tree should be less than root and all value on the right sub tree should be more than root https://codewithmosh.com/courses/650827/lectures/11620015 Find K-Distance in tree print all leaves 3 level down or 2 level etc https://codewithmosh.com/courses/650827/lectures/11620022 Level order traversal, breadth first","title":"Interview"},{"location":"Certifications-and-Learning/DSA/08-AVL-Trees/","text":"AVL Trees There issues in binary search trees (BSTs) as they get unbalanced easily. Say some sorting was done or something else. Unbalanced trees become O(n) or worse. Tree should be O(log n) Hence comes AVL trees Adelson-Velsky and Landis Trees. It is a self balancing tree algorithm, invented in 1960's Other self balancing algo Red-black trees B-trees Splay Trees 2-3 Trees Rotations https://codewithmosh.com/courses/650827/lectures/11620097 Left(LL), Right(RR), Left-Right(LR) and Right-Left(RL)","title":"AVL Trees"},{"location":"Certifications-and-Learning/DSA/08-AVL-Trees/#avl-trees","text":"There issues in binary search trees (BSTs) as they get unbalanced easily. Say some sorting was done or something else. Unbalanced trees become O(n) or worse. Tree should be O(log n) Hence comes AVL trees Adelson-Velsky and Landis Trees. It is a self balancing tree algorithm, invented in 1960's Other self balancing algo Red-black trees B-trees Splay Trees 2-3 Trees","title":"AVL Trees"},{"location":"Certifications-and-Learning/DSA/08-AVL-Trees/#rotations","text":"https://codewithmosh.com/courses/650827/lectures/11620097 Left(LL), Right(RR), Left-Right(LR) and Right-Left(RL)","title":"Rotations"},{"location":"Certifications-and-Learning/DSA/09-Heaps/","text":"Contents Heaps Video by Abdul Bari Basic Theory Insert - Pushing Up. Left to right in list. Delete - Pushing down. Right to left in list. Heap Sort Heapify O(n) - Pushing Down - Right to left in list. Priority Queue Heaps https://codewithmosh.com/courses/650827/lectures/11620136 Python Versions: Video - https://www.youtube.com/watch?v=pLIajuc31qk&list=PL3edoBgC7ScWhy0mlNvLPssa_sDGnyUcb&index=1 Min Heap - https://www.geeksforgeeks.org/min-heap-in-python/ Max Heap - https://www.geeksforgeeks.org/max-heap-in-python/ A type of binary tree, which satisfy heap property which is: A complete tree. Only last level of tree can be unbalanced. Secondly, left leafs should be filled, right can be empty. In the last, right filled and left empty not allowed. All child value less than parent. Left child less than root, right child more than root. Above is a Max heap Min Heap also there, where root has smallest value Use? Sorting (Heap Sort) To implement Graph Algorithms (shortest path) Priority queues Finding Kth smallest or largest value - Interview important While adding nodes, we bubble up and bubble down Video by Abdul Bari https://www.youtube.com/watch?v=HqPJF2L5h9U&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=32 Basic Theory Its all about mapping complete binary tree to List DS and vice-versa. Image a heap of apples. Like a 2d cone. When we convert a binary tree into a list. Assume for an item in list, at index i Parent -- i/2 ..floor value or round down Left Child -- 2 i Right Child -- 2 i + 1 So when constructing list from binary tree, if node is empty, we need to leave a list item BLANK. Hence, a large binary tree will take too much O() space If we have missing elements, when converted to array, then it is incomplete binary tree. Complete Binary Tree - when no item is missing Full Binary tree, if all nodes full till leaves, at lowest level. Heap is a complete Binary Tree Max Heap - Root is largest Min Heap - Root is smallest Following are discussed based on Max Heap. Insert - Pushing Up. Left to right in list. New item is not inserted in the ROOT -- common mis conception New item is inserted at the bottom left leaf. Then comparing with parent/ ancestors in each iteration. Time taken is number of swaps, which is the height of the tree. Min O(1) - No swapping needed to Max O(log n) - Swapping from bottom leaf done Delete - Pushing down. Right to left in list. The root is removed here. Image a heap of apple, the top item is removed, deleted. We need to preserve complete binary tree property while performing operation. Who takes place of root? The last item in tree, bottom right most item, say I. Then we compare the children, the bigger is swapped with I, which was moved up to root. This is continued for every iteration, and done. Heap Sort https://youtu.be/HqPJF2L5h9U?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&t=1869 Step 1 - For a list, create a heap by inserting Step 2 - Then delete all elements Step 1 - O(n log n) - because n items added, which is O(n) and inserting is O(log n) Step 2 - O(n log n) - because n items deleted, which is O(n) and deletion is O(log n) Hence heap sort takes O(2n log n) which is O(n log n) Heapify O(n) - Pushing Down - Right to left in list. https://youtu.be/HqPJF2L5h9U?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&t=2535 It is procedure to create HEAP. We did it already, but there it was pushing up, but here its pushing down. For creating heap, O(log n) For heapify, O(n) Priority Queue https://youtu.be/HqPJF2L5h9U?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&t=2875 NOTE: There is a concept in Operating System of priority queue, THIS IS DIFFERENT, not that. Two types 1. Smallest item being high priority 2. Largest item being high priority Heap is best DS for implementing Priority Queue. Why? Insertion and deletion of one item is log n. While in normal list, either deletion is faster or insertion, only one faster at a time - O(n)","title":"Contents"},{"location":"Certifications-and-Learning/DSA/09-Heaps/#contents","text":"Heaps Video by Abdul Bari Basic Theory Insert - Pushing Up. Left to right in list. Delete - Pushing down. Right to left in list. Heap Sort Heapify O(n) - Pushing Down - Right to left in list. Priority Queue","title":"Contents"},{"location":"Certifications-and-Learning/DSA/09-Heaps/#heaps","text":"https://codewithmosh.com/courses/650827/lectures/11620136 Python Versions: Video - https://www.youtube.com/watch?v=pLIajuc31qk&list=PL3edoBgC7ScWhy0mlNvLPssa_sDGnyUcb&index=1 Min Heap - https://www.geeksforgeeks.org/min-heap-in-python/ Max Heap - https://www.geeksforgeeks.org/max-heap-in-python/ A type of binary tree, which satisfy heap property which is: A complete tree. Only last level of tree can be unbalanced. Secondly, left leafs should be filled, right can be empty. In the last, right filled and left empty not allowed. All child value less than parent. Left child less than root, right child more than root. Above is a Max heap Min Heap also there, where root has smallest value Use? Sorting (Heap Sort) To implement Graph Algorithms (shortest path) Priority queues Finding Kth smallest or largest value - Interview important While adding nodes, we bubble up and bubble down","title":"Heaps"},{"location":"Certifications-and-Learning/DSA/09-Heaps/#video-by-abdul-bari","text":"https://www.youtube.com/watch?v=HqPJF2L5h9U&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=32","title":"Video by Abdul Bari"},{"location":"Certifications-and-Learning/DSA/09-Heaps/#basic-theory","text":"Its all about mapping complete binary tree to List DS and vice-versa. Image a heap of apples. Like a 2d cone. When we convert a binary tree into a list. Assume for an item in list, at index i Parent -- i/2 ..floor value or round down Left Child -- 2 i Right Child -- 2 i + 1 So when constructing list from binary tree, if node is empty, we need to leave a list item BLANK. Hence, a large binary tree will take too much O() space If we have missing elements, when converted to array, then it is incomplete binary tree. Complete Binary Tree - when no item is missing Full Binary tree, if all nodes full till leaves, at lowest level. Heap is a complete Binary Tree Max Heap - Root is largest Min Heap - Root is smallest Following are discussed based on Max Heap.","title":"Basic Theory"},{"location":"Certifications-and-Learning/DSA/09-Heaps/#insert-pushing-up-left-to-right-in-list","text":"New item is not inserted in the ROOT -- common mis conception New item is inserted at the bottom left leaf. Then comparing with parent/ ancestors in each iteration. Time taken is number of swaps, which is the height of the tree. Min O(1) - No swapping needed to Max O(log n) - Swapping from bottom leaf done","title":"Insert - Pushing Up. Left to right in list."},{"location":"Certifications-and-Learning/DSA/09-Heaps/#delete-pushing-down-right-to-left-in-list","text":"The root is removed here. Image a heap of apple, the top item is removed, deleted. We need to preserve complete binary tree property while performing operation. Who takes place of root? The last item in tree, bottom right most item, say I. Then we compare the children, the bigger is swapped with I, which was moved up to root. This is continued for every iteration, and done.","title":"Delete - Pushing down. Right to left in list."},{"location":"Certifications-and-Learning/DSA/09-Heaps/#heap-sort","text":"https://youtu.be/HqPJF2L5h9U?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&t=1869 Step 1 - For a list, create a heap by inserting Step 2 - Then delete all elements Step 1 - O(n log n) - because n items added, which is O(n) and inserting is O(log n) Step 2 - O(n log n) - because n items deleted, which is O(n) and deletion is O(log n) Hence heap sort takes O(2n log n) which is O(n log n)","title":"Heap Sort"},{"location":"Certifications-and-Learning/DSA/09-Heaps/#heapify-on-pushing-down-right-to-left-in-list","text":"https://youtu.be/HqPJF2L5h9U?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&t=2535 It is procedure to create HEAP. We did it already, but there it was pushing up, but here its pushing down. For creating heap, O(log n) For heapify, O(n)","title":"Heapify O(n) - Pushing Down - Right to left in list."},{"location":"Certifications-and-Learning/DSA/09-Heaps/#priority-queue","text":"https://youtu.be/HqPJF2L5h9U?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&t=2875 NOTE: There is a concept in Operating System of priority queue, THIS IS DIFFERENT, not that. Two types 1. Smallest item being high priority 2. Largest item being high priority Heap is best DS for implementing Priority Queue. Why? Insertion and deletion of one item is log n. While in normal list, either deletion is faster or insertion, only one faster at a time - O(n)","title":"Priority Queue"},{"location":"Certifications-and-Learning/DSA/10-Tries/","text":"Tries https://codewithmosh.com/courses/650827/lectures/11620252 Python implementation - https://www.youtube.com/watch?v=qA8l8TAMyig&list=PL3edoBgC7ScWhy0mlNvLPssa_sDGnyUcb&index=2 Other kind of trees but not binary trees Comes from the word ReTRIEval. Also called Digital Trees Radix Trees Prefix Trees Use? Auto completion in search Lookup O(L) where L is length of the word being searched. Also each node can have 26 child (coz 26 alphabets in english) - Not always true","title":"Tries"},{"location":"Certifications-and-Learning/DSA/10-Tries/#tries","text":"https://codewithmosh.com/courses/650827/lectures/11620252 Python implementation - https://www.youtube.com/watch?v=qA8l8TAMyig&list=PL3edoBgC7ScWhy0mlNvLPssa_sDGnyUcb&index=2 Other kind of trees but not binary trees Comes from the word ReTRIEval. Also called Digital Trees Radix Trees Prefix Trees Use? Auto completion in search Lookup O(L) where L is length of the word being searched. Also each node can have 26 child (coz 26 alphabets in english) - Not always true","title":"Tries"},{"location":"Certifications-and-Learning/DSA/11-Graphs/","text":"Contents Graphs DFS and BFS Articulation Point and Biconnected Components Graphs https://codewithmosh.com/courses/650827/lectures/11654089 A tree is like a graph, just not cyclical Graph does not have a root, its more like a spider web. Vertices, Vertex or Nodes Edges or relations Can be undirected Directed Uni Directed Bi Directed Adjacent or neighbours for connected vertex https://codewithmosh.com/courses/650827/lectures/11654097 Concept of adjacency matrix - Space --> O(n^2) or O(V^2) A hash table of each edge can be made to make Time --> O(1) Concept of adjacency lists - O() DFS and BFS https://www.youtube.com/watch?v=pcKY4hjDrxk&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=61 BFS and DFS Articulation Point and Biconnected Components https://www.youtube.com/watch?v=jFZsDDB0-vo&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=62 If there is a node in a graph, which when removed, creates disconnected graphs, then that node is called Articulation Point. In a computer network or roads we have articulation point, that can break the system. So it should not be there. How to solve this issue? We connect two other nodes. So now if two nodes are removed, only then we have failure. Algo to perform this articulation point finding and then solving it: https://youtu.be/jFZsDDB0-vo?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&t=143 Perform DFS - get articulation point - Jargon: Discovery Time d - Find discovery times. L - Find lowest discovery. For a node, can we go to parent. If not, then which node we end to. If L(child node) >= d(parent node) <- True.. then parent node is articulation point.","title":"Contents"},{"location":"Certifications-and-Learning/DSA/11-Graphs/#contents","text":"Graphs DFS and BFS Articulation Point and Biconnected Components","title":"Contents"},{"location":"Certifications-and-Learning/DSA/11-Graphs/#graphs","text":"https://codewithmosh.com/courses/650827/lectures/11654089 A tree is like a graph, just not cyclical Graph does not have a root, its more like a spider web. Vertices, Vertex or Nodes Edges or relations Can be undirected Directed Uni Directed Bi Directed Adjacent or neighbours for connected vertex https://codewithmosh.com/courses/650827/lectures/11654097 Concept of adjacency matrix - Space --> O(n^2) or O(V^2) A hash table of each edge can be made to make Time --> O(1) Concept of adjacency lists - O()","title":"Graphs"},{"location":"Certifications-and-Learning/DSA/11-Graphs/#dfs-and-bfs","text":"https://www.youtube.com/watch?v=pcKY4hjDrxk&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=61 BFS and DFS","title":"DFS and BFS"},{"location":"Certifications-and-Learning/DSA/11-Graphs/#articulation-point-and-biconnected-components","text":"https://www.youtube.com/watch?v=jFZsDDB0-vo&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=62 If there is a node in a graph, which when removed, creates disconnected graphs, then that node is called Articulation Point. In a computer network or roads we have articulation point, that can break the system. So it should not be there. How to solve this issue? We connect two other nodes. So now if two nodes are removed, only then we have failure. Algo to perform this articulation point finding and then solving it: https://youtu.be/jFZsDDB0-vo?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&t=143 Perform DFS - get articulation point - Jargon: Discovery Time d - Find discovery times. L - Find lowest discovery. For a node, can we go to parent. If not, then which node we end to. If L(child node) >= d(parent node) <- True.. then parent node is articulation point.","title":"Articulation Point and Biconnected Components"},{"location":"Certifications-and-Learning/DSA/12-Sorting-Algorithms/","text":"Sorting","title":"Sorting"},{"location":"Certifications-and-Learning/DSA/12-Sorting-Algorithms/#sorting","text":"","title":"Sorting"},{"location":"Certifications-and-Learning/DSA/12-Uni-Directed-Graphs/","text":"Uni Directed Graphs","title":"Uni Directed Graphs"},{"location":"Certifications-and-Learning/DSA/12-Uni-Directed-Graphs/#uni-directed-graphs","text":"","title":"Uni Directed Graphs"},{"location":"Certifications-and-Learning/DSA/15-String-Manipulation/","text":"String Manipulation Count Vowels Reverse String Reverse Words Rotations Remove Duplicates Most Repeated Char Sentence Capitalization Anagrams - Using Sorting Anagrams - Using Histogramming Palindrome","title":"String Manipulation"},{"location":"Certifications-and-Learning/DSA/15-String-Manipulation/#string-manipulation","text":"Count Vowels Reverse String Reverse Words Rotations Remove Duplicates Most Repeated Char Sentence Capitalization Anagrams - Using Sorting Anagrams - Using Histogramming Palindrome","title":"String Manipulation"},{"location":"Certifications-and-Learning/DSA/BFS-and-DFS/","text":"Graph Traversals https://www.youtube.com/watch?v=pcKY4hjDrxk&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=61 BFS vs DFS Two concepts. Visiting a Vertex Exploration of Vertex BFS - Breadth First Search DFS - Depth First Search BFS - Visit any start node, explore each adjacent node first, then visit next node.. iterate DFS - Visit any start node, explore one adjacent node at a time, till end leaf, then visit next node.. iterate BFS - Checks level by level DFS - Goes to deepest child of a node, then explore next. Its branch by branch, not level by level. BFS - At the end we get, BFS Spanning Tree. Edges are called cross edges. DFS - At the end we get, DFS Spanning Tree. Edges are called back edges. BFS - We don't need a DS to run this DFS - We need to use stack DS to keep track of ancestor nodes. https://youtu.be/pcKY4hjDrxk?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&t=735 In DFS, a stack is used to keep track of the parent nodes. Since we keep going deep, we must know how to go back, hence stack keeps track of all ancestor nodes of the given visited node at all stages. When reached the leaf, and going back up, stack is one by one made empty. Important Basics Question https://www.youtube.com/watch?v=tWVWeAqZ0WU \u2b50\ufe0f Course Contents \u2b50\ufe0f (0:00:00) course introduction (0:02:23) graph basics (0:07:10) depth first and breadth first traversal (0:29:13) has path - https://structy.net/problems/has-path (0:42:11) undirected path - https://structy.net/problems/undirect... (1:00:44) connected components count - https://structy.net/problems/connecte... (1:13:29) largest component - https://structy.net/problems/largest-... (1:24:03) shortest path - https://structy.net/problems/shortest... (1:39:36) island count - https://structy.net/problems/island-c... (1:58:52) minimum island - https://structy.net/problems/minimum-...","title":"Graph Traversals"},{"location":"Certifications-and-Learning/DSA/BFS-and-DFS/#graph-traversals","text":"https://www.youtube.com/watch?v=pcKY4hjDrxk&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=61","title":"Graph Traversals"},{"location":"Certifications-and-Learning/DSA/BFS-and-DFS/#bfs-vs-dfs","text":"Two concepts. Visiting a Vertex Exploration of Vertex BFS - Breadth First Search DFS - Depth First Search BFS - Visit any start node, explore each adjacent node first, then visit next node.. iterate DFS - Visit any start node, explore one adjacent node at a time, till end leaf, then visit next node.. iterate BFS - Checks level by level DFS - Goes to deepest child of a node, then explore next. Its branch by branch, not level by level. BFS - At the end we get, BFS Spanning Tree. Edges are called cross edges. DFS - At the end we get, DFS Spanning Tree. Edges are called back edges. BFS - We don't need a DS to run this DFS - We need to use stack DS to keep track of ancestor nodes. https://youtu.be/pcKY4hjDrxk?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&t=735 In DFS, a stack is used to keep track of the parent nodes. Since we keep going deep, we must know how to go back, hence stack keeps track of all ancestor nodes of the given visited node at all stages. When reached the leaf, and going back up, stack is one by one made empty.","title":"BFS vs DFS"},{"location":"Certifications-and-Learning/DSA/BFS-and-DFS/#important-basics-question","text":"https://www.youtube.com/watch?v=tWVWeAqZ0WU \u2b50\ufe0f Course Contents \u2b50\ufe0f (0:00:00) course introduction (0:02:23) graph basics (0:07:10) depth first and breadth first traversal (0:29:13) has path - https://structy.net/problems/has-path (0:42:11) undirected path - https://structy.net/problems/undirect... (1:00:44) connected components count - https://structy.net/problems/connecte... (1:13:29) largest component - https://structy.net/problems/largest-... (1:24:03) shortest path - https://structy.net/problems/shortest... (1:39:36) island count - https://structy.net/problems/island-c... (1:58:52) minimum island - https://structy.net/problems/minimum-...","title":"Important Basics Question"},{"location":"Certifications-and-Learning/DSA/neetcode/","text":"Contents Intro Array and Hashing Two Pointers Sliding Window Stack Binary Search Linked List Trees Tries Heap/ Priority Que Backtracking Graphs Advanced Graph 1-D Dynamic Programming 2-D Dynamic Programming Greedy Approach Intervals Math and Geometry Bit Manipulation Intro List of 150 Questions that cover all topics and give you the idea. Should complete all. All Solutions - https://github.com/neetcode-gh/leetcode/tree/main/python Array and Hashing Observations Gives good idea of how to use loops. Creating hashmaps as result usually. Questions and Solutions Contains Duplicate Valid Anagram Two Sum Group Anagrams Top K Frequent Elements Product of Array Except Self Valid Sudoku Encode and Decode Strings Longest Consecutive Sequence Two Pointers Observations Usually used, when reducing O(n^2) complexity to O(n). Helpful in sorted lists, kindof. When hashmap based problems are to be solved with better complexity. Generally, make two pointers left-start and right-end. Then, create increment and decrement conditions of pointers. Make calculations in between, updating some dict or var. Here left initialised to 0 of list, before loop. right initialised to -1 of list, meaning end. before loop. Questions and Solutions Valid Palindrome Two Sum II 3Sum Container with Most Water Trapping Rain Water Sliding Window Observations Like two pointers, but this time pointer do not converge from left and right. Rather the two pointers move together, right moving faster based on conditions. Here left is initialised before loop. right is initialised inside loop. Questions and Solutions Best Time to Buy & Sell Stock Longest Substring Without Repeating Characters Longest Repeating Character Replacement Permutation in String Minimum Window Substring Sliding Window Maximum Stack Observations Usually does not have loops. Recursion sometimes. A lot of if elses are here. When traversing left to right, and in every decision only last value is considered. Questions and Solutions Valid Parentheses Min Stack Evaluate Reverse Polish Notation Generate Parentheses Daily Temperatures Car Fleet Largest Rectangle in Histogram Binary Search Observations Questions and Solutions Binary Search Search a 2D Matrix Koko Eating Bananas Search Rotated Sorted Array Find Minimum in Rotated Sorted Array Time Based Key-Value Store Find Median of Two Sorted Arrays Linked List Observations Not sure; cant see pattern for now. Very weird, learn more from youtube. Imagine this way --> You only have access to head in linked list. Everything else is computed, nth, goining anywhere, removing, reversing etc Many design questions and not only algo questions Questions and Solutions Reverse Linked List Merge Two Linked Lists Reorder List Remove Nth Node from End of List Copy List with Random Pointer Add Two Numbers Linked List Cycle Find the Duplicate Number LRU Cache Merge K Sorted Lists Reverse Nodes in K-Group Trees Observations Questions and Solutions Invert Binary Tree Maximum Depth of Binary Tree Diameter of a Binary Tree Balanced Binary Tree Same Tree Subtree of Another Tree Lowest Common Ancestor of a BST Binary Tree Level Order Traversal Binary Tree Right Side View Count Good Nodes in a Binary Tree Validate Binary Search Tree Kth Smallest Element in a BST Construct Tree from Preorder and Inorder Traversal Binary Tree Max Path Sum Serialize and Deserialize Binary Tree Tries Observations Questions and Solutions Implement Trie Design Add and Search Word Data Structure Word Search II Heap/ Priority Que Observations First Impression, when we need to consider max and min in a list. Operations in such a way only considering max or min at a time. We mostly have a list. We convert list to heap with some calculation logic. Then we perform a loop with heappop() with some logic. Questions and Solutions Kth Largest Element in a Stream Last Stone Weight K Closest Points to Origin Kth Largest Element in an Array Task Scheduler Design Twitter Find Median from Data Stream Backtracking Observations Subsets Combination Sum Permutations Subsets II Combination Sum II Word Search Palindrome Partitioning Letter Combinations of a Phone Number N-Queens Graphs Observations DFS or BFS used based on situation. A hashmap or hashset is always used in some way. Directions are defined mostly. BFS If BFS, then queue is used. colletions.deque(). pop(), popleft() append() etc BFS is iterative, not recursive. Generally, when we need to consider multiple movement in one iteration, BFS used. Refer rotten orange. Dont confuse yourself by trying to think in terms of double loop. Look at the example below. for r in range(ROWS): for c in range(COLS): if grid [r] [c] ==0; # Dont try to compute in head what r,c location would be and all if grid [r] [c] ==1; # Think like. When at r,c location, what to do. if grid [r] [c] ==2; # Then next, for each different values DFS If DFS, then normal list or hashset or hash is used. set() DFS is recursive in nature. Generally when we need to consider one movement per iteration, DFS used. Questions and Solutions Number of Islands Clone Graph Max Area of Island - General logic for all problems here Pacific Atlantic Waterflow Surrounded Regions Rotting Oranges - BFS example Walls and Gates Course Schedule Course Schedule II Redundant Connection Number of Connected Components in Graph Graph Valid Tree Word Ladder Advanced Graph Observations Questions and Solutions Reconstruct Itinerary Min Cost to Connect all Points Network Delay Time Swim in Rising Water Alien Dictionary Cheapest Flights Within K Stops 1-D Dynamic Programming Observations Questions and Solutions Climbing Stairs Min Cost Climbing Stairs House Robber House Robber II Longest Palindromic Substring Palindromic Substrings Decode Ways Coin Change Maximum Product Subarray Word Break Longest Increasing Subsequence Partition Equal Subset Sum 2-D Dynamic Programming Observations Questions and Solutions Unique Paths Longest Common Subsequence Best Time to Buy/Sell Stock With Cooldown Coin Change II Target Sum Interleaving String Longest Increasing Path in a Matrix Distinct Subsequences Edit Distance Burst Balloons Regular Expression Matching Greedy Approach Observations Questions and Solutions Maximum Subarray Jump Game Jump Game II Gas Station Hand of Straights Merge Triplets to Form Target Triplet Partition Labels Valid Parenthesis String Intervals Observations Questions and Solutions Insert Interval Merge Intervals Non-Overlapping Intervals Meeting Rooms Meeting Rooms II Minimum Interval to Include Each Query Math and Geometry Observations Questions and Solutions Rotate Image Spiral Matrix Set Matrix Zeroes Happy Number Plus One Pow(x, n) Multiply Strings Detect Squares Bit Manipulation Observations Questions and Solutions Single Number Number of 1 Bits Counting Bits Reverse Bits Missing Number Sum of Two Integers Reverse Integer","title":"Contents"},{"location":"Certifications-and-Learning/DSA/neetcode/#contents","text":"Intro Array and Hashing Two Pointers Sliding Window Stack Binary Search Linked List Trees Tries Heap/ Priority Que Backtracking Graphs Advanced Graph 1-D Dynamic Programming 2-D Dynamic Programming Greedy Approach Intervals Math and Geometry Bit Manipulation","title":"Contents"},{"location":"Certifications-and-Learning/DSA/neetcode/#intro","text":"List of 150 Questions that cover all topics and give you the idea. Should complete all. All Solutions - https://github.com/neetcode-gh/leetcode/tree/main/python","title":"Intro"},{"location":"Certifications-and-Learning/DSA/neetcode/#array-and-hashing","text":"","title":"Array and Hashing"},{"location":"Certifications-and-Learning/DSA/neetcode/#observations","text":"Gives good idea of how to use loops. Creating hashmaps as result usually.","title":"Observations"},{"location":"Certifications-and-Learning/DSA/neetcode/#questions-and-solutions","text":"Contains Duplicate Valid Anagram Two Sum Group Anagrams Top K Frequent Elements Product of Array Except Self Valid Sudoku Encode and Decode Strings Longest Consecutive Sequence","title":"Questions and Solutions"},{"location":"Certifications-and-Learning/DSA/neetcode/#two-pointers","text":"","title":"Two Pointers"},{"location":"Certifications-and-Learning/DSA/neetcode/#observations_1","text":"Usually used, when reducing O(n^2) complexity to O(n). Helpful in sorted lists, kindof. When hashmap based problems are to be solved with better complexity. Generally, make two pointers left-start and right-end. Then, create increment and decrement conditions of pointers. Make calculations in between, updating some dict or var. Here left initialised to 0 of list, before loop. right initialised to -1 of list, meaning end. before loop.","title":"Observations"},{"location":"Certifications-and-Learning/DSA/neetcode/#questions-and-solutions_1","text":"Valid Palindrome Two Sum II 3Sum Container with Most Water Trapping Rain Water","title":"Questions and Solutions"},{"location":"Certifications-and-Learning/DSA/neetcode/#sliding-window","text":"","title":"Sliding Window"},{"location":"Certifications-and-Learning/DSA/neetcode/#observations_2","text":"Like two pointers, but this time pointer do not converge from left and right. Rather the two pointers move together, right moving faster based on conditions. Here left is initialised before loop. right is initialised inside loop.","title":"Observations"},{"location":"Certifications-and-Learning/DSA/neetcode/#questions-and-solutions_2","text":"Best Time to Buy & Sell Stock Longest Substring Without Repeating Characters Longest Repeating Character Replacement Permutation in String Minimum Window Substring Sliding Window Maximum","title":"Questions and Solutions"},{"location":"Certifications-and-Learning/DSA/neetcode/#stack","text":"","title":"Stack"},{"location":"Certifications-and-Learning/DSA/neetcode/#observations_3","text":"Usually does not have loops. Recursion sometimes. A lot of if elses are here. When traversing left to right, and in every decision only last value is considered.","title":"Observations"},{"location":"Certifications-and-Learning/DSA/neetcode/#questions-and-solutions_3","text":"Valid Parentheses Min Stack Evaluate Reverse Polish Notation Generate Parentheses Daily Temperatures Car Fleet Largest Rectangle in Histogram","title":"Questions and Solutions"},{"location":"Certifications-and-Learning/DSA/neetcode/#binary-search","text":"","title":"Binary Search"},{"location":"Certifications-and-Learning/DSA/neetcode/#observations_4","text":"","title":"Observations"},{"location":"Certifications-and-Learning/DSA/neetcode/#questions-and-solutions_4","text":"Binary Search Search a 2D Matrix Koko Eating Bananas Search Rotated Sorted Array Find Minimum in Rotated Sorted Array Time Based Key-Value Store Find Median of Two Sorted Arrays","title":"Questions and Solutions"},{"location":"Certifications-and-Learning/DSA/neetcode/#linked-list","text":"","title":"Linked List"},{"location":"Certifications-and-Learning/DSA/neetcode/#observations_5","text":"Not sure; cant see pattern for now. Very weird, learn more from youtube. Imagine this way --> You only have access to head in linked list. Everything else is computed, nth, goining anywhere, removing, reversing etc Many design questions and not only algo questions","title":"Observations"},{"location":"Certifications-and-Learning/DSA/neetcode/#questions-and-solutions_5","text":"Reverse Linked List Merge Two Linked Lists Reorder List Remove Nth Node from End of List Copy List with Random Pointer Add Two Numbers Linked List Cycle Find the Duplicate Number LRU Cache Merge K Sorted Lists Reverse Nodes in K-Group","title":"Questions and Solutions"},{"location":"Certifications-and-Learning/DSA/neetcode/#trees","text":"","title":"Trees"},{"location":"Certifications-and-Learning/DSA/neetcode/#observations_6","text":"","title":"Observations"},{"location":"Certifications-and-Learning/DSA/neetcode/#questions-and-solutions_6","text":"Invert Binary Tree Maximum Depth of Binary Tree Diameter of a Binary Tree Balanced Binary Tree Same Tree Subtree of Another Tree Lowest Common Ancestor of a BST Binary Tree Level Order Traversal Binary Tree Right Side View Count Good Nodes in a Binary Tree Validate Binary Search Tree Kth Smallest Element in a BST Construct Tree from Preorder and Inorder Traversal Binary Tree Max Path Sum Serialize and Deserialize Binary Tree","title":"Questions and Solutions"},{"location":"Certifications-and-Learning/DSA/neetcode/#tries","text":"","title":"Tries"},{"location":"Certifications-and-Learning/DSA/neetcode/#observations_7","text":"","title":"Observations"},{"location":"Certifications-and-Learning/DSA/neetcode/#questions-and-solutions_7","text":"Implement Trie Design Add and Search Word Data Structure Word Search II","title":"Questions and Solutions"},{"location":"Certifications-and-Learning/DSA/neetcode/#heap-priority-que","text":"","title":"Heap/ Priority Que"},{"location":"Certifications-and-Learning/DSA/neetcode/#observations_8","text":"First Impression, when we need to consider max and min in a list. Operations in such a way only considering max or min at a time. We mostly have a list. We convert list to heap with some calculation logic. Then we perform a loop with heappop() with some logic.","title":"Observations"},{"location":"Certifications-and-Learning/DSA/neetcode/#questions-and-solutions_8","text":"Kth Largest Element in a Stream Last Stone Weight K Closest Points to Origin Kth Largest Element in an Array Task Scheduler Design Twitter Find Median from Data Stream","title":"Questions and Solutions"},{"location":"Certifications-and-Learning/DSA/neetcode/#backtracking","text":"","title":"Backtracking"},{"location":"Certifications-and-Learning/DSA/neetcode/#observations_9","text":"Subsets Combination Sum Permutations Subsets II Combination Sum II Word Search Palindrome Partitioning Letter Combinations of a Phone Number N-Queens","title":"Observations"},{"location":"Certifications-and-Learning/DSA/neetcode/#graphs","text":"","title":"Graphs"},{"location":"Certifications-and-Learning/DSA/neetcode/#observations_10","text":"DFS or BFS used based on situation. A hashmap or hashset is always used in some way. Directions are defined mostly.","title":"Observations"},{"location":"Certifications-and-Learning/DSA/neetcode/#bfs","text":"If BFS, then queue is used. colletions.deque(). pop(), popleft() append() etc BFS is iterative, not recursive. Generally, when we need to consider multiple movement in one iteration, BFS used. Refer rotten orange. Dont confuse yourself by trying to think in terms of double loop. Look at the example below. for r in range(ROWS): for c in range(COLS): if grid [r] [c] ==0; # Dont try to compute in head what r,c location would be and all if grid [r] [c] ==1; # Think like. When at r,c location, what to do. if grid [r] [c] ==2; # Then next, for each different values","title":"BFS"},{"location":"Certifications-and-Learning/DSA/neetcode/#dfs","text":"If DFS, then normal list or hashset or hash is used. set() DFS is recursive in nature. Generally when we need to consider one movement per iteration, DFS used.","title":"DFS"},{"location":"Certifications-and-Learning/DSA/neetcode/#questions-and-solutions_9","text":"Number of Islands Clone Graph Max Area of Island - General logic for all problems here Pacific Atlantic Waterflow Surrounded Regions Rotting Oranges - BFS example Walls and Gates Course Schedule Course Schedule II Redundant Connection Number of Connected Components in Graph Graph Valid Tree Word Ladder","title":"Questions and Solutions"},{"location":"Certifications-and-Learning/DSA/neetcode/#advanced-graph","text":"","title":"Advanced Graph"},{"location":"Certifications-and-Learning/DSA/neetcode/#observations_11","text":"","title":"Observations"},{"location":"Certifications-and-Learning/DSA/neetcode/#questions-and-solutions_10","text":"Reconstruct Itinerary Min Cost to Connect all Points Network Delay Time Swim in Rising Water Alien Dictionary Cheapest Flights Within K Stops","title":"Questions and Solutions"},{"location":"Certifications-and-Learning/DSA/neetcode/#1-d-dynamic-programming","text":"","title":"1-D Dynamic Programming"},{"location":"Certifications-and-Learning/DSA/neetcode/#observations_12","text":"","title":"Observations"},{"location":"Certifications-and-Learning/DSA/neetcode/#questions-and-solutions_11","text":"Climbing Stairs Min Cost Climbing Stairs House Robber House Robber II Longest Palindromic Substring Palindromic Substrings Decode Ways Coin Change Maximum Product Subarray Word Break Longest Increasing Subsequence Partition Equal Subset Sum","title":"Questions and Solutions"},{"location":"Certifications-and-Learning/DSA/neetcode/#2-d-dynamic-programming","text":"","title":"2-D Dynamic Programming"},{"location":"Certifications-and-Learning/DSA/neetcode/#observations_13","text":"","title":"Observations"},{"location":"Certifications-and-Learning/DSA/neetcode/#questions-and-solutions_12","text":"Unique Paths Longest Common Subsequence Best Time to Buy/Sell Stock With Cooldown Coin Change II Target Sum Interleaving String Longest Increasing Path in a Matrix Distinct Subsequences Edit Distance Burst Balloons Regular Expression Matching","title":"Questions and Solutions"},{"location":"Certifications-and-Learning/DSA/neetcode/#greedy-approach","text":"","title":"Greedy Approach"},{"location":"Certifications-and-Learning/DSA/neetcode/#observations_14","text":"","title":"Observations"},{"location":"Certifications-and-Learning/DSA/neetcode/#questions-and-solutions_13","text":"Maximum Subarray Jump Game Jump Game II Gas Station Hand of Straights Merge Triplets to Form Target Triplet Partition Labels Valid Parenthesis String","title":"Questions and Solutions"},{"location":"Certifications-and-Learning/DSA/neetcode/#intervals","text":"","title":"Intervals"},{"location":"Certifications-and-Learning/DSA/neetcode/#observations_15","text":"","title":"Observations"},{"location":"Certifications-and-Learning/DSA/neetcode/#questions-and-solutions_14","text":"Insert Interval Merge Intervals Non-Overlapping Intervals Meeting Rooms Meeting Rooms II Minimum Interval to Include Each Query","title":"Questions and Solutions"},{"location":"Certifications-and-Learning/DSA/neetcode/#math-and-geometry","text":"","title":"Math and Geometry"},{"location":"Certifications-and-Learning/DSA/neetcode/#observations_16","text":"","title":"Observations"},{"location":"Certifications-and-Learning/DSA/neetcode/#questions-and-solutions_15","text":"Rotate Image Spiral Matrix Set Matrix Zeroes Happy Number Plus One Pow(x, n) Multiply Strings Detect Squares","title":"Questions and Solutions"},{"location":"Certifications-and-Learning/DSA/neetcode/#bit-manipulation","text":"","title":"Bit Manipulation"},{"location":"Certifications-and-Learning/DSA/neetcode/#observations_17","text":"","title":"Observations"},{"location":"Certifications-and-Learning/DSA/neetcode/#questions-and-solutions_16","text":"Single Number Number of 1 Bits Counting Bits Reverse Bits Missing Number Sum of Two Integers Reverse Integer","title":"Questions and Solutions"},{"location":"Certifications-and-Learning/DSA/neetcode/3Sum/","text":"class Solution: def threeSum(self, nums: List[int]) -> List[List[int]]: res = [] nums.sort() for i, a in enumerate(nums): if i > 0 and a == nums[i - 1]: continue l, r = i + 1, len(nums) - 1 while l < r: threeSum = a + nums[l] + nums[r] if threeSum > 0: r -= 1 elif threeSum < 0: l += 1 else: res.append([a, nums[l], nums[r]]) l += 1 while nums[l] == nums[l - 1] and l < r: l += 1 return res \"\"\" https://leetcode.com/problems/3sum/ Problem: A list is given. Unsorted. Find 3 items which sums to 0. Duplicated not allowed. Complexity: Concepts: \"\"\"","title":"3Sum"},{"location":"Certifications-and-Learning/DSA/neetcode/Add%20Two%20Numbers/","text":"Definition for singly-linked list. class ListNode: def init (self, val=0, next=None): self.val = val self.next = next class Solution: def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode: dummy = ListNode() cur = dummy carry = 0 while l1 or l2 or carry: v1 = l1.val if l1 else 0 v2 = l2.val if l2 else 0 # new digit val = v1 + v2 + carry carry = val // 10 val = val % 10 cur.next = ListNode(val) # update ptrs cur = cur.next l1 = l1.next if l1 else None l2 = l2.next if l2 else None return dummy.next \"\"\" https://leetcode.com/problems/add-two-numbers/ https://youtu.be/wgFPrzTjm7s Problem: Two linked list of same or different length given. Sum the two linked list and return a linked list of final answer. Complexity: Concepts: Too many edge cases. How to handle carry forward. \"\"\"","title":"Definition for singly-linked list."},{"location":"Certifications-and-Learning/DSA/neetcode/Add%20Two%20Numbers/#definition-for-singly-linked-list","text":"","title":"Definition for singly-linked list."},{"location":"Certifications-and-Learning/DSA/neetcode/Add%20Two%20Numbers/#class-listnode","text":"","title":"class ListNode:"},{"location":"Certifications-and-Learning/DSA/neetcode/Add%20Two%20Numbers/#def-initself-val0-nextnone","text":"","title":"def init(self, val=0, next=None):"},{"location":"Certifications-and-Learning/DSA/neetcode/Add%20Two%20Numbers/#selfval-val","text":"","title":"self.val = val"},{"location":"Certifications-and-Learning/DSA/neetcode/Add%20Two%20Numbers/#selfnext-next","text":"class Solution: def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode: dummy = ListNode() cur = dummy carry = 0 while l1 or l2 or carry: v1 = l1.val if l1 else 0 v2 = l2.val if l2 else 0 # new digit val = v1 + v2 + carry carry = val // 10 val = val % 10 cur.next = ListNode(val) # update ptrs cur = cur.next l1 = l1.next if l1 else None l2 = l2.next if l2 else None return dummy.next \"\"\" https://leetcode.com/problems/add-two-numbers/ https://youtu.be/wgFPrzTjm7s Problem: Two linked list of same or different length given. Sum the two linked list and return a linked list of final answer. Complexity: Concepts: Too many edge cases. How to handle carry forward. \"\"\"","title":"self.next = next"},{"location":"Certifications-and-Learning/DSA/neetcode/Best%20Time%20to%20Buy%20%26%20Sell%20Stock/","text":"class Solution: def maxProfit(self, prices: List[int]) -> int: res = 0 l = 0 for r in range(1, len(prices)): if prices[r] < prices[l]: l = r res = max(res, prices[r] - prices[l]) return res \"\"\" https://leetcode.com/problems/best-time-to-buy-and-sell-stock/ Problem: A list of prices. Make one transaction for max profit. Complexity: Concepts: \"\"\"","title":"Best Time to Buy & Sell Stock"},{"location":"Certifications-and-Learning/DSA/neetcode/Binary%20Search/","text":"class Solution: def search(self, nums: List[int], target: int) -> int: l, r = 0, len(nums) - 1 while l <= r: m = l + ((r - l) // 2) # (l + r) // 2 can lead to overflow in most languages. In python it does not happen. if nums[m] > target: r = m - 1 elif nums[m] < target: l = m + 1 else: return m return -1 \"\"\" https://leetcode.com/problems/binary-search/ https://youtu.be/s4DPM8ct1pI Problem: List of nums given in sorted ascending order. And a target is given. Find index of target in nums in O(log n) Normal search is O(n), since Log n is needed, we do binary search/ Complexity: Concepts: Need two pointers. Loop exit condition - while l<=r: default return -1 Find mid - m = (l+r)//2 OR m = l + ((r-l)//2) If larger - r = m-1 If smaller - l = m+1 Return - m \"\"\"","title":"Binary Search"},{"location":"Certifications-and-Learning/DSA/neetcode/Clone%20Graph/","text":"class Solution: def cloneGraph(self, node: \"Node\") -> \"Node\": oldToNew = {} def dfs(node): if node in oldToNew: return oldToNew[node] copy = Node(node.val) oldToNew[node] = copy for nei in node.neighbors: copy.neighbors.append(dfs(nei)) return copy return dfs(node) if node else None \"\"\" https://leetcode.com/problems/clone-graph/ https://youtu.be/mQeF6bN8hMk Problem: Complexity: Concepts: \"\"\"","title":"Clone Graph"},{"location":"Certifications-and-Learning/DSA/neetcode/Container%20with%20Most%20Water/","text":"class Solution: def maxArea(self, height: List[int]) -> int: l, r = 0, len(height) - 1 res = 0 while l < r: res = max(res, min(height[l], height[r]) * (r - l)) if height[l] < height[r]: l += 1 elif height[r] <= height[l]: r -= 1 return res \"\"\" https://leetcode.com/problems/container-with-most-water/ Problem: List given with positive heights. Return two index of heights, which has maximum area. Complexity: O(n) Concepts: Item value, which is height * difference of index of two items is area. Maximising this. \"\"\"","title":"Container with Most Water"},{"location":"Certifications-and-Learning/DSA/neetcode/Contains%20Duplicate/","text":"class Solution: def containsDuplicate(self, nums: List[int]) -> bool: hashset = set() for n in nums: if n in hashset: return True hashset.add(n) return False","title":"Contains Duplicate"},{"location":"Certifications-and-Learning/DSA/neetcode/Copy%20List%20with%20Random%20Pointer/","text":"\"\"\" Definition for a Node. class Node: def init (self, x: int, next: 'Node' = None, random: 'Node' = None): self.val = int(x) self.next = next self.random = random \"\"\" class Solution: def copyRandomList(self, head: \"Node\") -> \"Node\": oldToCopy = {None: None} cur = head while cur: copy = Node(cur.val) oldToCopy[cur] = copy cur = cur.next cur = head while cur: copy = oldToCopy[cur] copy.next = oldToCopy[cur.next] copy.random = oldToCopy[cur.random] cur = cur.next return oldToCopy[head] \"\"\" https://leetcode.com/problems/copy-list-with-random-pointer/ https://youtu.be/5Y2EiZST97Y Problem: A linked list LL is given. LL has an extra node with a random pointer, which points to any node with no pattern. Return a DEEP COPY of LL. Complexity: O(n) Concepts: Two passes needed. Tracking using a hashmap of random node pointer. \"\"\"","title":"Copy List with Random Pointer"},{"location":"Certifications-and-Learning/DSA/neetcode/Copy%20List%20with%20Random%20Pointer/#definition-for-a-node","text":"class Node: def init (self, x: int, next: 'Node' = None, random: 'Node' = None): self.val = int(x) self.next = next self.random = random \"\"\" class Solution: def copyRandomList(self, head: \"Node\") -> \"Node\": oldToCopy = {None: None} cur = head while cur: copy = Node(cur.val) oldToCopy[cur] = copy cur = cur.next cur = head while cur: copy = oldToCopy[cur] copy.next = oldToCopy[cur.next] copy.random = oldToCopy[cur.random] cur = cur.next return oldToCopy[head] \"\"\" https://leetcode.com/problems/copy-list-with-random-pointer/ https://youtu.be/5Y2EiZST97Y Problem: A linked list LL is given. LL has an extra node with a random pointer, which points to any node with no pattern. Return a DEEP COPY of LL. Complexity: O(n) Concepts: Two passes needed. Tracking using a hashmap of random node pointer. \"\"\"","title":"Definition for a Node."},{"location":"Certifications-and-Learning/DSA/neetcode/Design%20Twitter/","text":"class Twitter: def init (self): self.count = 0 self.tweetMap = defaultdict(list) # userId -> list of [count, tweetIds] self.followMap = defaultdict(set) # userId -> set of followeeId def postTweet(self, userId: int, tweetId: int) -> None: self.tweetMap[userId].append([self.count, tweetId]) self.count -= 1 def getNewsFeed(self, userId: int) -> List[int]: res = [] minHeap = [] self.followMap[userId].add(userId) for followeeId in self.followMap[userId]: if followeeId in self.tweetMap: index = len(self.tweetMap[followeeId]) - 1 count, tweetId = self.tweetMap[followeeId][index] heapq.heappush(minHeap, [count, tweetId, followeeId, index - 1]) while minHeap and len(res) < 10: count, tweetId, followeeId, index = heapq.heappop(minHeap) res.append(tweetId) if index >= 0: count, tweetId = self.tweetMap[followeeId][index] heapq.heappush(minHeap, [count, tweetId, followeeId, index - 1]) return res def follow(self, followerId: int, followeeId: int) -> None: self.followMap[followerId].add(followeeId) def unfollow(self, followerId: int, followeeId: int) -> None: if followeeId in self.followMap[followerId]: self.followMap[followerId].remove(followeeId) \"\"\" https://leetcode.com/problems/design-twitter/ Problem: Complexity: Concepts: Similar to \"merge k sorted list\" problem Here hashset O(1) is used instead of hashmap O(n) \"\"\"","title":"Design Twitter"},{"location":"Certifications-and-Learning/DSA/neetcode/Encode%20and%20Decode%20Strings/","text":"class Solution: \"\"\" @param: strs: a list of strings @return: encodes a list of strings to a single string. \"\"\" def encode(self, strs): res = \"\" for s in strs: res += str(len(s)) + \"#\" + s return res \"\"\" @param: str: A string @return: dcodes a single string to a list of strings \"\"\" def decode(self, str): res, i = [], 0 while i < len(str): j = i while str[j] != \"#\": j += 1 length = int(str[i:j]) res.append(str[j + 1 : j + 1 + length]) i = j + 1 + length return res \"\"\" https://leetcode.com/problems/encode-and-decode-strings/ Problem: Given - A list of strings. Join all words to encode Then create the list again from the encoded string; meaning decode. Complexity: O(n) Concepts: Nothing \"\"\"","title":"Encode and Decode Strings"},{"location":"Certifications-and-Learning/DSA/neetcode/Evaluate%20Reverse%20Polish%20Notation/","text":"class Solution: def evalRPN(self, tokens: List[str]) -> int: stack = [] for c in tokens: if c == \"+\": stack.append(stack.pop() + stack.pop()) elif c == \"-\": a, b = stack.pop(), stack.pop() stack.append(b - a) elif c == \"*\": stack.append(stack.pop() * stack.pop()) elif c == \"/\": a, b = stack.pop(), stack.pop() stack.append(int(b / a)) else: stack.append(int(c)) return stack[0] \"\"\" https://leetcode.com/problems/evaluate-reverse-polish-notation/ Problem: We have + - * and / Then we have a list with numbers and operators tokens = [\"2\",\"1\",\"+\",\"3\",\" \"] Output --> 9 Explanation: ((2+1) 3)=9 Complexity: O(n) O(n) Concepts: \"\"\"","title":"Evaluate Reverse Polish Notation"},{"location":"Certifications-and-Learning/DSA/neetcode/Find%20Median%20of%20Two%20Sorted%20Arrays/","text":"Time: log(min(n, m)) class Solution: def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float: A, B = nums1, nums2 total = len(nums1) + len(nums2) half = total // 2 if len(B) < len(A): A, B = B, A l, r = 0, len(A) - 1 while True: i = (l + r) // 2 # A j = half - i - 2 # B Aleft = A[i] if i >= 0 else float(\"-infinity\") Aright = A[i + 1] if (i + 1) < len(A) else float(\"infinity\") Bleft = B[j] if j >= 0 else float(\"-infinity\") Bright = B[j + 1] if (j + 1) < len(B) else float(\"infinity\") # partition is correct if Aleft <= Bright and Bleft <= Aright: # odd if total % 2: return min(Aright, Bright) # even return (max(Aleft, Bleft) + min(Aright, Bright)) / 2 elif Aleft > Bright: r = i - 1 else: l = i + 1 \"\"\" https://leetcode.com/problems/median-of-two-sorted-arrays/ https://youtu.be/q6IEA26hvXc https://youtu.be/NTop3VTjmxk - Better Explanation Problem: Two sorted list given. Find the median of merged list. Complexity: Concepts: Did not understand anything! \"\"\"","title":"Time: log(min(n, m))"},{"location":"Certifications-and-Learning/DSA/neetcode/Find%20Median%20of%20Two%20Sorted%20Arrays/#time-logminn-m","text":"class Solution: def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float: A, B = nums1, nums2 total = len(nums1) + len(nums2) half = total // 2 if len(B) < len(A): A, B = B, A l, r = 0, len(A) - 1 while True: i = (l + r) // 2 # A j = half - i - 2 # B Aleft = A[i] if i >= 0 else float(\"-infinity\") Aright = A[i + 1] if (i + 1) < len(A) else float(\"infinity\") Bleft = B[j] if j >= 0 else float(\"-infinity\") Bright = B[j + 1] if (j + 1) < len(B) else float(\"infinity\") # partition is correct if Aleft <= Bright and Bleft <= Aright: # odd if total % 2: return min(Aright, Bright) # even return (max(Aleft, Bleft) + min(Aright, Bright)) / 2 elif Aleft > Bright: r = i - 1 else: l = i + 1 \"\"\" https://leetcode.com/problems/median-of-two-sorted-arrays/ https://youtu.be/q6IEA26hvXc https://youtu.be/NTop3VTjmxk - Better Explanation Problem: Two sorted list given. Find the median of merged list. Complexity: Concepts: Did not understand anything! \"\"\"","title":"Time: log(min(n, m))"},{"location":"Certifications-and-Learning/DSA/neetcode/Generate%20Parentheses/","text":"class Solution: def generateParenthesis(self, n: int) -> List[str]: stack = [] res = [] def backtrack(openN, closedN): if openN == closedN == n: res.append(\"\".join(stack)) return if openN < n: stack.append(\"(\") backtrack(openN + 1, closedN) stack.pop() if closedN < openN: stack.append(\")\") backtrack(openN, closedN + 1) stack.pop() backtrack(0, 0) return res \"\"\" https://leetcode.com/problems/generate-parentheses/ Problem: Integer n is given. We are given a parenthesis like () We need to create n pairs of parenthesis, and all combinations. Only well formed allowed, meaning if open then should close. Complexity: Concepts: \"\"\"","title":"Generate Parentheses"},{"location":"Certifications-and-Learning/DSA/neetcode/Group%20Anagrams/","text":"class Solution: def groupAnagrams(self, strs: List[str]) -> List[List[str]]: ans = collections.defaultdict(list) for s in strs: count = [0] * 26 for c in s: count[ord(c) - ord('a')] += 1 ans[tuple(count)].append(s) return ans.values() \"\"\" https://leetcode.com/problems/group-anagrams/ We have list of strings. Create a sublist of anagrams. Complexity: O(mn) Concepts: HashMap of each item Two Loops \"\"\"","title":"Group Anagrams"},{"location":"Certifications-and-Learning/DSA/neetcode/Insert%20Interval/","text":"class Solution: def insert( self, intervals: List[List[int]], newInterval: List[int] ) -> List[List[int]]: res = [] for i in range(len(intervals)): if newInterval[1] < intervals[i][0]: res.append(newInterval) return res + intervals[i:] elif newInterval[0] > intervals[i][1]: res.append(intervals[i]) else: newInterval = [ min(newInterval[0], intervals[i][0]), max(newInterval[1], intervals[i][1]), ] res.append(newInterval) return res \"\"\" https://leetcode.com/problems/insert-interval/ https://youtu.be/A8NUOmlwOlM Problem: Complexity: Concepts: \"\"\"","title":"Insert Interval"},{"location":"Certifications-and-Learning/DSA/neetcode/K%20Closest%20Points%20to%20Origin/","text":"class Solution: def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]: pts = [] for x, y in points: dist = (abs(x - 0) 2) + (abs(y - 0) 2) pts.append([dist, x, y]) res = [] heapq.heapify(pts) for i in range(k): dist, x, y = heapq.heappop(pts) res.append([x, y]) return res \"\"\" https://leetcode.com/problems/k-closest-points-to-origin/ Problem: A list of Points are given. Find the \"k\" points closest to the origin, ie (0,0) We always have single answer, will not be any tie. Complexity: Concepts: Create a heap from list using some required calculations. Then perform heappop as per logic. \"\"\"","title":"K Closest Points to Origin"},{"location":"Certifications-and-Learning/DSA/neetcode/Koko%20Eating%20Bananas/","text":"class Solution: def minEatingSpeed(self, piles: List[int], h: int) -> int: l, r = 1, max(piles) k = 0 while l <= r: m = (l + r) // 2 totalTime = 0 for p in piles: totalTime += ((p - 1) // m) + 1 if totalTime <= h: k = m r = m - 1 else: l = m + 1 return k \"\"\" https://leetcode.com/problems/koko-eating-bananas/ https://youtu.be/U2SozAs9RzA Problem: A list of integers, which are number of banana in a pile. len(list) is no. of piles. Given Hours. What is speed of eating banana, to finish all piles in given hours limit. Complexity: Concepts: \"\"\"","title":"Koko Eating Bananas"},{"location":"Certifications-and-Learning/DSA/neetcode/Kth%20Largest%20Element%20in%20a%20Stream/","text":"class KthLargest: def init (self, k: int, nums: List[int]): # minHeap w/ K largest integers self.minHeap, self.k = nums, k heapq.heapify(self.minHeap) while len(self.minHeap) > k: heapq.heappop(self.minHeap) def add(self, val: int) -> int: heapq.heappush(self.minHeap, val) if len(self.minHeap) > self.k: heapq.heappop(self.minHeap) return self.minHeap[0] \"\"\" https://leetcode.com/problems/kth-largest-element-in-a-stream/ Problem: Complexity: Concepts: \"\"\"","title":"Kth Largest Element in a Stream"},{"location":"Certifications-and-Learning/DSA/neetcode/LRU%20Cache/","text":"class Node: def init (self, key, val): self.key, self.val = key, val self.prev = self.next = None class LRUCache: def init (self, capacity: int): self.cap = capacity self.cache = {} # map key to node self.left, self.right = Node(0, 0), Node(0, 0) self.left.next, self.right.prev = self.right, self.left # remove node from list def remove(self, node): prev, nxt = node.prev, node.next prev.next, nxt.prev = nxt, prev # insert node at right def insert(self, node): prev, nxt = self.right.prev, self.right prev.next = nxt.prev = node node.next, node.prev = nxt, prev def get(self, key: int) -> int: if key in self.cache: self.remove(self.cache[key]) self.insert(self.cache[key]) return self.cache[key].val return -1 def put(self, key: int, value: int) -> None: if key in self.cache: self.remove(self.cache[key]) self.cache[key] = Node(key, value) self.insert(self.cache[key]) if len(self.cache) > self.cap: # remove from the list and delete the LRU from hashmap lru = self.left.next self.remove(lru) print(lru in self.cache) del self.cache[lru.key] \"\"\" https://leetcode.com/problems/lru-cache/ Problem: Complexity: Concepts: \"\"\"","title":"LRU Cache"},{"location":"Certifications-and-Learning/DSA/neetcode/Largest%20Rectangle%20in%20Histogram/","text":"class Solution: def largestRectangleArea(self, heights: List[int]) -> int: maxArea = 0 stack = [] # pair: (index, height) for i, h in enumerate(heights): start = i while stack and stack[-1][1] > h: index, height = stack.pop() maxArea = max(maxArea, height * (i - index)) start = index stack.append((start, h)) for i, h in stack: maxArea = max(maxArea, h * (len(heights) - i)) return maxArea \"\"\" https://leetcode.com/problems/largest-rectangle-in-histogram/ Problem: A list of integers. Each represent a bar height, and each item width 1. Find max area rectangle. Return rectangle area. Complexity: Concepts: Like rain water in 2 pointer, but here we use stack. So we use two pointer pairs in stack. Enumerate used -- https://www.geeksforgeeks.org/enumerate-in-python/ \"\"\"","title":"Largest Rectangle in Histogram"},{"location":"Certifications-and-Learning/DSA/neetcode/Last%20Stone%20Weight/","text":"class Solution: def lastStoneWeight(self, stones: List[int]) -> int: stones = [-s for s in stones] # python has only min heap, no max heap, hence need to multiply each item with -1 heapq.heapify(stones) while len(stones) > 1: first = heapq.heappop(stones) second = heapq.heappop(stones) if second > first: heapq.heappush(stones, first - second) stones.append(0) return abs(stones[0]) \"\"\" https://leetcode.com/problems/last-stone-weight/ Problem: Complexity: Concepts: \"\"\"","title":"Last Stone Weight"},{"location":"Certifications-and-Learning/DSA/neetcode/Longest%20Consecutive%20Sequence/","text":"class Solution: def longestConsecutive(self, nums: List[int]) -> int: numSet = set(nums) longest = 0 for n in nums: # check if its the start of a sequence if (n - 1) not in numSet: length = 1 while (n + length) in numSet: length += 1 longest = max(length, longest) return longest \"\"\" https://leetcode.com/problems/longest-consecutive-sequence/ Problem: Input list of numbers, unsorted. Find longest, sequence of consecutive numbers. O(n) complexity needed Complexity: O(n) O(n) Concepts: Make set See if i - 1 there in set? Yes, its start of sequence. See if i + 1, there in set? Yes, add to longest variable. \"\"\"","title":"Longest Consecutive Sequence"},{"location":"Certifications-and-Learning/DSA/neetcode/Longest%20Repeating%20Character%20Replacement/","text":"class Solution: def characterReplacement(self, s: str, k: int) -> int: count = {} res = 0 l = 0 maxf = 0 for r in range(len(s)): count[s[r]] = 1 + count.get(s[r], 0) maxf = max(maxf, count[s[r]]) if (r - l + 1) - maxf > k: count[s[l]] -= 1 l += 1 res = max(res, r - l + 1) return res \"\"\" https://leetcode.com/problems/longest-repeating-character-replacement/ Problem: Given a string, all uppercase. And given integer k. Replace k items in string, such that forming a consecutive longest sub string. Return the length on sub string. Complexity: Concepts: \"\"\"","title":"Longest Repeating Character Replacement"},{"location":"Certifications-and-Learning/DSA/neetcode/Longest%20Substring%20Without%20Repeating%20Characters/","text":"class Solution: def lengthOfLongestSubstring(self, s: str) -> int: charSet = set() l = 0 res = 0 for r in range(len(s)): while s[r] in charSet: charSet.remove(s[l]) l += 1 charSet.add(s[r]) res = max(res, r - l + 1) return res \"\"\" https://leetcode.com/problems/longest-substring-without-repeating-characters/ Problem: Given a string. Return longest sub string, without repeating. Complexity: Concepts: \"\"\"","title":"Longest Substring Without Repeating Characters"},{"location":"Certifications-and-Learning/DSA/neetcode/Max%20Area%20of%20Island/","text":"class Solution: def maxAreaOfIsland(self, grid: List[List[int]]) -> int: # Get row and col length ROWS, COLS = len(grid), len(grid[0]) # Define hash or hashset visit = set() # Define DFS or BFS def dfs(r, c): # Always define base case for DFS recursive function. # Meaning, when to not do anything. if ( r < 0 # If Row is -ve or r == ROWS # If we are at final row or c < 0 # If Col is -ve or c == COLS # If we are at final col or grid[r][c] == 0 # If we are water or (r, c) in visit # If we already visited ): return 0 # Add visited to hashset. # If none of above case, add to hashset visit.add((r, c)) # Return the recursive in all four directions # Remove () from start and end if does not work. return (1 + dfs(r + 1, c) + # move down since x+1 dfs(r - 1, c) + # move up since x-1 dfs(r, c + 1) + # move right since y+1 dfs(r, c - 1)) # move left since y-1 # The final logic output as per the question. area = 0 for r in range(ROWS): for c in range(COLS): area = max(area, dfs(r, c)) return area \"\"\" https://leetcode.com/problems/max-area-of-island/ https://youtu.be/iJGr1OtmH0c Problem: 1 land and 0 water. Find the island with max area. Or in other word the largest island. Complexity: O(m*n) time and space where m and n is grid size. Concepts: Similar to number of island. Apply DFS. Use hashset to keep track of visited. \"\"\"","title":"Max Area of Island"},{"location":"Certifications-and-Learning/DSA/neetcode/Meeting%20Rooms/","text":"class Solution: \"\"\" @param intervals: an array of meeting time intervals @return: if a person could attend all meetings \"\"\" def canAttendMeetings(self, intervals): intervals.sort(key=lambda i: i.start) for i in range(1, len(intervals)): i1 = intervals[i - 1] i2 = intervals[i] if i1.end > i2.start: return False return True \"\"\" https://leetcode.com/problems/meeting-rooms/ https://youtu.be/PaJxqZVPhbg Problem: List of list or set. First item is start time, second item is end time. See overlapping meetings. If no overlapping then return true else return false. Complexity: O(n logn) -- for sorting O(n) -- remaining part Hence O(n logn) Concepts: \"\"\"","title":"Meeting Rooms"},{"location":"Certifications-and-Learning/DSA/neetcode/Merge%20Two%20Linked%20Lists/","text":"Definition for singly-linked list. class ListNode: def init (self, val=0, next=None): self.val = val self.next = next class Solution: def mergeTwoLists(self, list1: ListNode, list2: ListNode) -> ListNode: dummy = ListNode() tail = dummy while list1 and list2: if list1.val < list2.val: tail.next = list1 list1 = list1.next else: tail.next = list2 list2 = list2.next tail = tail.next if list1: tail.next = list1 elif list2: tail.next = list2 return dummy.next \"\"\" https://leetcode.com/problems/merge-two-sorted-lists/ Problem: Two sorted linked lists. Merge them. Complexity: Concepts: \"\"\"","title":"Definition for singly-linked list."},{"location":"Certifications-and-Learning/DSA/neetcode/Merge%20Two%20Linked%20Lists/#definition-for-singly-linked-list","text":"","title":"Definition for singly-linked list."},{"location":"Certifications-and-Learning/DSA/neetcode/Merge%20Two%20Linked%20Lists/#class-listnode","text":"","title":"class ListNode:"},{"location":"Certifications-and-Learning/DSA/neetcode/Merge%20Two%20Linked%20Lists/#def-initself-val0-nextnone","text":"","title":"def init(self, val=0, next=None):"},{"location":"Certifications-and-Learning/DSA/neetcode/Merge%20Two%20Linked%20Lists/#selfval-val","text":"","title":"self.val = val"},{"location":"Certifications-and-Learning/DSA/neetcode/Merge%20Two%20Linked%20Lists/#selfnext-next","text":"class Solution: def mergeTwoLists(self, list1: ListNode, list2: ListNode) -> ListNode: dummy = ListNode() tail = dummy while list1 and list2: if list1.val < list2.val: tail.next = list1 list1 = list1.next else: tail.next = list2 list2 = list2.next tail = tail.next if list1: tail.next = list1 elif list2: tail.next = list2 return dummy.next \"\"\" https://leetcode.com/problems/merge-two-sorted-lists/ Problem: Two sorted linked lists. Merge them. Complexity: Concepts: \"\"\"","title":"self.next = next"},{"location":"Certifications-and-Learning/DSA/neetcode/Min%20Stack/","text":"class MinStack: def init (self): self.stack = [] self.minStack = [] def push(self, val: int) -> None: self.stack.append(val) val = min(val, self.minStack[-1] if self.minStack else val) self.minStack.append(val) def pop(self) -> None: self.stack.pop() self.minStack.pop() def top(self) -> int: return self.stack[-1] def getMin(self) -> int: return self.minStack[-1] \"\"\" https://leetcode.com/problems/min-stack/ Problem: Design stack which can pop, push, top and retrieve. Input is list of functions like [push, pop, getmin etc] Complexity: O(1) implementation Concepts: Use two stacks for O(1) \"\"\"","title":"Min Stack"},{"location":"Certifications-and-Learning/DSA/neetcode/Number%20of%20Islands/","text":"class Solution: def numIslands(self, grid: List[List[str]]) -> int: if not grid or not grid[0]: return 0 islands = 0 visit = set() rows, cols = len(grid), len(grid[0]) def dfs(r, c): if ( r not in range(rows) or c not in range(cols) or grid[r][c] == \"0\" or (r, c) in visit ): return visit.add((r, c)) directions = [[0, 1], [0, -1], [1, 0], [-1, 0]] for dr, dc in directions: dfs(r + dr, c + dc) for r in range(rows): for c in range(cols): if grid[r][c] == \"1\" and (r, c) not in visit: islands += 1 dfs(r, c) return islands \"\"\" https://leetcode.com/problems/number-of-islands/ https://youtu.be/pV2kpPD66nE - Video solution is different. Problem: 1 is land and 0 is water. 2d grid of above; list of list, with rows and columns. Count the number of islands. Complexity: Concepts: Very good problem, as many graph problems based on this. \"\"\"","title":"Number of Islands"},{"location":"Certifications-and-Learning/DSA/neetcode/Product%20of%20Array%20Except%20Self/","text":"class Solution: def productExceptSelf(self, nums: List[int]) -> List[int]: res = [1] * (len(nums)) prefix = 1 for i in range(len(nums)): res[i] = prefix prefix *= nums[i] postfix = 1 for i in range(len(nums) - 1, -1, -1): res[i] *= postfix postfix *= nums[i] return res \"\"\" https://leetcode.com/problems/product-of-array-except-self/ Input Array. Output product of all values, without including the item we are at. Do in O(n) time. And division is not allowed. Complexity: O(n) O(n) Concepts: Bucket Sort \"\"\"","title":"Product of Array Except Self"},{"location":"Certifications-and-Learning/DSA/neetcode/Remove%20Nth%20Node%20from%20End%20of%20List/","text":"class Solution: def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode: dummy = ListNode(0, head) left = dummy right = head while n > 0: # in video its --> while n > 0 and right: right = right.next n -= 1 while right: left = left.next right = right.next # delete left.next = left.next.next # Simply setting next to next pointer, which is essentially removing the next item. return dummy.next # Return next to dummy, which is original head \"\"\" https://leetcode.com/problems/remove-nth-node-from-end-of-list/ https://youtu.be/XVuQxVej6y8 Problem: A link list is given. Remove the nth node, FROM THE END. not the beginning. Return new linked list. Only one pass allowed. Complexity: O(n) Concepts: \"\"\"","title":"Remove Nth Node from End of List"},{"location":"Certifications-and-Learning/DSA/neetcode/Reorder%20List/","text":"class Solution: def reorderList(self, head: ListNode) -> None: # find middle slow, fast = head, head.next while fast and fast.next: slow = slow.next fast = fast.next.next # reverse second half second = slow.next prev = slow.next = None while second: tmp = second.next second.next = prev prev = second second = tmp # merge two halfs first, second = head, prev while second: tmp1, tmp2 = first.next, second.next first.next = second second.next = tmp1 first, second = tmp1, tmp2 \"\"\" https://leetcode.com/problems/reorder-list/ Problem: Given a linked list. Re arrange in alternative position start and end. Complexity: Concepts: \"\"\"","title":"Reorder List"},{"location":"Certifications-and-Learning/DSA/neetcode/Reverse%20Linked%20List/","text":"Definition for singly-linked list. class ListNode: def init (self, val=0, next=None): self.val = val self.next = next class Solution: # Solution 1 - Loop O(n) time and O(1) space def reverseList(self, head: ListNode) -> ListNode: prev, curr = None, head while curr: temp = curr.next curr.next = prev prev = curr curr = temp return prev # Solution 2 - Recursive O(n) time and space def reverseList(self, head: ListNode) -> ListNode: if not head: return None newHead = head if head.next: newHead = self.reverseList(head.next) head.next.next = head head.next = None return newHead \"\"\" https://leetcode.com/problems/reverse-linked-list/ Problem: Complexity: O(n) O(1) Concepts: \"\"\"","title":"Definition for singly-linked list."},{"location":"Certifications-and-Learning/DSA/neetcode/Reverse%20Linked%20List/#definition-for-singly-linked-list","text":"","title":"Definition for singly-linked list."},{"location":"Certifications-and-Learning/DSA/neetcode/Reverse%20Linked%20List/#class-listnode","text":"","title":"class ListNode:"},{"location":"Certifications-and-Learning/DSA/neetcode/Reverse%20Linked%20List/#def-initself-val0-nextnone","text":"","title":"def init(self, val=0, next=None):"},{"location":"Certifications-and-Learning/DSA/neetcode/Reverse%20Linked%20List/#selfval-val","text":"","title":"self.val = val"},{"location":"Certifications-and-Learning/DSA/neetcode/Reverse%20Linked%20List/#selfnext-next","text":"class Solution: # Solution 1 - Loop O(n) time and O(1) space def reverseList(self, head: ListNode) -> ListNode: prev, curr = None, head while curr: temp = curr.next curr.next = prev prev = curr curr = temp return prev # Solution 2 - Recursive O(n) time and space def reverseList(self, head: ListNode) -> ListNode: if not head: return None newHead = head if head.next: newHead = self.reverseList(head.next) head.next.next = head head.next = None return newHead \"\"\" https://leetcode.com/problems/reverse-linked-list/ Problem: Complexity: O(n) O(1) Concepts: \"\"\"","title":"self.next = next"},{"location":"Certifications-and-Learning/DSA/neetcode/Rotting%20Oranges/","text":"class Solution: def orangesRotting(self, grid: List[List[int]]) -> int: q = collections.deque() fresh = 0 time = 0 for r in range(len(grid)): for c in range(len(grid[0])): if grid[r][c] == 1: fresh += 1 if grid[r][c] == 2: q.append((r, c)) directions = [[0, 1], [0, -1], [1, 0], [-1, 0]] while fresh > 0 and q: length = len(q) for i in range(length): r, c = q.popleft() for dr, dc in directions: row, col = r + dr, c + dc # if in bounds and nonrotten, make rotten # and add to q if ( row in range(len(grid)) and col in range(len(grid[0])) and grid[row][col] == 1 ): grid[row][col] = 2 q.append((row, col)) fresh -= 1 time += 1 return time if fresh == 0 else -1 \"\"\" https://leetcode.com/problems/rotting-oranges/ https://youtu.be/y704fEOx0s0 Problem: 0 is empty 1 is fresh orange 2 is rotten orange Every minute (or loop) every rotton orange makes connected fresh oranges to rotten. Return minimum number of minutes that will rot all oranges. If even 1 orange is left fresh, return -1. Complexity: O(mn) Concepts: BFS is used, not DFS. BFS \"\"\"","title":"Rotting Oranges"},{"location":"Certifications-and-Learning/DSA/neetcode/Search%20a%202D%20Matrix/","text":"class Solution: def searchMatrix(self, matrix: List[List[int]], target: int) -> bool: ROWS, COLS = len(matrix), len(matrix[0]) top, bot = 0, ROWS - 1 while top <= bot: row = (top + bot) // 2 if target > matrix[row][-1]: top = row + 1 elif target < matrix[row][0]: bot = row - 1 else: break if not (top <= bot): return False row = (top + bot) // 2 # Values comes from above loop l, r = 0, COLS - 1 while l <= r: m = (l + r) // 2 if target > matrix[row][m]: # Row value used from above loop l = m + 1 elif target < matrix[row][m]: r = m - 1 else: return True return False \"\"\" https://leetcode.com/problems/search-a-2d-matrix/ https://youtu.be/Ber2pi2C0j0 Problem: Give 2d matrix, list of list. Each row is sorted, and last value of prev row is less than first val of next row. Find a given target, return true or false based on does exist or not. Complexity: O(Log m + Log n) where m and n are rows col Concepts: Binary search on rows. Binary search on the final selected row. \"\"\"","title":"Search a 2D Matrix"},{"location":"Certifications-and-Learning/DSA/neetcode/Subsets/","text":"class Solution: def subsets(self, nums: List[int]) -> List[List[int]]: res = [] subset = [] def dfs(i): if i >= len(nums): res.append(subset.copy()) return # decision to include nums[i] subset.append(nums[i]) dfs(i + 1) # decision NOT to include nums[i] subset.pop() dfs(i + 1) dfs(0) return res \"\"\" https://leetcode.com/problems/subsets/ https://youtu.be/REOH22Xwdkk Problem: Complexity: Concepts: \"\"\"","title":"Subsets"},{"location":"Certifications-and-Learning/DSA/neetcode/Top%20K%20Frequent%20Elements/","text":"class Solution: def topKFrequent(self, nums: List[int], k: int) -> List[int]: count = {} freq = [[] for i in range(len(nums) + 1)] # Create Bucket for n in nums: count[n] = 1 + count.get(n, 0) for n, c in count.items(): freq[c].append(n) # Searching top k res = [] for i in range(len(freq) - 1, 0, -1): # -1 means in reverse, 0 is till first value for n in freq[i]: res.append(n) if len(res) == k: return res \"\"\" https://leetcode.com/problems/top-k-frequent-elements/ We have list of number and integer k Find k most frequent numbers in list. Complexity: O(n) O(n) Concepts: Bucket Sort \"\"\"","title":"Top K Frequent Elements"},{"location":"Certifications-and-Learning/DSA/neetcode/Trapping%20Rain%20Water/","text":"class Solution: def trap(self, height: List[int]) -> int: if not height: return 0 l, r = 0, len(height) - 1 leftMax, rightMax = height[l], height[r] res = 0 while l < r: if leftMax < rightMax: l += 1 leftMax = max(leftMax, height[l]) res += leftMax - height[l] else: r -= 1 rightMax = max(rightMax, height[r]) res += rightMax - height[r] return res \"\"\" https://leetcode.com/problems/trapping-rain-water/ Problem: Integer array, all positive. Each item is value*width where width is 1. Return how much water can be trapped. An integer. Complexity: Concepts: \"\"\"","title":"Trapping Rain Water"},{"location":"Certifications-and-Learning/DSA/neetcode/Two%20Sum%20II/","text":"class Solution: def twoSum(self, numbers: List[int], target: int) -> List[int]: l, r = 0, len(numbers) - 1 while l < r: curSum = numbers[l] + numbers[r] if curSum > target: r -= 1 elif curSum < target: l += 1 else: return [l + 1, r + 1] \"\"\" https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/ Problem: Given an array which is sorted. A target is given. Find two numbers in array which add to target. Condition is, index of first number should be before second number index. Also, list index starts from 1, not 0 in result. Each array has exactly one solution. Same element can not be used twice. Complexity: Concepts: \"\"\"","title":"Two Sum II"},{"location":"Certifications-and-Learning/DSA/neetcode/Two%20Sum/","text":"class Solution: def twoSum(self, nums: List[int], target: int) -> List[int]: prevMap = {} # val -> index for i, n in enumerate(nums): diff = target - n if diff in prevMap: return [prevMap[diff], i] prevMap[n] = i","title":"Two Sum"},{"location":"Certifications-and-Learning/DSA/neetcode/Valid%20Anagram/","text":"class Solution: def isAnagram(self, s: str, t: str) -> bool: if len(s) != len(t): return False countS, countT = {}, {} for i in range(len(s)): countS[s[i]] = 1 + countS.get(s[i], 0) countT[t[i]] = 1 + countT.get(t[i], 0) return countS == countT","title":"Valid Anagram"},{"location":"Certifications-and-Learning/DSA/neetcode/Valid%20Palindrome/","text":"class Solution: def isPalindrome(self, s: str) -> bool: l, r = 0, len(s) - 1 while l < r: # Skipping non alphanumeric while l < r and not self.alphanum(s[l]): l += 1 while l < r and not self.alphanum(s[r]): r -= 1 # Comparing right item with left if s[l].lower() != s[r].lower(): return False # Move pointers left and right l += 1 r -= 1 # If code completes then true return True # Could write own alpha-numeric function def alphanum(self, c): return ( ord(\"A\") <= ord(c) <= ord(\"Z\") or ord(\"a\") <= ord(c) <= ord(\"z\") or ord(\"0\") <= ord(c) <= ord(\"9\") ) \"\"\" https://leetcode.com/problems/valid-palindrome/ Problem: Given a string, check palindrom, meaning reverse is same as string. Ignore case, and consider alphanumeric only. Ignore + ; . etc Complexity: Concepts: ord() is used. isalnum() can be used. not used in solution. isalnum() returns bool if alphanumeric. # Simple solution - But not efficient newStr = \"\" for c in string: if c.isalnum(): newStr += c.lower() return newStr == newStr[::-1] \"\"\"","title":"Valid Palindrome"},{"location":"Certifications-and-Learning/DSA/neetcode/Valid%20Parentheses/","text":"class Solution: def isValid(self, s: str) -> bool: Map = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"} stack = [] for c in s: if c not in Map: stack.append(c) continue if not stack or stack[-1] != Map[c]: return False stack.pop() return not stack \"\"\" https://leetcode.com/problems/valid-parentheses/ In video, solution is different. Problem: {} [] () are given in a string. Check if given string is valid. Complexity: O(n) O(n) Concepts: Make hashmap for pairs. Use stacks. \"\"\"","title":"Valid Parentheses"},{"location":"Certifications-and-Learning/DSA/neetcode/Valid%20Parentheses/#in-video-solution-is-different","text":"Problem: {} [] () are given in a string. Check if given string is valid. Complexity: O(n) O(n) Concepts: Make hashmap for pairs. Use stacks. \"\"\"","title":"In video, solution is different."},{"location":"Certifications-and-Learning/DSA/neetcode/Valid%20Sudoku/","text":"class Solution: def isValidSudoku(self, board: List[List[str]]) -> bool: cols = collections.defaultdict(set) rows = collections.defaultdict(set) squares = collections.defaultdict(set) # key = (r /3, c /3) for r in range(9): for c in range(9): if board[r][c] == \".\": continue if ( board[r][c] in rows[r] or board[r][c] in cols[c] or board[r][c] in squares[(r // 3, c // 3)] ): return False cols[c].add(board[r][c]) rows[r].add(board[r][c]) squares[(r // 3, c // 3)].add(board[r][c]) return True \"\"\" https://leetcode.com/problems/valid-sudoku/ Check if 9x9 is a valid soduku. Complexity: Concepts: three dict, for row, column, and sqaure Two Nested Loops OR conditional \"\"\"","title":"Valid Sudoku"},{"location":"Certifications-and-Learning/DSA/neetcode/Word%20Ladder/","text":"class Solution: def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int: if endWord not in wordList: return 0 nei = collections.defaultdict(list) wordList.append(beginWord) for word in wordList: for j in range(len(word)): pattern = word[:j] + \"*\" + word[j + 1 :] nei[pattern].append(word) visit = set([beginWord]) q = deque([beginWord]) res = 1 while q: for i in range(len(q)): word = q.popleft() if word == endWord: return res for j in range(len(word)): pattern = word[:j] + \"*\" + word[j + 1 :] for neiWord in nei[pattern]: if neiWord not in visit: visit.add(neiWord) q.append(neiWord) res += 1 return 0 \"\"\" https://leetcode.com/problems/word-ladder/ https://youtu.be/h9iTnkgv05E Problem: Complexity: Concepts: \"\"\"","title":"Word Ladder"},{"location":"Certifications-and-Learning/DSA/search/","text":"Search 01-Linear 02-Binary 03-Ternary 04-Jump 05-Exponential","title":"Search"},{"location":"Certifications-and-Learning/DSA/search/#search","text":"01-Linear 02-Binary 03-Ternary 04-Jump 05-Exponential","title":"Search"},{"location":"Certifications-and-Learning/DSA/sorting/","text":"Sorting 01-Bubble - O(n^2) - Stable 02-Selection 03-Insertion - O(n^2) - Stable - Suitable for linked list - use if n<15 04-Merge - O(n log n) - Stable - Suitable for linked list - use if n>=15 05-Quick 06-Counting 07-Bucket Stable means that when sorting is done, the duplicates in list maintain their order of location Eg. [2,3,1,4,5,6,4,8,7] - Sorted to [1,2,3,4,4,5,6,7,8] <- here 1st 4 is on left and 2nd 4 on right. https://youtu.be/ak-pz7tS5DE?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&t=645","title":"Sorting"},{"location":"Certifications-and-Learning/DSA/sorting/#sorting","text":"01-Bubble - O(n^2) - Stable 02-Selection 03-Insertion - O(n^2) - Stable - Suitable for linked list - use if n<15 04-Merge - O(n log n) - Stable - Suitable for linked list - use if n>=15 05-Quick 06-Counting 07-Bucket Stable means that when sorting is done, the duplicates in list maintain their order of location Eg. [2,3,1,4,5,6,4,8,7] - Sorted to [1,2,3,4,4,5,6,7,8] <- here 1st 4 is on left and 2nd 4 on right. https://youtu.be/ak-pz7tS5DE?list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&t=645","title":"Sorting"},{"location":"Certifications-and-Learning/GIT/","text":"Git","title":"Git"},{"location":"Certifications-and-Learning/GIT/#git","text":"","title":"Git"},{"location":"Certifications-and-Learning/OOP/","text":"Objective To put in OOP principles in one place. Comparing all programming languages I learn. Introduction OOP forms the base to the best coding practices and handling large code base. Foundation for Design Patterns Common Terms Classes - Parent, with variables and methods. Constructors - Class contains a root method, which is a blueprint to create basic object. Objects - When class is used to create usable items, called objects. Abstract Class - This can not be instantiated, object can not be made from it. Only child class can extend from it. Method signature and implementation, both possible. Interface - Like abstract class, but this can not have any method implementation. These have only method signatures. extends: use this on interface to create another interface. implements: use this on interface to create a concrete class from interface. Concrete Class - This is an actual class created from abstract class or interface Generic Class - In typeScript Course - https://codewithmosh.com/courses/1779784/lectures/40256281 Coupling - If user class changes, main class breaks and also all other classes are to be re-compiled Interfaces - To address coupling issue, interface is made. A template to create class. In python its called abstract class. Keywords - implements override Static Methods - These can only be accessed from the class level, not object level. These have one memory location. Protocols - Specific in Python I think, not sure, explore Common Practices Define class and using constructors - Basic Accessing Properties and methods - this, self Making properties read-only - Disabling users from changing exposed internal vars. Access Modifiers - Control vars and methods view to user. Private, Protected, Public Getters and Setters - Expose vars and methods to user in controlled manner. Index Signature - Seen in typescript only Creating Static members - Common location in memory. Access by class, not object. Inheritance - extends keyword Method override - Changing class method by object in its own instance. Abstract Method - No body, only signatures and methods Interface - implements keyword Generics - This format -> ClassName . Making reusable classes, interfaces and functions. Decorators - Enhancing classes, methods etc Enums - Defing Constants to be accessed like a list. Pillars of OOP Encapsulation If we need validations in setting a variable given in parent class, so we make private variables in user class, and change them using getter and setter with validations as needed. Abstraction Removing complexity from end user and then creating a parent method, by chaining complex methods and expose parent method to user. Keyword: private public OR __ in python Inheritance Inheriting methods and vars from parent Polymorphism Many forms. Object instance having many forms. Abstract class in JAVA. Keywords - extends and override. Basic skeleton of polymorphism: 1. Make a Parent Class with Methods 2. Make multiple child class from parent using extends 3. Override the methods as needed. 4. Create instance objects from child classes. 5. In the end, you have multiple child, who act differently coz of override BUT create from a single source. Note: See how this is different from interface or abstract class. Sounds the same. Composition When we create class by combining various other classes as needed. UML - Unified Modeling Language UML - Tutorial File Modern Software Design https://www.arjancodes.com/mindset Mastering The Tools Types And Type Hints - Knowing what types and type hints are and how they work in Python is really important. In this lesson I dive into the details of type systems, how things work in Python, and show you best practices so you get the most out of using type hints. Data Structures - A core piece of software design is using data structures correctly. Each data structure has its own pros and cons. Knowing about these is going to help you take better decisions about which data structure to use when. Classes And Data Classes - Though this is not a complete introduction of object-oriented programming, I talk about classes and data classes in detail in this lesson and how they fit into software design. Inheritance, ABCs And Protocols - In the final lesson of this module, you learn about abstraction, which is a core element of software design. I cover the various ways in which you can achieve abstraction in Python to help you choose the best option for your design. Principles The second part of the course presents the 7 Principles Of Modern Software Design. It takes many of the existing design principles and adapts them to the needs of the modern software designer. It goes way beyond object-oriented design by teaching you generic principles that apply to any programming language and paradigm, whether that\u2019s object-oriented, purely procedural, or functional. * Single Responsibility Principle - Each class should do only one thing. * Open Closed Principle - Class should be OPEN for extension and CLOSED for modification. * Change in one class should not affect other classes - Iterator pattern * Favor Composition Over Inheritance - Learn how to approach inheritance in code and use it in a balanced way by looking at several code examples. * High Cohesion - Various techniques for making sure that the code you write has clear responsibilities. * Low Coupling - Learn how to reduce coupling between different areas of your application so that your code is easier to maintain in the future. * Start With The Data - What role does data play in the design process? When should we think about data and data structures in software design? And what is a practical process for modeling the data structures in your software? * Depend On Abstractions - Abstractions such as ABCs and Protocols help reduce dependencies. In this lesson I show you how to use these abstractions effectively. * Separate Creation From Use - You learn different ways of creating objects in a software system, and how to have better control as a software developer over how and when objects are being created. * Keep Things Simple - As a software developer, how do you keep things simple? I talk about different ways to make sure your code stays simple, even if the application itself is complex. Being A Responsible Developer Mixins - You learn what Mixins are, why you need to be very careful with them, and what the much better alternatives are. Dealing With Errors - Any application has to properly deal with errors. Here you learn how error handling works in Python, what the different possibilities are as well as some of the more advanced error handling mechanisms such as context managers. Setting Up A Complex Software Project - Learn about files, folders, modules, packages, absolute and relative imports. Learn how to structure your code properly, and what should generally be in a code repository.","title":"Objective"},{"location":"Certifications-and-Learning/OOP/#objective","text":"To put in OOP principles in one place. Comparing all programming languages I learn.","title":"Objective"},{"location":"Certifications-and-Learning/OOP/#introduction","text":"OOP forms the base to the best coding practices and handling large code base. Foundation for Design Patterns","title":"Introduction"},{"location":"Certifications-and-Learning/OOP/#common-terms","text":"Classes - Parent, with variables and methods. Constructors - Class contains a root method, which is a blueprint to create basic object. Objects - When class is used to create usable items, called objects. Abstract Class - This can not be instantiated, object can not be made from it. Only child class can extend from it. Method signature and implementation, both possible. Interface - Like abstract class, but this can not have any method implementation. These have only method signatures. extends: use this on interface to create another interface. implements: use this on interface to create a concrete class from interface. Concrete Class - This is an actual class created from abstract class or interface Generic Class - In typeScript Course - https://codewithmosh.com/courses/1779784/lectures/40256281 Coupling - If user class changes, main class breaks and also all other classes are to be re-compiled Interfaces - To address coupling issue, interface is made. A template to create class. In python its called abstract class. Keywords - implements override Static Methods - These can only be accessed from the class level, not object level. These have one memory location. Protocols - Specific in Python I think, not sure, explore","title":"Common Terms"},{"location":"Certifications-and-Learning/OOP/#common-practices","text":"Define class and using constructors - Basic Accessing Properties and methods - this, self Making properties read-only - Disabling users from changing exposed internal vars. Access Modifiers - Control vars and methods view to user. Private, Protected, Public Getters and Setters - Expose vars and methods to user in controlled manner. Index Signature - Seen in typescript only Creating Static members - Common location in memory. Access by class, not object. Inheritance - extends keyword Method override - Changing class method by object in its own instance. Abstract Method - No body, only signatures and methods Interface - implements keyword Generics - This format -> ClassName . Making reusable classes, interfaces and functions. Decorators - Enhancing classes, methods etc Enums - Defing Constants to be accessed like a list.","title":"Common Practices"},{"location":"Certifications-and-Learning/OOP/#pillars-of-oop","text":"","title":"Pillars of OOP"},{"location":"Certifications-and-Learning/OOP/#encapsulation","text":"If we need validations in setting a variable given in parent class, so we make private variables in user class, and change them using getter and setter with validations as needed.","title":"Encapsulation"},{"location":"Certifications-and-Learning/OOP/#abstraction","text":"Removing complexity from end user and then creating a parent method, by chaining complex methods and expose parent method to user. Keyword: private public OR __ in python","title":"Abstraction"},{"location":"Certifications-and-Learning/OOP/#inheritance","text":"Inheriting methods and vars from parent","title":"Inheritance"},{"location":"Certifications-and-Learning/OOP/#polymorphism","text":"Many forms. Object instance having many forms. Abstract class in JAVA. Keywords - extends and override. Basic skeleton of polymorphism: 1. Make a Parent Class with Methods 2. Make multiple child class from parent using extends 3. Override the methods as needed. 4. Create instance objects from child classes. 5. In the end, you have multiple child, who act differently coz of override BUT create from a single source. Note: See how this is different from interface or abstract class. Sounds the same.","title":"Polymorphism"},{"location":"Certifications-and-Learning/OOP/#composition","text":"When we create class by combining various other classes as needed.","title":"Composition"},{"location":"Certifications-and-Learning/OOP/#uml-unified-modeling-language","text":"UML - Tutorial File","title":"UML - Unified Modeling Language"},{"location":"Certifications-and-Learning/OOP/#modern-software-design","text":"https://www.arjancodes.com/mindset","title":"Modern Software Design"},{"location":"Certifications-and-Learning/OOP/#mastering-the-tools","text":"Types And Type Hints - Knowing what types and type hints are and how they work in Python is really important. In this lesson I dive into the details of type systems, how things work in Python, and show you best practices so you get the most out of using type hints. Data Structures - A core piece of software design is using data structures correctly. Each data structure has its own pros and cons. Knowing about these is going to help you take better decisions about which data structure to use when. Classes And Data Classes - Though this is not a complete introduction of object-oriented programming, I talk about classes and data classes in detail in this lesson and how they fit into software design. Inheritance, ABCs And Protocols - In the final lesson of this module, you learn about abstraction, which is a core element of software design. I cover the various ways in which you can achieve abstraction in Python to help you choose the best option for your design.","title":"Mastering The Tools"},{"location":"Certifications-and-Learning/OOP/#principles","text":"The second part of the course presents the 7 Principles Of Modern Software Design. It takes many of the existing design principles and adapts them to the needs of the modern software designer. It goes way beyond object-oriented design by teaching you generic principles that apply to any programming language and paradigm, whether that\u2019s object-oriented, purely procedural, or functional. * Single Responsibility Principle - Each class should do only one thing. * Open Closed Principle - Class should be OPEN for extension and CLOSED for modification. * Change in one class should not affect other classes - Iterator pattern * Favor Composition Over Inheritance - Learn how to approach inheritance in code and use it in a balanced way by looking at several code examples. * High Cohesion - Various techniques for making sure that the code you write has clear responsibilities. * Low Coupling - Learn how to reduce coupling between different areas of your application so that your code is easier to maintain in the future. * Start With The Data - What role does data play in the design process? When should we think about data and data structures in software design? And what is a practical process for modeling the data structures in your software? * Depend On Abstractions - Abstractions such as ABCs and Protocols help reduce dependencies. In this lesson I show you how to use these abstractions effectively. * Separate Creation From Use - You learn different ways of creating objects in a software system, and how to have better control as a software developer over how and when objects are being created. * Keep Things Simple - As a software developer, how do you keep things simple? I talk about different ways to make sure your code stays simple, even if the application itself is complex.","title":"Principles"},{"location":"Certifications-and-Learning/OOP/#being-a-responsible-developer","text":"Mixins - You learn what Mixins are, why you need to be very careful with them, and what the much better alternatives are. Dealing With Errors - Any application has to properly deal with errors. Here you learn how error handling works in Python, what the different possibilities are as well as some of the more advanced error handling mechanisms such as context managers. Setting Up A Complex Software Project - Learn about files, folders, modules, packages, absolute and relative imports. Learn how to structure your code properly, and what should generally be in a code repository.","title":"Being A Responsible Developer"},{"location":"Certifications-and-Learning/TDD/","text":"TDD - Test Driven Development Udemy Course - https://www.udemy.com/course/automated-software-testing-with-python/learn/lecture/7736976?start=600#overview Specific to python the above course.","title":"TDD - Test Driven Development"},{"location":"Certifications-and-Learning/TDD/#tdd-test-driven-development","text":"Udemy Course - https://www.udemy.com/course/automated-software-testing-with-python/learn/lecture/7736976?start=600#overview Specific to python the above course.","title":"TDD - Test Driven Development"},{"location":"Certifications-and-Learning/blockchain/","text":"Blockchain wiki Open_Zeppelin Solidity HardHat ERC20 By Patrick","title":"Blockchain wiki"},{"location":"Certifications-and-Learning/blockchain/#blockchain-wiki","text":"Open_Zeppelin Solidity HardHat ERC20 By Patrick","title":"Blockchain wiki"},{"location":"Certifications-and-Learning/blockchain/Blockchain%20Jobs/","text":"Blockchain job links Remote Jobs https://cryptojobslist.com/remote https://www.indeed.com/q-Blockchain-l-Remote-jobs.html?vjk=8a049709b8ad0dc9 https://www.indeed.com/viewjob?jk=8a049709b8ad0dc9&tk=1g2k5jaaqqelj800&from=serp&vjs=3 https://www.indeed.com/viewjob?jk=34650080b8e35000&tk=1g2k5jaaqqelj800&from=serp&vjs=3 https://www.indeed.com/viewjob?jk=95d1bb24c25f9bfa&tk=1g2k5jaaqqelj800&from=serp&vjs=3 https://cryptocurrencyjobs.co/remote/ https://cryptocurrencyjobs.co/engineering/prepo-smart-contract-engineer/ https://cryptocurrencyjobs.co/design/prepo-lead-web3-ui-ux-designer/ https://cryptocurrencyjobs.co/engineering/clubrare-nft-smart-contract-developer/ https://cryptocurrencyjobs.co/engineering/volt-protocol-senior-solidity-engineer/ Blockchain Consultants Top Blockchain Consultant Companies are: Applied Blockchain ( http://appliedblockchain.com ) Parity Technologies ( https://ethcore.io/ ) ConsenSys ( http://consensys.net ) AlphaPoint ( http://www.alphapoint.com/ ) ChainThat ( http://chainthat.com/ ) Chainsmiths ( http://chainsmiths.com ) Ledger Labs ( Ledger Labs - Expert Blockchain Consulting ) Brainbot Technologies ( brainbot technologies ) Experts: Vitalik Buterin - Co-Founder of Ethereum, Co-founder of Bitcoin Magazine. Nick Szabo Andreas M. Antonopoulos - Author of Mastering Bitcoin, first comprehensive book about how it all works. Broke Pierce - Managing Partner at Blockchain Capital & Chairman of Bitcoin Foundation.","title":"Blockchain job links"},{"location":"Certifications-and-Learning/blockchain/Blockchain%20Jobs/#blockchain-job-links","text":"","title":"Blockchain job links"},{"location":"Certifications-and-Learning/blockchain/Blockchain%20Jobs/#remote-jobs","text":"https://cryptojobslist.com/remote https://www.indeed.com/q-Blockchain-l-Remote-jobs.html?vjk=8a049709b8ad0dc9 https://www.indeed.com/viewjob?jk=8a049709b8ad0dc9&tk=1g2k5jaaqqelj800&from=serp&vjs=3 https://www.indeed.com/viewjob?jk=34650080b8e35000&tk=1g2k5jaaqqelj800&from=serp&vjs=3 https://www.indeed.com/viewjob?jk=95d1bb24c25f9bfa&tk=1g2k5jaaqqelj800&from=serp&vjs=3 https://cryptocurrencyjobs.co/remote/ https://cryptocurrencyjobs.co/engineering/prepo-smart-contract-engineer/ https://cryptocurrencyjobs.co/design/prepo-lead-web3-ui-ux-designer/ https://cryptocurrencyjobs.co/engineering/clubrare-nft-smart-contract-developer/ https://cryptocurrencyjobs.co/engineering/volt-protocol-senior-solidity-engineer/","title":"Remote Jobs"},{"location":"Certifications-and-Learning/blockchain/Blockchain%20Jobs/#blockchain-consultants","text":"Top Blockchain Consultant Companies are: Applied Blockchain ( http://appliedblockchain.com ) Parity Technologies ( https://ethcore.io/ ) ConsenSys ( http://consensys.net ) AlphaPoint ( http://www.alphapoint.com/ ) ChainThat ( http://chainthat.com/ ) Chainsmiths ( http://chainsmiths.com ) Ledger Labs ( Ledger Labs - Expert Blockchain Consulting ) Brainbot Technologies ( brainbot technologies ) Experts: Vitalik Buterin - Co-Founder of Ethereum, Co-founder of Bitcoin Magazine. Nick Szabo Andreas M. Antonopoulos - Author of Mastering Bitcoin, first comprehensive book about how it all works. Broke Pierce - Managing Partner at Blockchain Capital & Chairman of Bitcoin Foundation.","title":"Blockchain Consultants"},{"location":"Certifications-and-Learning/blockchain/Blockchain/","text":"Tokenisation When we tokenise under #STO, what are the requirements to be get under regulations of different countires. What does getting under regulations mean. How exactly STO different from #ICO When we speak about real world asset backed tokens, how does the price of that token remain in sync with the real world prices. Example, we have USDT , which is backed by USD; in this case we have world markets (which have large volumes and are recognised) to refer our prices and set a smart contract to remain in sync with the real asset. Second example, in case of #KlimaDAO , which it is linked to Verra Verified Carbon Unit (VCU) https://verra.org/ (via https://toucan.earth/) which is kind of a standard, from which prices can be referred and smart contracts can do the processing of burning and creation to keep price in line with real asset. How can a real estate property, who's price can not be verified by a recognised central agency or by a market with high volumes like a forex or stock market, how does the token price remain in sync with the real price; consider low volumes, how does the volitily controlled. If we do not list tokens on a secondary market, and basically control the price of asset, how to we ensure our investors that our prices are actual and without bias. If we basically raise money in fiat currencies, and only provide tokens, and do not raise money in crypto, how do we convince the investors that we are legit. For example, all cryptos can be exchanged and converted into other crypto currencies; if we raise investments in terms of fiat, and do not list our token on any DEX, and nor treat them as standard NFT (while we do upload the records on chain); how will the mechanism work. Metaverse #metaverse We need to generate a quantitative way measure the quality of a land on any metaverse project; like a check list with weighted averages, which when applied to any piece of space in metaverse, gives out a scrore. We need to work on this checklist. We also need a qualitative way to select the metaverse platform itself, which vary widely in terms of audiance, usage and purpose. Example, sandbox allowes creating your own games and provide the tools, while decentraland is more of a minecraft style playing game. Before finalising the metaverse platform, we need to understand our business motive, since the developers for each platforms are different and comes in different rates, platform like sandbox might need a voxel 3d artist since they ahve there own proprietary platform to make characters, game developers etc while decentraland we need a normal 3d artist since it allows a lot more types of experiances to be created. Since, tokens can be backed by a real estate asset, how can we create a digital asset on a metaverse and backit up with real world asset. (If we wish to do it). Example, I will to make exact digital replica of our mall in metaverse, and provide each shop on the platform, and each shops have NFT to be sold, and I wish to link the price of those NFTs with a real world asset, the NFTs can be used to exchange for real goods in the shop (similar to stockx has done with nike sneakers https://stockx.com/ ). We provide this facility to all our shops for free as welcome gift. Overall Blockchain startups and products are centered around communities and social media. We need a very very strong media plan and team for community building strategy and procedures. 1. Need/ will be good to have our 1. Social Handles 1. #Twitter (important) 2. FB/ Insta (Not neccesarry) 3. #Discord (most important) 4. Telegram/ Whatsapp discussion groups 3. Token or NFTs, or both for people to join us and relate with us 2. Need to interact with other handles on 1. Twitter (very important, to keep connected with the community with our plans and actions and keeping up the buzz and energy) 2. Discord (most important, all new ideas and news come from here) 3. Telegrama and Whatsapp 3. Digital Participation 1. Website with roadmaps 2. Interviews with crypto channels on youtube etc 3. Possibly a DAO, if needed or is our plans take us towards it 4. Participate and interact with other product pages and community regularly 5. Contribute wherever possible 6. Connection and collaborations with crypto and blockchain related blogs/ websites/ news groups to regularly post our comments 7. Ensure healthy interactions on all platforms, we should not fake anything","title":"Tokenisation"},{"location":"Certifications-and-Learning/blockchain/Blockchain/#tokenisation","text":"When we tokenise under #STO, what are the requirements to be get under regulations of different countires. What does getting under regulations mean. How exactly STO different from #ICO When we speak about real world asset backed tokens, how does the price of that token remain in sync with the real world prices. Example, we have USDT , which is backed by USD; in this case we have world markets (which have large volumes and are recognised) to refer our prices and set a smart contract to remain in sync with the real asset. Second example, in case of #KlimaDAO , which it is linked to Verra Verified Carbon Unit (VCU) https://verra.org/ (via https://toucan.earth/) which is kind of a standard, from which prices can be referred and smart contracts can do the processing of burning and creation to keep price in line with real asset. How can a real estate property, who's price can not be verified by a recognised central agency or by a market with high volumes like a forex or stock market, how does the token price remain in sync with the real price; consider low volumes, how does the volitily controlled. If we do not list tokens on a secondary market, and basically control the price of asset, how to we ensure our investors that our prices are actual and without bias. If we basically raise money in fiat currencies, and only provide tokens, and do not raise money in crypto, how do we convince the investors that we are legit. For example, all cryptos can be exchanged and converted into other crypto currencies; if we raise investments in terms of fiat, and do not list our token on any DEX, and nor treat them as standard NFT (while we do upload the records on chain); how will the mechanism work.","title":"Tokenisation"},{"location":"Certifications-and-Learning/blockchain/Blockchain/#metaverse-metaverse","text":"We need to generate a quantitative way measure the quality of a land on any metaverse project; like a check list with weighted averages, which when applied to any piece of space in metaverse, gives out a scrore. We need to work on this checklist. We also need a qualitative way to select the metaverse platform itself, which vary widely in terms of audiance, usage and purpose. Example, sandbox allowes creating your own games and provide the tools, while decentraland is more of a minecraft style playing game. Before finalising the metaverse platform, we need to understand our business motive, since the developers for each platforms are different and comes in different rates, platform like sandbox might need a voxel 3d artist since they ahve there own proprietary platform to make characters, game developers etc while decentraland we need a normal 3d artist since it allows a lot more types of experiances to be created. Since, tokens can be backed by a real estate asset, how can we create a digital asset on a metaverse and backit up with real world asset. (If we wish to do it). Example, I will to make exact digital replica of our mall in metaverse, and provide each shop on the platform, and each shops have NFT to be sold, and I wish to link the price of those NFTs with a real world asset, the NFTs can be used to exchange for real goods in the shop (similar to stockx has done with nike sneakers https://stockx.com/ ). We provide this facility to all our shops for free as welcome gift.","title":"Metaverse #metaverse"},{"location":"Certifications-and-Learning/blockchain/Blockchain/#overall","text":"Blockchain startups and products are centered around communities and social media. We need a very very strong media plan and team for community building strategy and procedures. 1. Need/ will be good to have our 1. Social Handles 1. #Twitter (important) 2. FB/ Insta (Not neccesarry) 3. #Discord (most important) 4. Telegram/ Whatsapp discussion groups 3. Token or NFTs, or both for people to join us and relate with us 2. Need to interact with other handles on 1. Twitter (very important, to keep connected with the community with our plans and actions and keeping up the buzz and energy) 2. Discord (most important, all new ideas and news come from here) 3. Telegrama and Whatsapp 3. Digital Participation 1. Website with roadmaps 2. Interviews with crypto channels on youtube etc 3. Possibly a DAO, if needed or is our plans take us towards it 4. Participate and interact with other product pages and community regularly 5. Contribute wherever possible 6. Connection and collaborations with crypto and blockchain related blogs/ websites/ news groups to regularly post our comments 7. Ensure healthy interactions on all platforms, we should not fake anything","title":"Overall"},{"location":"Certifications-and-Learning/blockchain/Defi/","text":"Defi Related https://www.convexfinance.com/stake - on curve finance booster https://yetifinance.co/ - avalaunch https://platypus.finance/ https://vectorfinance.io/#/stake - on platypus finance https://stargate.finance/pool https://classic.aave.com/#/ -- Aave bhai aavee https://furucombo.app/ --multi step flash loans etc https://yearn.finance/#/portfolio https://oasis.app/ -- maker dao https://app.compound.finance/ -- compound finance https://www.arrakis.finance/ -- This is on top of uniswap i think, matic based https://quickswap.exchange/#/quick -- for liquidity mining https://app.thorswap.finance/swap --thorswap https://www.ankr.com/earn/stake/ -- ankr finance https://app.grim.finance/ -- for fantom http://worthacoin.com/learn-all-about-seigniorage --Article to how things are pegged backed https://docs.chain.link/docs/make-a-http-get-request/ -- Using oracle to fetch any external data to solidy smart contract","title":"Defi Related"},{"location":"Certifications-and-Learning/blockchain/Defi/#defi-related","text":"https://www.convexfinance.com/stake - on curve finance booster https://yetifinance.co/ - avalaunch https://platypus.finance/ https://vectorfinance.io/#/stake - on platypus finance https://stargate.finance/pool https://classic.aave.com/#/ -- Aave bhai aavee https://furucombo.app/ --multi step flash loans etc https://yearn.finance/#/portfolio https://oasis.app/ -- maker dao https://app.compound.finance/ -- compound finance https://www.arrakis.finance/ -- This is on top of uniswap i think, matic based https://quickswap.exchange/#/quick -- for liquidity mining https://app.thorswap.finance/swap --thorswap https://www.ankr.com/earn/stake/ -- ankr finance https://app.grim.finance/ -- for fantom http://worthacoin.com/learn-all-about-seigniorage --Article to how things are pegged backed https://docs.chain.link/docs/make-a-http-get-request/ -- Using oracle to fetch any external data to solidy smart contract","title":"Defi Related"},{"location":"Certifications-and-Learning/blockchain/ERC1155/","text":"Contents ERC1155 Links Multi Token Standard Batch Operations Constructing an ERC1155 Token Contract Sending Tokens to Contracts Preset ERC1155 contract ERC1155 ERC1155 is a novel token standard that aims to take the best from previous standards to create a fungibility-agnostic and gas-efficient token contract. ERC1155 draws ideas from all of ERC20, ERC721, and ERC777. Links Theory --> https://docs.openzeppelin.com/contracts/4.x/erc1155 ERC-1155 Metadata URI JSON Schema --> https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md#erc-1155-metadata-uri-json-schema Multi Token Standard The distinctive feature of ERC1155 is that it uses a single smart contract to represent multiple tokens at once. This is why its balanceOf function differs from ERC20\u2019s and ERC777\u2019s: it has an additional id argument for the identifier of the token that you want to query the balance of. Batch Operations Because all state is held in a single contract, it is possible to operate over multiple tokens in a single transaction very efficiently. The standard provides two functions, balanceOfBatch and safeBatchTransferFrom, that make querying multiple balances and transferring multiple tokens simpler and less gas-intensive. In the spirit of the standard, we\u2019ve also included batch operations in the non-standard functions, such as _mintBatch. Constructing an ERC1155 Token Contract We\u2019ll use ERC1155 to track multiple items in our game, which will each have their own unique attributes. We mint all items to the deployer of the contract, which we can later transfer to players. Players are free to keep their tokens or trade them with other people as they see fit, as they would any other asset on the blockchain! For simplicity we will mint all items in the constructor but you could add minting functionality to the contract to mint on demand to players. // contracts/GameItems.sol // SPDX-License-Identifier: MIT pragma solidity ^0.8.0; import \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\"; contract GameItems is ERC1155 { uint256 public constant GOLD = 0; uint256 public constant SILVER = 1; uint256 public constant THORS_HAMMER = 2; uint256 public constant SWORD = 3; uint256 public constant SHIELD = 4; constructor() ERC1155(\"https://game.example/api/item/{id}.json\") { _mint(msg.sender, GOLD, 10**18, \"\"); _mint(msg.sender, SILVER, 10**27, \"\"); _mint(msg.sender, THORS_HAMMER, 1, \"\"); _mint(msg.sender, SWORD, 10**9, \"\"); _mint(msg.sender, SHIELD, 10**9, \"\"); } } Note that for our Game Items, Gold is a fungible token whilst Thor\u2019s Hammer is a non-fungible token as we minted only one. The ERC1155 contract includes the optional extension IERC1155MetadataURI. That\u2019s where the uri function comes from: we use it to retrieve the metadata uri. Also note that, unlike ERC20, ERC1155 lacks a decimals field, since each token is distinct and cannot be partitioned. Once deployed, we will be able to query the deployer\u2019s balance: > gameItems.balanceOf(deployerAddress,3) 1000000000 We can transfer items to player accounts: > gameItems.safeTransferFrom(deployerAddress, playerAddress, 2, 1, \"0x0\") > gameItems.balanceOf(playerAddress, 2) 1 > gameItems.balanceOf(deployerAddress, 2) 0 We can also batch transfer items to player accounts and get the balance of batches: > gameItems.safeBatchTransferFrom(deployerAddress, playerAddress, [0,1,3,4], [50,100,1,1], \"0x0\") > gameItems.balanceOfBatch([playerAddress,playerAddress,playerAddress,playerAddress,playerAddress], [0,1,2,3,4]) [50,100,1,1,1] The metadata uri can be obtained: > gameItems.uri(2) \"https://game.example/api/item/{id}.json\" Sending Tokens to Contracts A key difference when using safeTransferFrom is that token transfers to other contracts may revert with the following message: ERC1155: transfer to non ERC1155Receiver implementer In order for our contract to receive ERC1155 tokens we can inherit from the convenience contract ERC1155Holder which handles the registering for us. Though we need to remember to implement functionality to allow tokens to be transferred out of our contract: // contracts/MyContract.sol // SPDX-License-Identifier: MIT pragma solidity ^0.8.0; import \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\"; contract MyContract is ERC1155Holder { } We can also implement more complex scenarios using the onERC1155Received and onERC1155BatchReceived functions. Preset ERC1155 contract A preset ERC1155 is available, ERC1155PresetMinterPauser. It is preset to allow for token minting (create) - including batch minting, stop all token transfers (pause) and allow holders to burn (destroy) their tokens. The contract uses Access Control to control access to the minting and pausing functionality. The account that deploys the contract will be granted the minter and pauser roles, as well as the default admin role. This contract is ready to deploy without having to write any Solidity code. It can be used as-is for quick prototyping and testing, but is also suitable for production environments.","title":"Contents"},{"location":"Certifications-and-Learning/blockchain/ERC1155/#contents","text":"ERC1155 Links Multi Token Standard Batch Operations Constructing an ERC1155 Token Contract Sending Tokens to Contracts Preset ERC1155 contract","title":"Contents"},{"location":"Certifications-and-Learning/blockchain/ERC1155/#erc1155","text":"ERC1155 is a novel token standard that aims to take the best from previous standards to create a fungibility-agnostic and gas-efficient token contract. ERC1155 draws ideas from all of ERC20, ERC721, and ERC777.","title":"ERC1155"},{"location":"Certifications-and-Learning/blockchain/ERC1155/#links","text":"Theory --> https://docs.openzeppelin.com/contracts/4.x/erc1155 ERC-1155 Metadata URI JSON Schema --> https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md#erc-1155-metadata-uri-json-schema","title":"Links"},{"location":"Certifications-and-Learning/blockchain/ERC1155/#multi-token-standard","text":"The distinctive feature of ERC1155 is that it uses a single smart contract to represent multiple tokens at once. This is why its balanceOf function differs from ERC20\u2019s and ERC777\u2019s: it has an additional id argument for the identifier of the token that you want to query the balance of.","title":"Multi Token Standard"},{"location":"Certifications-and-Learning/blockchain/ERC1155/#batch-operations","text":"Because all state is held in a single contract, it is possible to operate over multiple tokens in a single transaction very efficiently. The standard provides two functions, balanceOfBatch and safeBatchTransferFrom, that make querying multiple balances and transferring multiple tokens simpler and less gas-intensive. In the spirit of the standard, we\u2019ve also included batch operations in the non-standard functions, such as _mintBatch.","title":"Batch Operations"},{"location":"Certifications-and-Learning/blockchain/ERC1155/#constructing-an-erc1155-token-contract","text":"We\u2019ll use ERC1155 to track multiple items in our game, which will each have their own unique attributes. We mint all items to the deployer of the contract, which we can later transfer to players. Players are free to keep their tokens or trade them with other people as they see fit, as they would any other asset on the blockchain! For simplicity we will mint all items in the constructor but you could add minting functionality to the contract to mint on demand to players. // contracts/GameItems.sol // SPDX-License-Identifier: MIT pragma solidity ^0.8.0; import \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\"; contract GameItems is ERC1155 { uint256 public constant GOLD = 0; uint256 public constant SILVER = 1; uint256 public constant THORS_HAMMER = 2; uint256 public constant SWORD = 3; uint256 public constant SHIELD = 4; constructor() ERC1155(\"https://game.example/api/item/{id}.json\") { _mint(msg.sender, GOLD, 10**18, \"\"); _mint(msg.sender, SILVER, 10**27, \"\"); _mint(msg.sender, THORS_HAMMER, 1, \"\"); _mint(msg.sender, SWORD, 10**9, \"\"); _mint(msg.sender, SHIELD, 10**9, \"\"); } } Note that for our Game Items, Gold is a fungible token whilst Thor\u2019s Hammer is a non-fungible token as we minted only one. The ERC1155 contract includes the optional extension IERC1155MetadataURI. That\u2019s where the uri function comes from: we use it to retrieve the metadata uri. Also note that, unlike ERC20, ERC1155 lacks a decimals field, since each token is distinct and cannot be partitioned. Once deployed, we will be able to query the deployer\u2019s balance: > gameItems.balanceOf(deployerAddress,3) 1000000000 We can transfer items to player accounts: > gameItems.safeTransferFrom(deployerAddress, playerAddress, 2, 1, \"0x0\") > gameItems.balanceOf(playerAddress, 2) 1 > gameItems.balanceOf(deployerAddress, 2) 0 We can also batch transfer items to player accounts and get the balance of batches: > gameItems.safeBatchTransferFrom(deployerAddress, playerAddress, [0,1,3,4], [50,100,1,1], \"0x0\") > gameItems.balanceOfBatch([playerAddress,playerAddress,playerAddress,playerAddress,playerAddress], [0,1,2,3,4]) [50,100,1,1,1] The metadata uri can be obtained: > gameItems.uri(2) \"https://game.example/api/item/{id}.json\"","title":"Constructing an ERC1155 Token Contract"},{"location":"Certifications-and-Learning/blockchain/ERC1155/#sending-tokens-to-contracts","text":"A key difference when using safeTransferFrom is that token transfers to other contracts may revert with the following message: ERC1155: transfer to non ERC1155Receiver implementer In order for our contract to receive ERC1155 tokens we can inherit from the convenience contract ERC1155Holder which handles the registering for us. Though we need to remember to implement functionality to allow tokens to be transferred out of our contract: // contracts/MyContract.sol // SPDX-License-Identifier: MIT pragma solidity ^0.8.0; import \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\"; contract MyContract is ERC1155Holder { } We can also implement more complex scenarios using the onERC1155Received and onERC1155BatchReceived functions.","title":"Sending Tokens to Contracts"},{"location":"Certifications-and-Learning/blockchain/ERC1155/#preset-erc1155-contract","text":"A preset ERC1155 is available, ERC1155PresetMinterPauser. It is preset to allow for token minting (create) - including batch minting, stop all token transfers (pause) and allow holders to burn (destroy) their tokens. The contract uses Access Control to control access to the minting and pausing functionality. The account that deploys the contract will be granted the minter and pauser roles, as well as the default admin role. This contract is ready to deploy without having to write any Solidity code. It can be used as-is for quick prototyping and testing, but is also suitable for production environments.","title":"Preset ERC1155 contract"},{"location":"Certifications-and-Learning/blockchain/ERC20-By-Patrick/","text":"ERC 20 by Patrick Collins Video Link Github Link","title":"ERC 20 by Patrick Collins"},{"location":"Certifications-and-Learning/blockchain/ERC20-By-Patrick/#erc-20-by-patrick-collins","text":"Video Link Github Link","title":"ERC 20 by Patrick Collins"},{"location":"Certifications-and-Learning/blockchain/ERC20/","text":"Contents ERC20 Links Theory Constructing an ERC20 Token Contract A Note on decimals Preset ERC20 contract Creating ERC20 Supply Fixed Supply Rewarding Miners Modularizing the Mechanism Automating the Reward ERC20 Links Theory --> https://docs.openzeppelin.com/contracts/4.x/erc20 Supply --> https://docs.openzeppelin.com/contracts/4.x/erc20-supply Theory An ERC20 token contract keeps track of fungible tokens: any one token is exactly equal to any other token; no tokens have special rights or behavior associated with them. This makes ERC20 tokens useful for things like a medium of exchange currency, voting rights, staking, and more. Constructing an ERC20 Token Contract Using Contracts, we can easily create our own ERC20 token contract, which will be used to track Gold (GLD), an internal currency in a hypothetical game. Here\u2019s what our GLD token might look like. // contracts/GLDToken.sol // SPDX-License-Identifier: MIT pragma solidity ^0.8.0; import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\"; contract GLDToken is ERC20 { constructor(uint256 initialSupply) ERC20(\"Gold\", \"GLD\") { _mint(msg.sender, initialSupply); } } That\u2019s it! Once deployed, we will be able to query the deployer\u2019s balance: ```hardhat ethers truffle GLDToken.balanceOf(deployerAddress) 1000000000000000000000 We can also transfer these tokens to other accounts: GLDToken.transfer(otherAddress, 300000000000000000000) GLDToken.balanceOf(otherAddress) 300000000000000000000 GLDToken.balanceOf(deployerAddress) 700000000000000000000 ### A Note on decimals Often, you\u2019ll want to be able to divide your tokens into arbitrary amounts: say, if you own 5 GLD, you may want to send 1.5 GLD to a friend, and keep 3.5 GLD to yourself. Unfortunately, Solidity and the EVM do not support this behavior: only integer (whole) numbers can be used, which poses an issue. You may send 1 or 2 tokens, but not 1.5. How can this be achieved? It\u2019s actually very simple: a token contract can use larger integer values, so that a balance of 50 will represent 5 GLD, a transfer of 15 will correspond to 1.5 GLD being sent, and so on. It is important to understand that decimals is only used for display purposes. All arithmetic inside the contract is still performed on integers, and it is the different user interfaces (wallets, exchanges, etc.) that must adjust the displayed values according to decimals. The total token supply and balance of each account are not specified in GLD: you need to divide by 10 ** decimals to get the actual GLD amount. You\u2019ll probably want to use a decimals value of 18, just like Ether and most ERC20 token contracts in use, unless you have a very special reason not to. When minting tokens or transferring them around, you will be actually sending the number num GLD * (10 ** decimals). ```solidity function decimals() public view virtual override returns (uint8) { return 16; transfer(recipient, 5 * (10 ** 18)); } Preset ERC20 contract A preset ERC20 is available, ERC20PresetMinterPauser. It is preset to allow for token minting (create), stop all token transfers (pause) and allow holders to burn (destroy) their tokens. The contract uses Access Control to control access to the minting and pausing functionality. The account that deploys the contract will be granted the minter and pauser roles, as well as the default admin role. This contract is ready to deploy without having to write any Solidity code. It can be used as-is for quick prototyping and testing, but is also suitable for production environments. Creating ERC20 Supply Fixed Supply Use Contracts v2 contract ERC20FixedSupply is ERC20 { constructor() ERC20(\"Fixed\", \"FIX\") { _mint(msg.sender, 1000); } } Earlier Contracts v1 was used but had bug, example below ```solidity - bug, dont use this contract ERC20FixedSupply is ERC20 { constructor() { totalSupply += 1000; balances[msg.sender] += 1000; } } Encapsulating state like this makes it safer to extend contracts. For instance, in the first example we had to manually keep the totalSupply in sync with the modified balances, which is easy to forget. In fact, we omitted something else that is also easily forgotten: the Transfer event that is required by the standard, and which is relied on by some clients. The second example does not have this bug, because the internal _mint function takes care of it. ### Rewarding Miners The internal _mint function is the key building block that allows us to write ERC20 extensions that implement a supply mechanism. The mechanism we will implement is a token reward for the miners that produce Ethereum blocks. In Solidity we can access the address of the current block\u2019s miner in the global variable block.coinbase. We will mint a token reward to this address whenever someone calls the function mintMinerReward() on our token. The mechanism may sound silly, but you never know what kind of dynamic this might result in, and it\u2019s worth analyzing and experimenting with! ```solidity contract ERC20WithMinerReward is ERC20 { constructor() ERC20(\"Reward\", \"RWD\") {} function mintMinerReward() public { _mint(block.coinbase, 1000); } } Modularizing the Mechanism There is one supply mechanism already included in Contracts: ERC20PresetMinterPauser. This is a generic mechanism in which a set of accounts is assigned the minter role, granting them the permission to call a mint function, an external version of _mint. This can be used for centralized minting, where an externally owned account (i.e. someone with a pair of cryptographic keys) decides how much supply to create and for whom. There are very legitimate use cases for this mechanism, such as traditional asset-backed stablecoins. The accounts with the minter role don\u2019t need to be externally owned, though, and can just as well be smart contracts that implement a trustless mechanism. We can in fact implement the same behavior as the previous section. contract MinerRewardMinter { ERC20PresetMinterPauser _token; constructor(ERC20PresetMinterPauser token) { _token = token; } function mintMinerReward() public { _token.mint(block.coinbase, 1000); } } This contract, when initialized with an ERC20PresetMinterPauser instance, and granted the minter role for that contract, will result in exactly the same behavior implemented in the previous section. What is interesting about using ERC20PresetMinterPauser is that we can easily combine multiple supply mechanisms by assigning the role to multiple contracts, and moreover that we can do this dynamically. Automating the Reward So far our supply mechanisms were triggered manually, but ERC20 also allows us to extend the core functionality of the token through the _beforeTokenTransfer hook (see Using Hooks). Adding to the supply mechanism from previous sections, we can use this hook to mint a miner reward for every token transfer that is included in the blockchain. contract ERC20WithAutoMinerReward is ERC20 { constructor() ERC20(\"Reward\", \"RWD\") {} function _mintMinerReward() internal { _mint(block.coinbase, 1000); } function _beforeTokenTransfer(address from, address to, uint256 value) internal virtual override { if (!(from == address(0) && to == block.coinbase)) { _mintMinerReward(); } super._beforeTokenTransfer(from, to, value); } }","title":"Contents"},{"location":"Certifications-and-Learning/blockchain/ERC20/#contents","text":"ERC20 Links Theory Constructing an ERC20 Token Contract A Note on decimals Preset ERC20 contract Creating ERC20 Supply Fixed Supply Rewarding Miners Modularizing the Mechanism Automating the Reward","title":"Contents"},{"location":"Certifications-and-Learning/blockchain/ERC20/#erc20","text":"","title":"ERC20"},{"location":"Certifications-and-Learning/blockchain/ERC20/#links","text":"Theory --> https://docs.openzeppelin.com/contracts/4.x/erc20 Supply --> https://docs.openzeppelin.com/contracts/4.x/erc20-supply","title":"Links"},{"location":"Certifications-and-Learning/blockchain/ERC20/#theory","text":"An ERC20 token contract keeps track of fungible tokens: any one token is exactly equal to any other token; no tokens have special rights or behavior associated with them. This makes ERC20 tokens useful for things like a medium of exchange currency, voting rights, staking, and more.","title":"Theory"},{"location":"Certifications-and-Learning/blockchain/ERC20/#constructing-an-erc20-token-contract","text":"Using Contracts, we can easily create our own ERC20 token contract, which will be used to track Gold (GLD), an internal currency in a hypothetical game. Here\u2019s what our GLD token might look like. // contracts/GLDToken.sol // SPDX-License-Identifier: MIT pragma solidity ^0.8.0; import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\"; contract GLDToken is ERC20 { constructor(uint256 initialSupply) ERC20(\"Gold\", \"GLD\") { _mint(msg.sender, initialSupply); } } That\u2019s it! Once deployed, we will be able to query the deployer\u2019s balance: ```hardhat ethers truffle GLDToken.balanceOf(deployerAddress) 1000000000000000000000","title":"Constructing an ERC20 Token Contract"},{"location":"Certifications-and-Learning/blockchain/ERC20/#we-can-also-transfer-these-tokens-to-other-accounts","text":"GLDToken.transfer(otherAddress, 300000000000000000000) GLDToken.balanceOf(otherAddress) 300000000000000000000 GLDToken.balanceOf(deployerAddress) 700000000000000000000 ### A Note on decimals Often, you\u2019ll want to be able to divide your tokens into arbitrary amounts: say, if you own 5 GLD, you may want to send 1.5 GLD to a friend, and keep 3.5 GLD to yourself. Unfortunately, Solidity and the EVM do not support this behavior: only integer (whole) numbers can be used, which poses an issue. You may send 1 or 2 tokens, but not 1.5. How can this be achieved? It\u2019s actually very simple: a token contract can use larger integer values, so that a balance of 50 will represent 5 GLD, a transfer of 15 will correspond to 1.5 GLD being sent, and so on. It is important to understand that decimals is only used for display purposes. All arithmetic inside the contract is still performed on integers, and it is the different user interfaces (wallets, exchanges, etc.) that must adjust the displayed values according to decimals. The total token supply and balance of each account are not specified in GLD: you need to divide by 10 ** decimals to get the actual GLD amount. You\u2019ll probably want to use a decimals value of 18, just like Ether and most ERC20 token contracts in use, unless you have a very special reason not to. When minting tokens or transferring them around, you will be actually sending the number num GLD * (10 ** decimals). ```solidity function decimals() public view virtual override returns (uint8) { return 16; transfer(recipient, 5 * (10 ** 18)); }","title":"We can also transfer these tokens to other accounts:"},{"location":"Certifications-and-Learning/blockchain/ERC20/#preset-erc20-contract","text":"A preset ERC20 is available, ERC20PresetMinterPauser. It is preset to allow for token minting (create), stop all token transfers (pause) and allow holders to burn (destroy) their tokens. The contract uses Access Control to control access to the minting and pausing functionality. The account that deploys the contract will be granted the minter and pauser roles, as well as the default admin role. This contract is ready to deploy without having to write any Solidity code. It can be used as-is for quick prototyping and testing, but is also suitable for production environments.","title":"Preset ERC20 contract"},{"location":"Certifications-and-Learning/blockchain/ERC20/#creating-erc20-supply","text":"","title":"Creating ERC20 Supply"},{"location":"Certifications-and-Learning/blockchain/ERC20/#fixed-supply","text":"Use Contracts v2 contract ERC20FixedSupply is ERC20 { constructor() ERC20(\"Fixed\", \"FIX\") { _mint(msg.sender, 1000); } } Earlier Contracts v1 was used but had bug, example below ```solidity - bug, dont use this contract ERC20FixedSupply is ERC20 { constructor() { totalSupply += 1000; balances[msg.sender] += 1000; } } Encapsulating state like this makes it safer to extend contracts. For instance, in the first example we had to manually keep the totalSupply in sync with the modified balances, which is easy to forget. In fact, we omitted something else that is also easily forgotten: the Transfer event that is required by the standard, and which is relied on by some clients. The second example does not have this bug, because the internal _mint function takes care of it. ### Rewarding Miners The internal _mint function is the key building block that allows us to write ERC20 extensions that implement a supply mechanism. The mechanism we will implement is a token reward for the miners that produce Ethereum blocks. In Solidity we can access the address of the current block\u2019s miner in the global variable block.coinbase. We will mint a token reward to this address whenever someone calls the function mintMinerReward() on our token. The mechanism may sound silly, but you never know what kind of dynamic this might result in, and it\u2019s worth analyzing and experimenting with! ```solidity contract ERC20WithMinerReward is ERC20 { constructor() ERC20(\"Reward\", \"RWD\") {} function mintMinerReward() public { _mint(block.coinbase, 1000); } }","title":"Fixed Supply"},{"location":"Certifications-and-Learning/blockchain/ERC20/#modularizing-the-mechanism","text":"There is one supply mechanism already included in Contracts: ERC20PresetMinterPauser. This is a generic mechanism in which a set of accounts is assigned the minter role, granting them the permission to call a mint function, an external version of _mint. This can be used for centralized minting, where an externally owned account (i.e. someone with a pair of cryptographic keys) decides how much supply to create and for whom. There are very legitimate use cases for this mechanism, such as traditional asset-backed stablecoins. The accounts with the minter role don\u2019t need to be externally owned, though, and can just as well be smart contracts that implement a trustless mechanism. We can in fact implement the same behavior as the previous section. contract MinerRewardMinter { ERC20PresetMinterPauser _token; constructor(ERC20PresetMinterPauser token) { _token = token; } function mintMinerReward() public { _token.mint(block.coinbase, 1000); } } This contract, when initialized with an ERC20PresetMinterPauser instance, and granted the minter role for that contract, will result in exactly the same behavior implemented in the previous section. What is interesting about using ERC20PresetMinterPauser is that we can easily combine multiple supply mechanisms by assigning the role to multiple contracts, and moreover that we can do this dynamically.","title":"Modularizing the Mechanism"},{"location":"Certifications-and-Learning/blockchain/ERC20/#automating-the-reward","text":"So far our supply mechanisms were triggered manually, but ERC20 also allows us to extend the core functionality of the token through the _beforeTokenTransfer hook (see Using Hooks). Adding to the supply mechanism from previous sections, we can use this hook to mint a miner reward for every token transfer that is included in the blockchain. contract ERC20WithAutoMinerReward is ERC20 { constructor() ERC20(\"Reward\", \"RWD\") {} function _mintMinerReward() internal { _mint(block.coinbase, 1000); } function _beforeTokenTransfer(address from, address to, uint256 value) internal virtual override { if (!(from == address(0) && to == block.coinbase)) { _mintMinerReward(); } super._beforeTokenTransfer(from, to, value); } }","title":"Automating the Reward"},{"location":"Certifications-and-Learning/blockchain/ERC721/","text":"Contents ERC721 Links Constructing an ERC721 Token Contract ERC721 ERC721 is a standard for representing ownership of non-fungible tokens, that is, where each token is unique. Links Theory --> https://docs.openzeppelin.com/contracts/4.x/erc721 Standard --> https://eips.ethereum.org/EIPS/eip-721 Constructing an ERC721 Token Contract We\u2019ll use ERC721 to track items in our game, which will each have their own unique attributes. Whenever one is to be awarded to a player, it will be minted and sent to them. Players are free to keep their token or trade it with other people as they see fit, as they would any other asset on the blockchain! Please note any account can call awardItem to mint items. To restrict what accounts can mint items we can add Access Control. // contracts/GameItem.sol // SPDX-License-Identifier: MIT pragma solidity ^0.8.0; import \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\"; import \"@openzeppelin/contracts/utils/Counters.sol\"; contract GameItem is ERC721URIStorage { using Counters for Counters.Counter; Counters.Counter private _tokenIds; constructor() ERC721(\"GameItem\", \"ITM\") {} function awardItem(address player, string memory tokenURI) public returns (uint256) { uint256 newItemId = _tokenIds.current(); _mint(player, newItemId); _setTokenURI(newItemId, tokenURI); _tokenIds.increment(); return newItemId; } }","title":"Contents"},{"location":"Certifications-and-Learning/blockchain/ERC721/#contents","text":"ERC721 Links Constructing an ERC721 Token Contract","title":"Contents"},{"location":"Certifications-and-Learning/blockchain/ERC721/#erc721","text":"ERC721 is a standard for representing ownership of non-fungible tokens, that is, where each token is unique.","title":"ERC721"},{"location":"Certifications-and-Learning/blockchain/ERC721/#links","text":"Theory --> https://docs.openzeppelin.com/contracts/4.x/erc721 Standard --> https://eips.ethereum.org/EIPS/eip-721","title":"Links"},{"location":"Certifications-and-Learning/blockchain/ERC721/#constructing-an-erc721-token-contract","text":"We\u2019ll use ERC721 to track items in our game, which will each have their own unique attributes. Whenever one is to be awarded to a player, it will be minted and sent to them. Players are free to keep their token or trade it with other people as they see fit, as they would any other asset on the blockchain! Please note any account can call awardItem to mint items. To restrict what accounts can mint items we can add Access Control. // contracts/GameItem.sol // SPDX-License-Identifier: MIT pragma solidity ^0.8.0; import \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\"; import \"@openzeppelin/contracts/utils/Counters.sol\"; contract GameItem is ERC721URIStorage { using Counters for Counters.Counter; Counters.Counter private _tokenIds; constructor() ERC721(\"GameItem\", \"ITM\") {} function awardItem(address player, string memory tokenURI) public returns (uint256) { uint256 newItemId = _tokenIds.current(); _mint(player, newItemId); _setTokenURI(newItemId, tokenURI); _tokenIds.increment(); return newItemId; } }","title":"Constructing an ERC721 Token Contract"},{"location":"Certifications-and-Learning/blockchain/ERC777/","text":"Contents ERC777 Links What If I Already Use ERC20? Constructing an ERC777 Token Contract Sending Tokens to Contracts ERC777 Like ERC20, ERC777 is a standard for fungible tokens, and is focused around allowing more complex interactions when trading tokens. More generally, it brings tokens and Ether closer together by providing the equivalent of a msg.value field, but for tokens. The standard also brings multiple quality-of-life improvements, such as getting rid of the confusion around decimals, minting and burning with proper events, among others, but its killer feature is receive hooks. A hook is simply a function in a contract that is called when tokens are sent to it, meaning accounts and contracts can react to receiving tokens. This enables a lot of interesting use cases, including atomic purchases using tokens (no need to do approve and transferFrom in two separate transactions), rejecting reception of tokens (by reverting on the hook call), redirecting the received tokens to other addresses (similarly to how PaymentSplitter does it), among many others. Furthermore, since contracts are required to implement these hooks in order to receive tokens, no tokens can get stuck in a contract that is unaware of the ERC777 protocol, as has happened countless times when using ERC20s. Links Theory --> https://docs.openzeppelin.com/contracts/4.x/erc777 Standard --> https://eips.ethereum.org/EIPS/eip-777#backward-compatibility What If I Already Use ERC20? The standard has you covered! The ERC777 standard is backwards compatible with ERC20, meaning you can interact with these tokens as if they were ERC20, using the standard functions, while still getting all of the niceties, including send hooks. See the EIP\u2019s Backwards Compatibility section to learn more. Constructing an ERC777 Token Contract We will replicate the GLD example of the ERC20 guide, this time using ERC777. As always, check out the API reference to learn more about the details of each function. // contracts/GLDToken.sol // SPDX-License-Identifier: MIT pragma solidity ^0.8.0; import \"@openzeppelin/contracts/token/ERC777/ERC777.sol\"; contract GLDToken is ERC777 { constructor(uint256 initialSupply, address[] memory defaultOperators) ERC777(\"Gold\", \"GLD\", defaultOperators) { _mint(msg.sender, initialSupply, \"\", \"\"); } } Sending Tokens to Contracts A key difference when using send is that token transfers to other contracts may revert with the following message: ERC777: token recipient contract has no implementer for ERC777TokensRecipient","title":"Contents"},{"location":"Certifications-and-Learning/blockchain/ERC777/#contents","text":"ERC777 Links What If I Already Use ERC20? Constructing an ERC777 Token Contract Sending Tokens to Contracts","title":"Contents"},{"location":"Certifications-and-Learning/blockchain/ERC777/#erc777","text":"Like ERC20, ERC777 is a standard for fungible tokens, and is focused around allowing more complex interactions when trading tokens. More generally, it brings tokens and Ether closer together by providing the equivalent of a msg.value field, but for tokens. The standard also brings multiple quality-of-life improvements, such as getting rid of the confusion around decimals, minting and burning with proper events, among others, but its killer feature is receive hooks. A hook is simply a function in a contract that is called when tokens are sent to it, meaning accounts and contracts can react to receiving tokens. This enables a lot of interesting use cases, including atomic purchases using tokens (no need to do approve and transferFrom in two separate transactions), rejecting reception of tokens (by reverting on the hook call), redirecting the received tokens to other addresses (similarly to how PaymentSplitter does it), among many others. Furthermore, since contracts are required to implement these hooks in order to receive tokens, no tokens can get stuck in a contract that is unaware of the ERC777 protocol, as has happened countless times when using ERC20s.","title":"ERC777"},{"location":"Certifications-and-Learning/blockchain/ERC777/#links","text":"Theory --> https://docs.openzeppelin.com/contracts/4.x/erc777 Standard --> https://eips.ethereum.org/EIPS/eip-777#backward-compatibility","title":"Links"},{"location":"Certifications-and-Learning/blockchain/ERC777/#what-if-i-already-use-erc20","text":"The standard has you covered! The ERC777 standard is backwards compatible with ERC20, meaning you can interact with these tokens as if they were ERC20, using the standard functions, while still getting all of the niceties, including send hooks. See the EIP\u2019s Backwards Compatibility section to learn more.","title":"What If I Already Use ERC20?"},{"location":"Certifications-and-Learning/blockchain/ERC777/#constructing-an-erc777-token-contract","text":"We will replicate the GLD example of the ERC20 guide, this time using ERC777. As always, check out the API reference to learn more about the details of each function. // contracts/GLDToken.sol // SPDX-License-Identifier: MIT pragma solidity ^0.8.0; import \"@openzeppelin/contracts/token/ERC777/ERC777.sol\"; contract GLDToken is ERC777 { constructor(uint256 initialSupply, address[] memory defaultOperators) ERC777(\"Gold\", \"GLD\", defaultOperators) { _mint(msg.sender, initialSupply, \"\", \"\"); } }","title":"Constructing an ERC777 Token Contract"},{"location":"Certifications-and-Learning/blockchain/ERC777/#sending-tokens-to-contracts","text":"A key difference when using send is that token transfers to other contracts may revert with the following message: ERC777: token recipient contract has no implementer for ERC777TokensRecipient","title":"Sending Tokens to Contracts"},{"location":"Certifications-and-Learning/blockchain/Fund_and_withdraw/","text":"Fund and Withdraw https://youtu.be/gyMwXuJrbJQ?t=12859 How to send token, store token and get token out from the contract msg.sender <-- Contract address of the person interacting with the contract msg.value <-- Value of token being sent by the msg.sender Simply speaking Fund require(msg.value); in a function will fund the contract with specified amount of Token Withdraw Using transfer payable(msg.sender).transfer(address(this).balance); Has gas limit of 2300, throws error and auto revert. Using send bool sendSuccess = payable(msg.sender).send(address(this).balance); require(sendSuccess, \"Send Fail\"); Has gas limit of 2300, throws error if bool false and revert Using call This is a general function in solidity to call anyfunction without an abi. Hence withdraw can also be called using this. Format is (bool, bytes) = address.call{value: anyFunction() }(\"\"); Example for withdraw: (bool callSuccess, bytes memory dataReturned) = payable(msg.sender).call{value: address(this).balance}(\"\"); require(callSuccess, \"Call Failed\") Example code contract FundMe{ // Since only the contract deployer should be able to withdraw funds, we do the following address public owner; constructor(){ owner = msg.sender; } // Ideally modifiers should go to the end of the code modifier onlyOwner { require(msg.sender == owner, \"Sender is not owner!\"); } // First we create an array to store people who fund the contract // then a mapping to see who funded this contract with how much, we create a mapping // address to uint256 means that when we search, we search by address // if you wanted to search using amount, it would be uint256 => address // and the necessary change in the code // Lastly we define the function and update our array address[] public funders; mapping(address => uint256) public addressToAmountFunded; function fund() public payable { require(msg.value > 1e18, \"Not enough ETH\"); // 1e18 is 1 Eth funders.push(msg.sender); addressToAmountFunded[msg.sender] = msg.value; } function withdraw() public onlyOwner { // Modifier added here // Here we loop and set all the funder amount to 0 // Since we are planning to withdraw all eth // and essentially amount for each funder will go to zero for(uint256 funderIndex=0; funderIndex < funders.length; funderIndex++){ address funder = funders[funderIndex]; addressToAmountFunded[funder] = 0; } // Reset the funders array funders = new address[](0); // Finally we withdraw using call. We can use transfer or send too. (bool callSuccess, bytes memory dataReturned) = payable(msg.sender).call{value: address(this).balance}(\"\"); require(callSuccess, \"Call Failed\") } }","title":"Fund and Withdraw"},{"location":"Certifications-and-Learning/blockchain/Fund_and_withdraw/#fund-and-withdraw","text":"https://youtu.be/gyMwXuJrbJQ?t=12859 How to send token, store token and get token out from the contract msg.sender <-- Contract address of the person interacting with the contract msg.value <-- Value of token being sent by the msg.sender","title":"Fund and Withdraw"},{"location":"Certifications-and-Learning/blockchain/Fund_and_withdraw/#simply-speaking","text":"","title":"Simply speaking"},{"location":"Certifications-and-Learning/blockchain/Fund_and_withdraw/#fund","text":"require(msg.value); in a function will fund the contract with specified amount of Token","title":"Fund"},{"location":"Certifications-and-Learning/blockchain/Fund_and_withdraw/#withdraw","text":"","title":"Withdraw"},{"location":"Certifications-and-Learning/blockchain/Fund_and_withdraw/#using-transfer","text":"payable(msg.sender).transfer(address(this).balance); Has gas limit of 2300, throws error and auto revert.","title":"Using transfer"},{"location":"Certifications-and-Learning/blockchain/Fund_and_withdraw/#using-send","text":"bool sendSuccess = payable(msg.sender).send(address(this).balance); require(sendSuccess, \"Send Fail\"); Has gas limit of 2300, throws error if bool false and revert","title":"Using send"},{"location":"Certifications-and-Learning/blockchain/Fund_and_withdraw/#using-call","text":"This is a general function in solidity to call anyfunction without an abi. Hence withdraw can also be called using this. Format is (bool, bytes) = address.call{value: anyFunction() }(\"\"); Example for withdraw: (bool callSuccess, bytes memory dataReturned) = payable(msg.sender).call{value: address(this).balance}(\"\"); require(callSuccess, \"Call Failed\")","title":"Using call"},{"location":"Certifications-and-Learning/blockchain/Fund_and_withdraw/#example-code","text":"contract FundMe{ // Since only the contract deployer should be able to withdraw funds, we do the following address public owner; constructor(){ owner = msg.sender; } // Ideally modifiers should go to the end of the code modifier onlyOwner { require(msg.sender == owner, \"Sender is not owner!\"); } // First we create an array to store people who fund the contract // then a mapping to see who funded this contract with how much, we create a mapping // address to uint256 means that when we search, we search by address // if you wanted to search using amount, it would be uint256 => address // and the necessary change in the code // Lastly we define the function and update our array address[] public funders; mapping(address => uint256) public addressToAmountFunded; function fund() public payable { require(msg.value > 1e18, \"Not enough ETH\"); // 1e18 is 1 Eth funders.push(msg.sender); addressToAmountFunded[msg.sender] = msg.value; } function withdraw() public onlyOwner { // Modifier added here // Here we loop and set all the funder amount to 0 // Since we are planning to withdraw all eth // and essentially amount for each funder will go to zero for(uint256 funderIndex=0; funderIndex < funders.length; funderIndex++){ address funder = funders[funderIndex]; addressToAmountFunded[funder] = 0; } // Reset the funders array funders = new address[](0); // Finally we withdraw using call. We can use transfer or send too. (bool callSuccess, bytes memory dataReturned) = payable(msg.sender).call{value: address(this).balance}(\"\"); require(callSuccess, \"Call Failed\") } }","title":"Example code"},{"location":"Certifications-and-Learning/blockchain/Governance/","text":"Governance","title":"Governance"},{"location":"Certifications-and-Learning/blockchain/Governance/#governance","text":"","title":"Governance"},{"location":"Certifications-and-Learning/blockchain/HardHat/","text":"HardHat Important Links Data Feeds Contract Addresses on Chainlink Chainlink Github Mocks Link Aave Core V3 Concepts Overview https://youtu.be/gyMwXuJrbJQ?t=38444 Tagging in js files to consider certain files only for npm or yarn to consider Linting which is a concept of formating code and checking for errors Mocking for testing, where we copy behaviour of some real object, and create a little copy of it which simulates that behaviour Coverage in testing. Checking out how much code has been tested. Utils folder is created and code which we might need to be run as a support can be placed there. Testing is divided into unit and staging folders: link unit tests --> little pieces of codes like functions are individually tested. Usually on local hardhat or on forked hardhat. staring or integration tests --> here code as a whole is tested, in largest chunks. LAST STOP before actual deployment. Done on test nets. hardhat-deploy is used so that we can replicate deployments and make testing easier Overriding node modules. Format --> existing-package@npm:new-package. We did this for hardhat-deploy, see code. Packages hardhat <-- Installing hardhat hardhat-deploy <-- For replicable deployment and easy testing link @openzeppelin/contracts <-- To use openzeppalin contracts @chainlink/contracts <-- To use chainlink contracts @aave/core-v3 <-- To use aave solidity-coverage <-- To check coverage of our tests hardhat-gas-reporter <-- To see how much gas our contract uses solhint <-- Linting of solidity files eslint <-- Linting of javascript files prettier <-- Formatting js css html etc files prettier-plugin-solidity <-- Formatting solidity files dotenv <-- Loading .env variables Config Files hardhat.config.js <-- namedAccounts, networks etc goes here helper-hardhat-config.js <-- We place in different variables here which can be used by hardhat config Tagging in yarn: Notice in various .js files we put --> module.exports.tags = [\"all\", \"tag_specific_to_this_js\", \"tag3\", \"tag4\" ........] This is tagging, so that when we run --> yarn anything_command --tags all, then yarn will check all .js files and see if \"all\" tag is present in the .js file and then only run those .js files which has this tag. Mocks or Mocking Used in unit testing. Creating objects which simulates behaviour of real objects. In development with hardhat, if we choose hardhat default network to test out stuff, we have a blank hardhat blockchain and contracts in the real blockchain are not available on our blank blockchain. Then how do we test our interaction with the real contracts? We usually use testnets like rinkeby and koven, but what if we need to run things locally. Solutions 1. We can fork a part of the main blockchain and run on the forked version 2. We create MOCKS!! This is where mocking comes in. YEAAH! How? We import a mock contract from chainlink, or other Then create a test folder in contracts folder and then create a sol file; in the sol file we import the chainlink mock Thats it. Chainlink mocks link --> https://github.com/smartcontractkit/chainlink/tree/develop/contracts/src/v0.6/tests","title":"HardHat"},{"location":"Certifications-and-Learning/blockchain/HardHat/#hardhat","text":"","title":"HardHat"},{"location":"Certifications-and-Learning/blockchain/HardHat/#important-links","text":"Data Feeds Contract Addresses on Chainlink Chainlink Github Mocks Link Aave Core V3","title":"Important Links"},{"location":"Certifications-and-Learning/blockchain/HardHat/#concepts-overview","text":"https://youtu.be/gyMwXuJrbJQ?t=38444 Tagging in js files to consider certain files only for npm or yarn to consider Linting which is a concept of formating code and checking for errors Mocking for testing, where we copy behaviour of some real object, and create a little copy of it which simulates that behaviour Coverage in testing. Checking out how much code has been tested. Utils folder is created and code which we might need to be run as a support can be placed there. Testing is divided into unit and staging folders: link unit tests --> little pieces of codes like functions are individually tested. Usually on local hardhat or on forked hardhat. staring or integration tests --> here code as a whole is tested, in largest chunks. LAST STOP before actual deployment. Done on test nets. hardhat-deploy is used so that we can replicate deployments and make testing easier Overriding node modules. Format --> existing-package@npm:new-package. We did this for hardhat-deploy, see code.","title":"Concepts Overview"},{"location":"Certifications-and-Learning/blockchain/HardHat/#packages","text":"hardhat <-- Installing hardhat hardhat-deploy <-- For replicable deployment and easy testing link @openzeppelin/contracts <-- To use openzeppalin contracts @chainlink/contracts <-- To use chainlink contracts @aave/core-v3 <-- To use aave solidity-coverage <-- To check coverage of our tests hardhat-gas-reporter <-- To see how much gas our contract uses solhint <-- Linting of solidity files eslint <-- Linting of javascript files prettier <-- Formatting js css html etc files prettier-plugin-solidity <-- Formatting solidity files dotenv <-- Loading .env variables","title":"Packages"},{"location":"Certifications-and-Learning/blockchain/HardHat/#config-files","text":"hardhat.config.js <-- namedAccounts, networks etc goes here helper-hardhat-config.js <-- We place in different variables here which can be used by hardhat config Tagging in yarn: Notice in various .js files we put --> module.exports.tags = [\"all\", \"tag_specific_to_this_js\", \"tag3\", \"tag4\" ........] This is tagging, so that when we run --> yarn anything_command --tags all, then yarn will check all .js files and see if \"all\" tag is present in the .js file and then only run those .js files which has this tag.","title":"Config Files"},{"location":"Certifications-and-Learning/blockchain/HardHat/#mocks-or-mocking","text":"Used in unit testing. Creating objects which simulates behaviour of real objects. In development with hardhat, if we choose hardhat default network to test out stuff, we have a blank hardhat blockchain and contracts in the real blockchain are not available on our blank blockchain. Then how do we test our interaction with the real contracts? We usually use testnets like rinkeby and koven, but what if we need to run things locally. Solutions 1. We can fork a part of the main blockchain and run on the forked version 2. We create MOCKS!! This is where mocking comes in. YEAAH! How? We import a mock contract from chainlink, or other Then create a test folder in contracts folder and then create a sol file; in the sol file we import the chainlink mock Thats it. Chainlink mocks link --> https://github.com/smartcontractkit/chainlink/tree/develop/contracts/src/v0.6/tests","title":"Mocks or Mocking"},{"location":"Certifications-and-Learning/blockchain/Inheritance_Child/","text":"Inheritance and deploying other contracts https://youtu.be/gyMwXuJrbJQ?t=12636 Terms is --> Use this to make child virtual --> Allow function in the parent contract to be changed in child contract override --> Use this in the child contract to change the function Inheritance Example import \"./ImportedContract.sol\"; contract MyContract is ImportedContract { function functionInContract(uint256 _someInput) public override { // At the same time, in the ImportedContract, set the functionInContract as virtual someVariable = _someInput +5; } } Import and deploy other contracts import \"./ImportedContract.sol\"; contract MyContract { ImportedContract[] public importedContractArray; function createImportedContract() public { ImportedContract instanceOfImportedContract = new ImportedContract(); importedContractArray.push(instanceOfImportedContract); } } Run function from a certain copy of deployed contract import \"./ImportedContract.sol\"; contract MyContract { ImportedContract[] public importedContractArray; function createImportedContract() public { ImportedContract instanceOfImportedContract = new ImportedContract(); importedContractArray.push(instanceOfImportedContract); } function interactWithFunctions(uint256 _someInputIndexNumber) public view returns(something) { ImportedContract instanceOfImportedContract = importedContractArray[_someInputIndexNumber] return instanceOfImportedContract.afunctionInTheImportedContract(); } }","title":"Inheritance and deploying other contracts"},{"location":"Certifications-and-Learning/blockchain/Inheritance_Child/#inheritance-and-deploying-other-contracts","text":"https://youtu.be/gyMwXuJrbJQ?t=12636","title":"Inheritance and deploying other contracts"},{"location":"Certifications-and-Learning/blockchain/Inheritance_Child/#terms","text":"is --> Use this to make child virtual --> Allow function in the parent contract to be changed in child contract override --> Use this in the child contract to change the function","title":"Terms"},{"location":"Certifications-and-Learning/blockchain/Inheritance_Child/#inheritance-example","text":"import \"./ImportedContract.sol\"; contract MyContract is ImportedContract { function functionInContract(uint256 _someInput) public override { // At the same time, in the ImportedContract, set the functionInContract as virtual someVariable = _someInput +5; } }","title":"Inheritance Example"},{"location":"Certifications-and-Learning/blockchain/Inheritance_Child/#import-and-deploy-other-contracts","text":"import \"./ImportedContract.sol\"; contract MyContract { ImportedContract[] public importedContractArray; function createImportedContract() public { ImportedContract instanceOfImportedContract = new ImportedContract(); importedContractArray.push(instanceOfImportedContract); } }","title":"Import and deploy other contracts"},{"location":"Certifications-and-Learning/blockchain/Inheritance_Child/#run-function-from-a-certain-copy-of-deployed-contract","text":"import \"./ImportedContract.sol\"; contract MyContract { ImportedContract[] public importedContractArray; function createImportedContract() public { ImportedContract instanceOfImportedContract = new ImportedContract(); importedContractArray.push(instanceOfImportedContract); } function interactWithFunctions(uint256 _someInputIndexNumber) public view returns(something) { ImportedContract instanceOfImportedContract = importedContractArray[_someInputIndexNumber] return instanceOfImportedContract.afunctionInTheImportedContract(); } }","title":"Run function from a certain copy of deployed contract"},{"location":"Certifications-and-Learning/blockchain/Open_Zeppelin/","text":"Contents Open Zeppelin Introduction Links Theory Extending Contracts Overriding Calling super Using Hooks Rules of Hooks Access Control Ownable Admin basec access control Access control in the code itself Querying Privileged Accounts Delayed operation Why needed? Using TimelockController Concept of minimum delay Open Zeppelin and subpages Tokens: ERC20 ERC721 ERC777 ERC1155 Governance Introduction The standard for secure blockchain applications OpenZeppelin provides security products to build, automate, and operate decentralized applications. We also protect leading organizations by performing security audits on their systems and products. Links Main Website --> https://www.openzeppelin.com/ Auto code make simple --> https://docs.openzeppelin.com/contracts/4.x/wizard If you find bug, report here and win money -- > https://immunefi.com/bounty/openzeppelin/ Theory Extending Contracts Most of the OpenZeppelin Contracts are expected to be used via inheritance contract MyToken is ERC20 Overriding Inheritance is often used to add the parent contract\u2019s functionality to your own contract, but that\u2019s not all it can do. You can also change how some parts of the parent behave using overrides. The old revokeRole is then replaced by our override, and any calls to it will immediately revert. We cannot remove the function from the contract, but reverting on all calls is good enough. For example, imagine you want to change AccessControl so that revokeRole can no longer be called // contracts/ModifiedAccessControl.sol // SPDX-License-Identifier: MIT pragma solidity ^0.8.0; import \"@openzeppelin/contracts/access/AccessControl.sol\"; contract ModifiedAccessControl is AccessControl { // Override the revokeRole function function revokeRole(bytes32, address) public override { revert(\"ModifiedAccessControl: cannot revoke roles\"); } } Calling super Sometimes you want to extend a parent\u2019s behavior, instead of outright changing it to something else. This is where super comes in. The super keyword will let you call functions defined in a parent contract, even if they are overridden. This mechanism can be used to add additional checks to a function, emit events, or otherwise add functionality as you see fit. // contracts/ModifiedAccessControl.sol // SPDX-License-Identifier: MIT pragma solidity ^0.8.0; import \"@openzeppelin/contracts/access/AccessControl.sol\"; contract ModifiedAccessControl is AccessControl { function revokeRole(bytes32 role, address account) public override { require( role != DEFAULT_ADMIN_ROLE, \"ModifiedAccessControl: cannot revoke default admin role\" ); super.revokeRole(role, account); } } Using Hooks Sometimes, in order to extend a parent contract you will need to override multiple related functions, which leads to code duplication and increased likelihood of bugs. Hooks are simply functions that are called before or after some action takes place. They provide a centralized point to hook into and extend the original behavior. Rules of Hooks Whenever you override a parent\u2019s hook, re-apply the virtual attribute to the hook. Always call the parent\u2019s hook in your override using super. contract MyToken is ERC20 { function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override // Add virtual here! { super._beforeTokenTransfer(from, to, amount); // Call parent hook ... } } Access Control Ownable OpenZeppelin Contracts provides Ownable for implementing ownership in your contracts. // contracts/MyContract.sol // SPDX-License-Identifier: MIT pragma solidity ^0.8.0; import \"@openzeppelin/contracts/access/Ownable.sol\"; contract MyContract is Ownable { function normalThing() public { // anyone can call this normalThing() } function specialThing() public onlyOwner { // only the owner can call specialThing()! } } Admin basec access control OpenZeppelin Contracts provides AccessControl for implementing role-based access control. Below we are creating an admin, who can later define minter or burner // contracts/MyToken.sol // SPDX-License-Identifier: MIT pragma solidity ^0.8.0; import \"@openzeppelin/contracts/access/AccessControl.sol\"; import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\"; contract MyToken is ERC20, AccessControl { bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\"); bytes32 public constant BURNER_ROLE = keccak256(\"BURNER_ROLE\"); constructor() ERC20(\"MyToken\", \"TKN\") { // Grant the contract deployer the default admin role: it will be able // to grant and revoke any roles _setupRole(DEFAULT_ADMIN_ROLE, msg.sender); } function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) { _mint(to, amount); } function burn(address from, uint256 amount) public onlyRole(BURNER_ROLE) { _burn(from, amount); } } Access control in the code itself Here we do not create admin, but define minter burner in the code itself. (Might be usefull at some place, but above is better) // contracts/MyToken.sol // SPDX-License-Identifier: MIT pragma solidity ^0.8.0; import \"@openzeppelin/contracts/access/AccessControl.sol\"; import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\"; contract MyToken is ERC20, AccessControl { bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\"); bytes32 public constant BURNER_ROLE = keccak256(\"BURNER_ROLE\"); constructor(address minter, address burner) ERC20(\"MyToken\", \"TKN\") { _setupRole(MINTER_ROLE, minter); _setupRole(BURNER_ROLE, burner); } function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) { _mint(to, amount); } function burn(address from, uint256 amount) public onlyRole(BURNER_ROLE) { _burn(from, amount); } } Querying Privileged Accounts Because accounts might grant and revoke roles dynamically, it is not always possible to determine which accounts hold a particular role. This is important as it allows to prove certain properties about a system, such as that an administrative account is a multisig or a DAO, or that a certain role has been removed from all users, effectively disabling any associated functionality. Under the hood, AccessControl uses EnumerableSet, a more powerful variant of Solidity\u2019s mapping type, which allows for key enumeration. getRoleMemberCount can be used to retrieve the number of accounts that have a particular role, and getRoleMember can then be called to get the address of each of these accounts. const minterCount = await myToken.getRoleMemberCount(MINTER_ROLE); const members = []; for (let i = 0; i < minterCount; ++i) { members.push(await myToken.getRoleMember(MINTER_ROLE, i)); } Delayed operation Why needed? Access control is essential to prevent unauthorized access to critical functions. These functions may be used to mint tokens, freeze transfers or perform an upgrade that completely changes the smart contract logic. While Ownable and AccessControl can prevent unauthorized access, they do not address the issue of a misbehaving administrator attacking their own system to the prejudice of their users. This is the issue the TimelockController is addressing. The TimelockController is a proxy that is governed by proposers and executors. When set as the owner/admin/controller of a smart contract, it ensures that whichever maintenance operation is ordered by the proposers is subject to a delay. This delay protects the users of the smart contract by giving them time to review the maintenance operation and exit the system if they consider it is in their best interest to do so. Using TimelockController By default, the address that deployed the TimelockController gets administration privileges over the timelock. 1. The first step in configuring the TimelockController is to assign at least one proposer and one executor. 2. Roles are managed using the AccessControl interface and the bytes32 values for each role are accessible through the ADMIN_ROLE, PROPOSER_ROLE and EXECUTOR_ROLE constants. 3. There is an additional feature built on top of AccessControl: giving the executor role to address(0) opens access to anyone to execute a proposal once the timelock has expired. This feature, while useful, should be used with caution. 4. At this point, with both a proposer and an executor assigned, the timelock can perform operations. 5. An optional next step is for the deployer to renounce its administrative privileges and leave the timelock self-administered. If the deployer decides to do so, all further maintenance, including assigning new proposers/schedulers or changing the timelock duration will have to follow the timelock workflow. This links the governance of the timelock to the governance of contracts attached to the timelock, and enforce a delay on timelock maintenance operations. 6. With both the proposer and executor roles assigned and the timelock in charge of its own administration, you can now transfer the ownership/control of any contract to the timelock. Concept of minimum delay Operations executed by the TimelockController are not subject to a fixed delay but rather a minimum delay. Some major updates might call for a longer delay. For example, if a delay of just a few days might be sufficient for users to audit a minting operation, it makes sense to use a delay of a few weeks, or even a few months, when scheduling a smart contract upgrade. The minimum delay (accessible through the getMinDelay method) can be updated by calling the updateDelay function. Bear in mind that access to this function is only accessible by the timelock itself, meaning this maintenance operation has to go through the timelock itself.\\","title":"Contents"},{"location":"Certifications-and-Learning/blockchain/Open_Zeppelin/#contents","text":"Open Zeppelin Introduction Links Theory Extending Contracts Overriding Calling super Using Hooks Rules of Hooks Access Control Ownable Admin basec access control Access control in the code itself Querying Privileged Accounts Delayed operation Why needed? Using TimelockController Concept of minimum delay","title":"Contents"},{"location":"Certifications-and-Learning/blockchain/Open_Zeppelin/#open-zeppelin-and-subpages","text":"Tokens: ERC20 ERC721 ERC777 ERC1155 Governance","title":"Open Zeppelin and subpages"},{"location":"Certifications-and-Learning/blockchain/Open_Zeppelin/#introduction","text":"The standard for secure blockchain applications OpenZeppelin provides security products to build, automate, and operate decentralized applications. We also protect leading organizations by performing security audits on their systems and products.","title":"Introduction"},{"location":"Certifications-and-Learning/blockchain/Open_Zeppelin/#links","text":"Main Website --> https://www.openzeppelin.com/ Auto code make simple --> https://docs.openzeppelin.com/contracts/4.x/wizard If you find bug, report here and win money -- > https://immunefi.com/bounty/openzeppelin/","title":"Links"},{"location":"Certifications-and-Learning/blockchain/Open_Zeppelin/#theory","text":"","title":"Theory"},{"location":"Certifications-and-Learning/blockchain/Open_Zeppelin/#extending-contracts","text":"Most of the OpenZeppelin Contracts are expected to be used via inheritance contract MyToken is ERC20","title":"Extending Contracts"},{"location":"Certifications-and-Learning/blockchain/Open_Zeppelin/#overriding","text":"Inheritance is often used to add the parent contract\u2019s functionality to your own contract, but that\u2019s not all it can do. You can also change how some parts of the parent behave using overrides. The old revokeRole is then replaced by our override, and any calls to it will immediately revert. We cannot remove the function from the contract, but reverting on all calls is good enough. For example, imagine you want to change AccessControl so that revokeRole can no longer be called // contracts/ModifiedAccessControl.sol // SPDX-License-Identifier: MIT pragma solidity ^0.8.0; import \"@openzeppelin/contracts/access/AccessControl.sol\"; contract ModifiedAccessControl is AccessControl { // Override the revokeRole function function revokeRole(bytes32, address) public override { revert(\"ModifiedAccessControl: cannot revoke roles\"); } }","title":"Overriding"},{"location":"Certifications-and-Learning/blockchain/Open_Zeppelin/#calling-super","text":"Sometimes you want to extend a parent\u2019s behavior, instead of outright changing it to something else. This is where super comes in. The super keyword will let you call functions defined in a parent contract, even if they are overridden. This mechanism can be used to add additional checks to a function, emit events, or otherwise add functionality as you see fit. // contracts/ModifiedAccessControl.sol // SPDX-License-Identifier: MIT pragma solidity ^0.8.0; import \"@openzeppelin/contracts/access/AccessControl.sol\"; contract ModifiedAccessControl is AccessControl { function revokeRole(bytes32 role, address account) public override { require( role != DEFAULT_ADMIN_ROLE, \"ModifiedAccessControl: cannot revoke default admin role\" ); super.revokeRole(role, account); } }","title":"Calling super"},{"location":"Certifications-and-Learning/blockchain/Open_Zeppelin/#using-hooks","text":"Sometimes, in order to extend a parent contract you will need to override multiple related functions, which leads to code duplication and increased likelihood of bugs. Hooks are simply functions that are called before or after some action takes place. They provide a centralized point to hook into and extend the original behavior.","title":"Using Hooks"},{"location":"Certifications-and-Learning/blockchain/Open_Zeppelin/#rules-of-hooks","text":"Whenever you override a parent\u2019s hook, re-apply the virtual attribute to the hook. Always call the parent\u2019s hook in your override using super. contract MyToken is ERC20 { function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override // Add virtual here! { super._beforeTokenTransfer(from, to, amount); // Call parent hook ... } }","title":"Rules of Hooks"},{"location":"Certifications-and-Learning/blockchain/Open_Zeppelin/#access-control","text":"","title":"Access Control"},{"location":"Certifications-and-Learning/blockchain/Open_Zeppelin/#ownable","text":"OpenZeppelin Contracts provides Ownable for implementing ownership in your contracts. // contracts/MyContract.sol // SPDX-License-Identifier: MIT pragma solidity ^0.8.0; import \"@openzeppelin/contracts/access/Ownable.sol\"; contract MyContract is Ownable { function normalThing() public { // anyone can call this normalThing() } function specialThing() public onlyOwner { // only the owner can call specialThing()! } }","title":"Ownable"},{"location":"Certifications-and-Learning/blockchain/Open_Zeppelin/#admin-basec-access-control","text":"OpenZeppelin Contracts provides AccessControl for implementing role-based access control. Below we are creating an admin, who can later define minter or burner // contracts/MyToken.sol // SPDX-License-Identifier: MIT pragma solidity ^0.8.0; import \"@openzeppelin/contracts/access/AccessControl.sol\"; import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\"; contract MyToken is ERC20, AccessControl { bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\"); bytes32 public constant BURNER_ROLE = keccak256(\"BURNER_ROLE\"); constructor() ERC20(\"MyToken\", \"TKN\") { // Grant the contract deployer the default admin role: it will be able // to grant and revoke any roles _setupRole(DEFAULT_ADMIN_ROLE, msg.sender); } function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) { _mint(to, amount); } function burn(address from, uint256 amount) public onlyRole(BURNER_ROLE) { _burn(from, amount); } }","title":"Admin basec access control"},{"location":"Certifications-and-Learning/blockchain/Open_Zeppelin/#access-control-in-the-code-itself","text":"Here we do not create admin, but define minter burner in the code itself. (Might be usefull at some place, but above is better) // contracts/MyToken.sol // SPDX-License-Identifier: MIT pragma solidity ^0.8.0; import \"@openzeppelin/contracts/access/AccessControl.sol\"; import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\"; contract MyToken is ERC20, AccessControl { bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\"); bytes32 public constant BURNER_ROLE = keccak256(\"BURNER_ROLE\"); constructor(address minter, address burner) ERC20(\"MyToken\", \"TKN\") { _setupRole(MINTER_ROLE, minter); _setupRole(BURNER_ROLE, burner); } function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) { _mint(to, amount); } function burn(address from, uint256 amount) public onlyRole(BURNER_ROLE) { _burn(from, amount); } }","title":"Access control in the code itself"},{"location":"Certifications-and-Learning/blockchain/Open_Zeppelin/#querying-privileged-accounts","text":"Because accounts might grant and revoke roles dynamically, it is not always possible to determine which accounts hold a particular role. This is important as it allows to prove certain properties about a system, such as that an administrative account is a multisig or a DAO, or that a certain role has been removed from all users, effectively disabling any associated functionality. Under the hood, AccessControl uses EnumerableSet, a more powerful variant of Solidity\u2019s mapping type, which allows for key enumeration. getRoleMemberCount can be used to retrieve the number of accounts that have a particular role, and getRoleMember can then be called to get the address of each of these accounts. const minterCount = await myToken.getRoleMemberCount(MINTER_ROLE); const members = []; for (let i = 0; i < minterCount; ++i) { members.push(await myToken.getRoleMember(MINTER_ROLE, i)); }","title":"Querying Privileged Accounts"},{"location":"Certifications-and-Learning/blockchain/Open_Zeppelin/#delayed-operation","text":"","title":"Delayed operation"},{"location":"Certifications-and-Learning/blockchain/Open_Zeppelin/#why-needed","text":"Access control is essential to prevent unauthorized access to critical functions. These functions may be used to mint tokens, freeze transfers or perform an upgrade that completely changes the smart contract logic. While Ownable and AccessControl can prevent unauthorized access, they do not address the issue of a misbehaving administrator attacking their own system to the prejudice of their users. This is the issue the TimelockController is addressing. The TimelockController is a proxy that is governed by proposers and executors. When set as the owner/admin/controller of a smart contract, it ensures that whichever maintenance operation is ordered by the proposers is subject to a delay. This delay protects the users of the smart contract by giving them time to review the maintenance operation and exit the system if they consider it is in their best interest to do so.","title":"Why needed?"},{"location":"Certifications-and-Learning/blockchain/Open_Zeppelin/#using-timelockcontroller","text":"By default, the address that deployed the TimelockController gets administration privileges over the timelock. 1. The first step in configuring the TimelockController is to assign at least one proposer and one executor. 2. Roles are managed using the AccessControl interface and the bytes32 values for each role are accessible through the ADMIN_ROLE, PROPOSER_ROLE and EXECUTOR_ROLE constants. 3. There is an additional feature built on top of AccessControl: giving the executor role to address(0) opens access to anyone to execute a proposal once the timelock has expired. This feature, while useful, should be used with caution. 4. At this point, with both a proposer and an executor assigned, the timelock can perform operations. 5. An optional next step is for the deployer to renounce its administrative privileges and leave the timelock self-administered. If the deployer decides to do so, all further maintenance, including assigning new proposers/schedulers or changing the timelock duration will have to follow the timelock workflow. This links the governance of the timelock to the governance of contracts attached to the timelock, and enforce a delay on timelock maintenance operations. 6. With both the proposer and executor roles assigned and the timelock in charge of its own administration, you can now transfer the ownership/control of any contract to the timelock.","title":"Using TimelockController"},{"location":"Certifications-and-Learning/blockchain/Open_Zeppelin/#concept-of-minimum-delay","text":"Operations executed by the TimelockController are not subject to a fixed delay but rather a minimum delay. Some major updates might call for a longer delay. For example, if a delay of just a few days might be sufficient for users to audit a minting operation, it makes sense to use a delay of a few weeks, or even a few months, when scheduling a smart contract upgrade. The minimum delay (accessible through the getMinDelay method) can be updated by calling the updateDelay function. Bear in mind that access to this function is only accessible by the timelock itself, meaning this maintenance operation has to go through the timelock itself.\\","title":"Concept of minimum delay"},{"location":"Certifications-and-Learning/blockchain/Solidity/","text":"Contents Solidity Best Practices and workflow Terms and Concepts library interface modifier constant immutable error and revert receive() and fallback() Solidity Best Practices and workflow Solidity_format Inheritance_Child and deploying other contracts from a contract Fund_and_withdraw Terms and Concepts View functions cost gas if called from contract !!! wierd... library Like a smart contract but only for calculations, can not send ethers etc. SafeMath was an example, was used a lot in the past by people. Now 0.8 solidity has it inbuilt. interface contract1 is contract2: This way one, contract1 inherits all features of contract2 contructor: <-- This is a special function like receive and fallback setting up owner, something like a global variable maybe?? Check... modifier added to any function, and the code runs only if conditions in modifier is met constant https://youtu.be/gyMwXuJrbJQ?t=18430 Saves in bytecode of contract and not in storage Hence it saves gas fee written in CAPITAL_LETTERS If some variable does not change Exmaple: uint256 public constant ANY_CONSTANT_THING = 50 immutable https://youtu.be/gyMwXuJrbJQ?t=18654 Saves in bytecode of contract and not in storage Hence it saves gas fee written with i_ variable in constructor can use it. Example address public immutable i_owner constructor(){ i_owner = msg.sender } error and revert https://youtu.be/gyMwXuJrbJQ?t=18781 In the require statements, we save the error message as string, which cost gas, so instead we use error now. This is new and better way. Before the contract, below pragma, write the following: error NotOwner(); Then inside the contract, at any function, write if(msg.sender != i_owner) { revert NotOwner(); } <-- New method, does not cost gas _; Old method was --> require(msg.sender == i_owner, \"Sender is not owner\"); receive() and fallback() https://youtu.be/gyMwXuJrbJQ?t=18947 If someone interacts with with contract without running specific functions in the contract then: If there is data send while interacting --> fallback() is called If no data and there is receive function --> receive() is called if no data and no receive function --> fallback() is called if no data, no receive and no fallback --> ERROR If someone sends ETH to our contract, and we wish to run a function, we usually put it under receive or fallback. Meaning, if there is no data sent, EVM looks for receive function, if its there good, else it goes to fallback function. If data is send and not empty, fallback function is called. Wrapping each function in receive and fallback seems like a good practice. They are special functions in solidity, just like constructor","title":"Contents"},{"location":"Certifications-and-Learning/blockchain/Solidity/#contents","text":"Solidity Best Practices and workflow Terms and Concepts library interface modifier constant immutable error and revert receive() and fallback()","title":"Contents"},{"location":"Certifications-and-Learning/blockchain/Solidity/#solidity","text":"","title":"Solidity"},{"location":"Certifications-and-Learning/blockchain/Solidity/#best-practices-and-workflow","text":"Solidity_format Inheritance_Child and deploying other contracts from a contract Fund_and_withdraw","title":"Best Practices and workflow"},{"location":"Certifications-and-Learning/blockchain/Solidity/#terms-and-concepts","text":"View functions cost gas if called from contract !!! wierd...","title":"Terms and Concepts"},{"location":"Certifications-and-Learning/blockchain/Solidity/#library","text":"Like a smart contract but only for calculations, can not send ethers etc. SafeMath was an example, was used a lot in the past by people. Now 0.8 solidity has it inbuilt.","title":"library"},{"location":"Certifications-and-Learning/blockchain/Solidity/#interface","text":"contract1 is contract2: This way one, contract1 inherits all features of contract2 contructor: <-- This is a special function like receive and fallback setting up owner, something like a global variable maybe?? Check...","title":"interface"},{"location":"Certifications-and-Learning/blockchain/Solidity/#modifier","text":"added to any function, and the code runs only if conditions in modifier is met","title":"modifier"},{"location":"Certifications-and-Learning/blockchain/Solidity/#constant","text":"https://youtu.be/gyMwXuJrbJQ?t=18430 Saves in bytecode of contract and not in storage Hence it saves gas fee written in CAPITAL_LETTERS If some variable does not change Exmaple: uint256 public constant ANY_CONSTANT_THING = 50","title":"constant"},{"location":"Certifications-and-Learning/blockchain/Solidity/#immutable","text":"https://youtu.be/gyMwXuJrbJQ?t=18654 Saves in bytecode of contract and not in storage Hence it saves gas fee written with i_ variable in constructor can use it. Example address public immutable i_owner constructor(){ i_owner = msg.sender }","title":"immutable"},{"location":"Certifications-and-Learning/blockchain/Solidity/#error-and-revert","text":"https://youtu.be/gyMwXuJrbJQ?t=18781 In the require statements, we save the error message as string, which cost gas, so instead we use error now. This is new and better way. Before the contract, below pragma, write the following: error NotOwner(); Then inside the contract, at any function, write if(msg.sender != i_owner) { revert NotOwner(); } <-- New method, does not cost gas _; Old method was --> require(msg.sender == i_owner, \"Sender is not owner\");","title":"error and revert"},{"location":"Certifications-and-Learning/blockchain/Solidity/#receive-and-fallback","text":"https://youtu.be/gyMwXuJrbJQ?t=18947 If someone interacts with with contract without running specific functions in the contract then: If there is data send while interacting --> fallback() is called If no data and there is receive function --> receive() is called if no data and no receive function --> fallback() is called if no data, no receive and no fallback --> ERROR If someone sends ETH to our contract, and we wish to run a function, we usually put it under receive or fallback. Meaning, if there is no data sent, EVM looks for receive function, if its there good, else it goes to fallback function. If data is send and not empty, fallback function is called. Wrapping each function in receive and fallback seems like a good practice. They are special functions in solidity, just like constructor","title":"receive() and fallback()"},{"location":"Certifications-and-Learning/blockchain/Solidity_format/","text":"Contents Solidiy format Overall Structure Solidity style guide Solidiy format Link for coding --> https://docs.soliditylang.org/en/v0.8.15/style-guide.html#introduction Natspec Format for documenting code --> https://docs.soliditylang.org/en/v0.8.15/natspec-format.html To document code, we use natspec format in solidity Order of Layout: Layout contract elements in the following order: Pragma statements Import statements Interfaces Libraries Contracts Inside each contract, library or interface, use the following order: Type declarations State variables Events Modifiers Functions Overall Structure SPDX-License-Identifier: MIT Imports Errors Interfaces Libraries Contracts Project description lie @title @author etc Type declarations State variables Events Constructor Modifiers Functions: Each Function Description with @dev Each logic meaning with Getter Functions ////////////////// // Example Code // ////////////////// // SPDX-License-Identifier: MIT pragma solidity ^0.8.7; import \"./ContractInSameFolder.sol\"; import \"@FromGitHub\"; /* Errors */ error ContractName__UpkeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState); error ContractName__TransferFailed(); // Note the format. Its contractname then double underscroe then error name /**@title A sample Raffle Contract * @author Manasvi Mohan Sharma * @notice This contract is for creating a sample raffle contract * @dev This implements the Chainlink VRF Version 2 */ contract ContractName { /* Type declarations */ enum ChoicesType { OPEN, CALCULATING } /* State variables */ // Variables uint64 private immutable i_subscriptionId; // immutable has i_ uint16 private constant REQUEST_CONFIRMATIONS = 3; // constants are CAPITALISED_YES address private s_recentWinner; // state varibles are s_ ChoicesType private s_raffleState; // declaring from the enum above /* Events */ event RequestedRaffleWinner(uint256 indexed requestId); event WinnerPicked(address indexed player); /* Constructor */ constructor( uint256 interval, uint256 entranceFee, uint32 callbackGasLimit ) VRFConsumerBaseV2(vrfCoordinatorV2) { i_interval = interval; i_entranceFee = entranceFee; s_raffleState = RaffleState.OPEN; s_lastTimeStamp = block.timestamp; } /* Functions */ /** * @dev What this function is about * What this function takes in and spits out */ function createContractFromImport() public payable { // Creating an instance of imported contract ContractInSameFolder intanceOfContract = new ContractInSameFolder(); // Calling a function in the imported contract from the created instance instanceOfContract.functionName(inputs); // require(s_raffleState == RaffleState.OPEN, \"Raffle is not open\"); if (s_raffleState != RaffleState.OPEN) { revert Raffle__RaffleNotOpen(); } // Adding the contract address of user into s_player array s_players.push(payable(msg.sender)); // Emit an event; and its description emit RaffleEnter(msg.sender); } /** Getter Functions */ function getRaffleState() public view returns (RaffleState) { return s_raffleState; } function getRecentWinner() public view returns (address) { return s_recentWinner; } } Solidity style guide Patrick's Video Official Website Example: // SPDX-License-Identifier: GPL-3.0 pragma solidity >=0.8.2 < 0.9.0; /// @title A simulator for trees /// @author Larry A. Gardner /// @notice You can use this contract for only the most basic simulation /// @dev All function calls are currently implemented without side effects /// @custom:experimental This is an experimental contract. contract Tree { /// @notice Calculate tree age in years, rounded up, for live trees /// @dev The Alexandr N. Tetearing algorithm could increase precision /// @param rings The number of rings from dendrochronological sample /// @return Age in years, rounded up for partial years function age(uint256 rings) external virtual pure returns (uint256) { return rings + 1; } /// @notice Returns the amount of leaves the tree has. /// @dev Returns only a fixed number. function leaves() external virtual pure returns(uint256) { return 2; } } contract Plant { function leaves() external virtual pure returns(uint256) { return 3; } } contract KumquatTree is Tree, Plant { function age(uint256 rings) external override pure returns (uint256) { return rings + 2; } /// Return the amount of leaves that this specific kind of tree has /// @inheritdoc Tree function leaves() external override(Tree, Plant) pure returns(uint256) { return 3; } }","title":"Contents"},{"location":"Certifications-and-Learning/blockchain/Solidity_format/#contents","text":"Solidiy format Overall Structure Solidity style guide","title":"Contents"},{"location":"Certifications-and-Learning/blockchain/Solidity_format/#solidiy-format","text":"Link for coding --> https://docs.soliditylang.org/en/v0.8.15/style-guide.html#introduction Natspec Format for documenting code --> https://docs.soliditylang.org/en/v0.8.15/natspec-format.html To document code, we use natspec format in solidity Order of Layout: Layout contract elements in the following order: Pragma statements Import statements Interfaces Libraries Contracts Inside each contract, library or interface, use the following order: Type declarations State variables Events Modifiers Functions","title":"Solidiy format"},{"location":"Certifications-and-Learning/blockchain/Solidity_format/#overall-structure","text":"SPDX-License-Identifier: MIT Imports Errors Interfaces Libraries Contracts Project description lie @title @author etc Type declarations State variables Events Constructor Modifiers Functions: Each Function Description with @dev Each logic meaning with Getter Functions ////////////////// // Example Code // ////////////////// // SPDX-License-Identifier: MIT pragma solidity ^0.8.7; import \"./ContractInSameFolder.sol\"; import \"@FromGitHub\"; /* Errors */ error ContractName__UpkeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState); error ContractName__TransferFailed(); // Note the format. Its contractname then double underscroe then error name /**@title A sample Raffle Contract * @author Manasvi Mohan Sharma * @notice This contract is for creating a sample raffle contract * @dev This implements the Chainlink VRF Version 2 */ contract ContractName { /* Type declarations */ enum ChoicesType { OPEN, CALCULATING } /* State variables */ // Variables uint64 private immutable i_subscriptionId; // immutable has i_ uint16 private constant REQUEST_CONFIRMATIONS = 3; // constants are CAPITALISED_YES address private s_recentWinner; // state varibles are s_ ChoicesType private s_raffleState; // declaring from the enum above /* Events */ event RequestedRaffleWinner(uint256 indexed requestId); event WinnerPicked(address indexed player); /* Constructor */ constructor( uint256 interval, uint256 entranceFee, uint32 callbackGasLimit ) VRFConsumerBaseV2(vrfCoordinatorV2) { i_interval = interval; i_entranceFee = entranceFee; s_raffleState = RaffleState.OPEN; s_lastTimeStamp = block.timestamp; } /* Functions */ /** * @dev What this function is about * What this function takes in and spits out */ function createContractFromImport() public payable { // Creating an instance of imported contract ContractInSameFolder intanceOfContract = new ContractInSameFolder(); // Calling a function in the imported contract from the created instance instanceOfContract.functionName(inputs); // require(s_raffleState == RaffleState.OPEN, \"Raffle is not open\"); if (s_raffleState != RaffleState.OPEN) { revert Raffle__RaffleNotOpen(); } // Adding the contract address of user into s_player array s_players.push(payable(msg.sender)); // Emit an event; and its description emit RaffleEnter(msg.sender); } /** Getter Functions */ function getRaffleState() public view returns (RaffleState) { return s_raffleState; } function getRecentWinner() public view returns (address) { return s_recentWinner; } }","title":"Overall Structure"},{"location":"Certifications-and-Learning/blockchain/Solidity_format/#solidity-style-guide","text":"Patrick's Video Official Website Example: // SPDX-License-Identifier: GPL-3.0 pragma solidity >=0.8.2 < 0.9.0; /// @title A simulator for trees /// @author Larry A. Gardner /// @notice You can use this contract for only the most basic simulation /// @dev All function calls are currently implemented without side effects /// @custom:experimental This is an experimental contract. contract Tree { /// @notice Calculate tree age in years, rounded up, for live trees /// @dev The Alexandr N. Tetearing algorithm could increase precision /// @param rings The number of rings from dendrochronological sample /// @return Age in years, rounded up for partial years function age(uint256 rings) external virtual pure returns (uint256) { return rings + 1; } /// @notice Returns the amount of leaves the tree has. /// @dev Returns only a fixed number. function leaves() external virtual pure returns(uint256) { return 2; } } contract Plant { function leaves() external virtual pure returns(uint256) { return 3; } } contract KumquatTree is Tree, Plant { function age(uint256 rings) external override pure returns (uint256) { return rings + 2; } /// Return the amount of leaves that this specific kind of tree has /// @inheritdoc Tree function leaves() external override(Tree, Plant) pure returns(uint256) { return 3; } }","title":"Solidity style guide"},{"location":"Certifications-and-Learning/cloud/","text":"Cloud AWS AZURE","title":"Cloud"},{"location":"Certifications-and-Learning/cloud/#cloud","text":"AWS AZURE","title":"Cloud"},{"location":"Certifications-and-Learning/cloud/aws/","text":"AWS https://www.youtube.com/watch?v=JIbIYCM48to Started with Storage Compute Messaging Products brief Robomaker - Simulate and test IOT COre - Make robiots exchange data Ground Station - Sattalite data Bracket - Quantom computer Commpute EC2 - Elastic Compute Cloud - Virtual computer making Load Balancing - Distribute traffic to multiople EC2 Cloud Watch - Collect data from EC2 instances Auto Scale - Based on cloud watch inputs, create auto EC2 for scaling Elastic Beanstalk - PaaS, platform as a service. Abstraction over EC2, choose nodejs, python etc... scaling etc happens auto LightSail - Static Server. Abstraction over ELastic Beanstalk. Choose django mean wordpress etc and done. Lambda - FaaS, function as a service or serverless computing. Upload code, and event, then code runs on the event happens Serverless REPO - Like lambda, but ready made functions, you dont write them. Outposts - Rent aws apis to run on own servers Snow - Little devices which run on hostile environment like antartica, so for scientist its there Elastic Container Registry - ECR - upload and Save docker images, for use by other services Elastic Container Service - ECS - Run docker images from ECR and create EC2 instances Elestic Kubernetes Service - EKS - Running docker in kubernetes for more control over scaling etc Fargate - Runs ECS like servless functions, no need for EC2 instance. More automation. APP Runner - If container is simple, easiest to run on App runner. Abstraction over other; handles orchestration and scaling automatically File Storage Simple Storage Service S3 - Save image, video, docs etc Glacier - If files not accessed a lot, this is cheap, but latency is high, meaning slow. Elastic Block Storage - Very fast, data processing type data. Lot of manual configurations. Elastic File System - Fast and managed, abstaction of all above, higher cost Database Simple DB - simple no sql database. One of the first products Dynamo DB - cheap, horizontal scaling, fast reads, bad at modeling like joins and limited queries Document DB - Exactly like mongo db, controvercial, uses mongodb backend, without telling Elastic Search - Full text search engine type RDS - Relational Database Service - Man options, many db etc; backups, patching scaling is managed by amazon Aurora - Like mySQL, but 5x faster at lower cost. Amazon Aurora Serverless - Exactly aurora but with serverless way of tackling db Neptune - Graph database Elastic Cache - Managed version of Redis; ultra fast Timestream - For time series data, like stock market with analytics too Quantum Ledger - Create immutable cryptographically signed transations like blockchain, but not distributed like blockchain Analytics Redshift - Data warehouse. Put in data from various sources into here, to enable SQL like queries and analytics over them Lake Formation - If unstructured data from various soruces, dump raw data here, then extract to redshift or other data warehouse. Kinesis - For real time streaming data and visualise into any data visualisation OR use stream processing tech like Apache Spark Map Reduce - Operate on Large mAssive data sets ::Side note --> kafka, flume, hdfs/s3, kinesis, twitter MSK - Managed Service for Kafka. This can be used instead of Kinesis. Glue - Serverless ETL tool, extract transform load. Can connect to other amazon services Glue Studio - Write jobs here, and everything happens, connect ec2, redshift, cloudwatch, lambda etc Data Exchange - Subscribe to 3rd party data providers and services to purchase or subscribe for high quality data. Machine Learning Sagemaker - tensorflow and pytorch based ML model making. Has managed jupyter notebook too. Rekognition - Pre made image recognition classification. Image analysis Lex - Conversational ML model, for chat etc, used by alexa too Deep Racer - A physical racecar, which can drive as per our machine learning model and do stuff Essentials IAM - Security Admin to control right on your aws account Cognito - Simpe User login and session management tool. Many authentication methods Simple Notification Service - SNS - Push notifications to users, maybe with cognito sessions above Simple Email Service - SES - Send emails to users Provisioning Cloud Formation - Yaml/ Json based cloud formation of all amazon services with a BLOODY FILE!! Like dockerfile and compose combo; or pods or maybe like vagrant... for all aws services! Amplify - SDKs for connecting and interacting with cloud formation or awas services using frontends, javascript, apple, android, web Budgets - Cost explorer for AWS","title":"AWS"},{"location":"Certifications-and-Learning/cloud/aws/#aws","text":"https://www.youtube.com/watch?v=JIbIYCM48to","title":"AWS"},{"location":"Certifications-and-Learning/cloud/aws/#started-with","text":"Storage Compute Messaging","title":"Started with"},{"location":"Certifications-and-Learning/cloud/aws/#products-brief","text":"Robomaker - Simulate and test IOT COre - Make robiots exchange data Ground Station - Sattalite data Bracket - Quantom computer Commpute EC2 - Elastic Compute Cloud - Virtual computer making Load Balancing - Distribute traffic to multiople EC2 Cloud Watch - Collect data from EC2 instances Auto Scale - Based on cloud watch inputs, create auto EC2 for scaling Elastic Beanstalk - PaaS, platform as a service. Abstraction over EC2, choose nodejs, python etc... scaling etc happens auto LightSail - Static Server. Abstraction over ELastic Beanstalk. Choose django mean wordpress etc and done. Lambda - FaaS, function as a service or serverless computing. Upload code, and event, then code runs on the event happens Serverless REPO - Like lambda, but ready made functions, you dont write them. Outposts - Rent aws apis to run on own servers Snow - Little devices which run on hostile environment like antartica, so for scientist its there Elastic Container Registry - ECR - upload and Save docker images, for use by other services Elastic Container Service - ECS - Run docker images from ECR and create EC2 instances Elestic Kubernetes Service - EKS - Running docker in kubernetes for more control over scaling etc Fargate - Runs ECS like servless functions, no need for EC2 instance. More automation. APP Runner - If container is simple, easiest to run on App runner. Abstraction over other; handles orchestration and scaling automatically File Storage Simple Storage Service S3 - Save image, video, docs etc Glacier - If files not accessed a lot, this is cheap, but latency is high, meaning slow. Elastic Block Storage - Very fast, data processing type data. Lot of manual configurations. Elastic File System - Fast and managed, abstaction of all above, higher cost Database Simple DB - simple no sql database. One of the first products Dynamo DB - cheap, horizontal scaling, fast reads, bad at modeling like joins and limited queries Document DB - Exactly like mongo db, controvercial, uses mongodb backend, without telling Elastic Search - Full text search engine type RDS - Relational Database Service - Man options, many db etc; backups, patching scaling is managed by amazon Aurora - Like mySQL, but 5x faster at lower cost. Amazon Aurora Serverless - Exactly aurora but with serverless way of tackling db Neptune - Graph database Elastic Cache - Managed version of Redis; ultra fast Timestream - For time series data, like stock market with analytics too Quantum Ledger - Create immutable cryptographically signed transations like blockchain, but not distributed like blockchain Analytics Redshift - Data warehouse. Put in data from various sources into here, to enable SQL like queries and analytics over them Lake Formation - If unstructured data from various soruces, dump raw data here, then extract to redshift or other data warehouse. Kinesis - For real time streaming data and visualise into any data visualisation OR use stream processing tech like Apache Spark Map Reduce - Operate on Large mAssive data sets ::Side note --> kafka, flume, hdfs/s3, kinesis, twitter MSK - Managed Service for Kafka. This can be used instead of Kinesis. Glue - Serverless ETL tool, extract transform load. Can connect to other amazon services Glue Studio - Write jobs here, and everything happens, connect ec2, redshift, cloudwatch, lambda etc Data Exchange - Subscribe to 3rd party data providers and services to purchase or subscribe for high quality data. Machine Learning Sagemaker - tensorflow and pytorch based ML model making. Has managed jupyter notebook too. Rekognition - Pre made image recognition classification. Image analysis Lex - Conversational ML model, for chat etc, used by alexa too Deep Racer - A physical racecar, which can drive as per our machine learning model and do stuff Essentials IAM - Security Admin to control right on your aws account Cognito - Simpe User login and session management tool. Many authentication methods Simple Notification Service - SNS - Push notifications to users, maybe with cognito sessions above Simple Email Service - SES - Send emails to users Provisioning Cloud Formation - Yaml/ Json based cloud formation of all amazon services with a BLOODY FILE!! Like dockerfile and compose combo; or pods or maybe like vagrant... for all aws services! Amplify - SDKs for connecting and interacting with cloud formation or awas services using frontends, javascript, apple, android, web Budgets - Cost explorer for AWS","title":"Products brief"},{"location":"Certifications-and-Learning/competitive-programming/","text":"Competitive Programming Guide --> https://www.geeksforgeeks.org/how-to-prepare-for-competitive-programming/","title":"Competitive Programming"},{"location":"Certifications-and-Learning/competitive-programming/#competitive-programming","text":"Guide --> https://www.geeksforgeeks.org/how-to-prepare-for-competitive-programming/","title":"Competitive Programming"},{"location":"Certifications-and-Learning/creativity/","text":"Creativity All Adobe Products Auto lip sync --> https://www.adobe.com/in/products/character-animator.html","title":"Creativity"},{"location":"Certifications-and-Learning/creativity/#creativity","text":"All Adobe Products Auto lip sync --> https://www.adobe.com/in/products/character-animator.html","title":"Creativity"},{"location":"Certifications-and-Learning/design-patterns/","text":"Design Patterns LLD https://codewithmosh.com/courses/759570/lectures/13732272 Everything to do with OOP. To be a senior developer, you have to know all this. PERIOD. The whole topic seems to revolve around removing if..else and switch kind of statements, and make code extensible. For every new feature in a code, multiple if..else might be needed, implementation might be required to be updated in many places. To solve this, design patterns seems to be used. Static Methods - These can only be accessed from the class level, not object level. These have one memory location. Abstract Class - This can not be instantiated, object can not be made from it. Only child class can extend from it. Interface - Like abstract class, but this can not have any method implementation. These have only method signatures. - extends: use this on interface to create another interface. - implements: use this on interface to create a concrete class from interface. Concrete Class - This is an actual class created from abstract class or interface Generic Class - In typeScript Course - https://codewithmosh.com/courses/1779784/lectures/40256281 Basics Classes - Parent, which has objects and methods Coupling - If user class changes, main class breaks and also all other classes are to be re-compiled Interfaces - To address coupling issue, interface is made. A template to create class. In python its called abstract class. Keywords - implements override Encapsulation - If we need validations in setting a variable given in parent class, so we make private variables in user class, and change them using getter and setter with validations as needed. Abstraction - Removing complexity from end user and then creating a parent method, by chaining complex methods and expose parent method to user. Keyword: private public OR __ in python Inheritance - Inheriting methods and vars from parent Polymorphism - Many forms. Object instance having many forms. Abstract class in JAVA. Keywords - extends and override. UML - Unified Modeling Language - https://codewithmosh.com/courses/759570/lectures/13732320 Composition - When we create class by combining various other classes as needed. Principles and SOLID Refer SOLID Principles By Uncle Bob Single Responsibility Principle - Each class should do only one thing. Open Closed Principle - Class should be OPEN for extension and CLOSED for modification. Change in one class should not affect other classes - Iterator pattern Favor Composition over inheritance Sections Behavioural - related to classes and their interactions. 01 Momento Pattern -- Undo pattern - Single Responsibility Principle 02 State Pattern -- Based on state of one, the behavior of certain item change 03 Iterator Pattern -- Like browser history, push pop. like momento, but it gets dependent on a Iterator class, which is an interface. 04 Strategy Pattern -- Like state pattern, BUT each class item, refers a strategy class, which further have different methods 05 Template Method Pattern -- Instead of interface, we use Abstract Methods, to define methods. 06 Command Pattern -- Disconnect Invoker of a command, from the received of the command. 07 Observer Pattern -- Pull Push, Pub Sub type. Subscribe and unsubscribe. 08 Mediator Pattern -- Multiple Objects need to communicate to each other at every instance. A mediator abstract class is introduced. 09 Chain of Responsibility Pattern -- Handler and pipline based system. 10 Visitor Pattern -- Structural - related to objects and their interactions. 11-Composite-Pattern -- Hierarchy data related. Groups or groups. 12-Adapter-Pattern -- We wish to use different types of class, objects, vars using the same class. 13-Decorator-Pattern -- Adding features to a base interface and using them in various combinations. 14-Facade-Pattern -- Used to decouple classes. Main class interacts with a class, which further talks to classes. 15-Flyweight-Pattern -- Reducing memory usage in class. An object when needs to be shared with various classes. 16-Bridge-Pattern -- When multiple hierarchy present, and each can grow independently. Feature hierarchy is separated from Implementation Hierarchy 17-Proxy-Pattern -- An agent or proxy created between objects. Concept of LAZY INITIALIZATION. Loading only those objects which are needed on demand. Creational - related to creating objects from classes and interfaces. 18-Prototype-Pattern -- A base interface is defined called prototype and concrete classes are created from it. 19-Singleton-Pattern -- When we only need one instance of a class. Like configurations of a script. 20-Factory-Method-Pattern -- Defer creation of an object to subclass. 21-Abstract-Factory-Pattern -- Provide an interface for creating families of related objects. 22-Builder-Pattern -- Separate the CONSTRUCTION of an object from its REPRESENTATION.","title":"Design Patterns LLD"},{"location":"Certifications-and-Learning/design-patterns/#design-patterns-lld","text":"https://codewithmosh.com/courses/759570/lectures/13732272 Everything to do with OOP. To be a senior developer, you have to know all this. PERIOD. The whole topic seems to revolve around removing if..else and switch kind of statements, and make code extensible. For every new feature in a code, multiple if..else might be needed, implementation might be required to be updated in many places. To solve this, design patterns seems to be used. Static Methods - These can only be accessed from the class level, not object level. These have one memory location. Abstract Class - This can not be instantiated, object can not be made from it. Only child class can extend from it. Interface - Like abstract class, but this can not have any method implementation. These have only method signatures. - extends: use this on interface to create another interface. - implements: use this on interface to create a concrete class from interface. Concrete Class - This is an actual class created from abstract class or interface Generic Class - In typeScript Course - https://codewithmosh.com/courses/1779784/lectures/40256281","title":"Design Patterns LLD"},{"location":"Certifications-and-Learning/design-patterns/#basics","text":"Classes - Parent, which has objects and methods Coupling - If user class changes, main class breaks and also all other classes are to be re-compiled Interfaces - To address coupling issue, interface is made. A template to create class. In python its called abstract class. Keywords - implements override Encapsulation - If we need validations in setting a variable given in parent class, so we make private variables in user class, and change them using getter and setter with validations as needed. Abstraction - Removing complexity from end user and then creating a parent method, by chaining complex methods and expose parent method to user. Keyword: private public OR __ in python Inheritance - Inheriting methods and vars from parent Polymorphism - Many forms. Object instance having many forms. Abstract class in JAVA. Keywords - extends and override. UML - Unified Modeling Language - https://codewithmosh.com/courses/759570/lectures/13732320 Composition - When we create class by combining various other classes as needed.","title":"Basics"},{"location":"Certifications-and-Learning/design-patterns/#principles-and-solid","text":"Refer SOLID Principles By Uncle Bob Single Responsibility Principle - Each class should do only one thing. Open Closed Principle - Class should be OPEN for extension and CLOSED for modification. Change in one class should not affect other classes - Iterator pattern Favor Composition over inheritance","title":"Principles and SOLID"},{"location":"Certifications-and-Learning/design-patterns/#sections","text":"","title":"Sections"},{"location":"Certifications-and-Learning/design-patterns/#behavioural-related-to-classes-and-their-interactions","text":"01 Momento Pattern -- Undo pattern - Single Responsibility Principle 02 State Pattern -- Based on state of one, the behavior of certain item change 03 Iterator Pattern -- Like browser history, push pop. like momento, but it gets dependent on a Iterator class, which is an interface. 04 Strategy Pattern -- Like state pattern, BUT each class item, refers a strategy class, which further have different methods 05 Template Method Pattern -- Instead of interface, we use Abstract Methods, to define methods. 06 Command Pattern -- Disconnect Invoker of a command, from the received of the command. 07 Observer Pattern -- Pull Push, Pub Sub type. Subscribe and unsubscribe. 08 Mediator Pattern -- Multiple Objects need to communicate to each other at every instance. A mediator abstract class is introduced. 09 Chain of Responsibility Pattern -- Handler and pipline based system. 10 Visitor Pattern --","title":"Behavioural - related to classes and their interactions."},{"location":"Certifications-and-Learning/design-patterns/#structural-related-to-objects-and-their-interactions","text":"11-Composite-Pattern -- Hierarchy data related. Groups or groups. 12-Adapter-Pattern -- We wish to use different types of class, objects, vars using the same class. 13-Decorator-Pattern -- Adding features to a base interface and using them in various combinations. 14-Facade-Pattern -- Used to decouple classes. Main class interacts with a class, which further talks to classes. 15-Flyweight-Pattern -- Reducing memory usage in class. An object when needs to be shared with various classes. 16-Bridge-Pattern -- When multiple hierarchy present, and each can grow independently. Feature hierarchy is separated from Implementation Hierarchy 17-Proxy-Pattern -- An agent or proxy created between objects. Concept of LAZY INITIALIZATION. Loading only those objects which are needed on demand.","title":"Structural - related to objects and their interactions."},{"location":"Certifications-and-Learning/design-patterns/#creational-related-to-creating-objects-from-classes-and-interfaces","text":"18-Prototype-Pattern -- A base interface is defined called prototype and concrete classes are created from it. 19-Singleton-Pattern -- When we only need one instance of a class. Like configurations of a script. 20-Factory-Method-Pattern -- Defer creation of an object to subclass. 21-Abstract-Factory-Pattern -- Provide an interface for creating families of related objects. 22-Builder-Pattern -- Separate the CONSTRUCTION of an object from its REPRESENTATION.","title":"Creational - related to creating objects from classes and interfaces."},{"location":"Certifications-and-Learning/design-patterns/01-Momento-Pattern/","text":"","title":"01 Momento Pattern"},{"location":"Certifications-and-Learning/design-patterns/02-State-Pattern/","text":"Purpose When multiple if..else or switch statements are present. We know that in future more of such if..else or switch will be copied. Meaning we will have more features added. Meaning program will be extensible, then we use the pattern. Steps Here we make an interface called State. We create multiple classes from interface and override required methods, as needed with different logics. Then we have a main control class, called Context. Here we call required child, and then the methods. Based on child, method implementation changes. Important Considerations Do not abuse this method. Meaning: If we do not have case where program needs to be extensible, or new features will be added, simply use if else or Switch, no need for this pattern. NOTE: Difference between Interface and Abstract Class. Interface is a template to a class, which does not have any method implementation. Only method names are given. Abstract class is also a template to a class, but it can have methods implementations, which needs to be shared among its child. In Python we also have Protocol. Which differs in the sense that it can be used to make child nodes, and it will throw error only if method is not defined. While abstract class in python, when a child is instantiated, it will throw error at that time only, if we do not implement method given in the parent class.","title":"Purpose"},{"location":"Certifications-and-Learning/design-patterns/02-State-Pattern/#purpose","text":"When multiple if..else or switch statements are present. We know that in future more of such if..else or switch will be copied. Meaning we will have more features added. Meaning program will be extensible, then we use the pattern.","title":"Purpose"},{"location":"Certifications-and-Learning/design-patterns/02-State-Pattern/#steps","text":"Here we make an interface called State. We create multiple classes from interface and override required methods, as needed with different logics. Then we have a main control class, called Context. Here we call required child, and then the methods. Based on child, method implementation changes.","title":"Steps"},{"location":"Certifications-and-Learning/design-patterns/02-State-Pattern/#important-considerations","text":"Do not abuse this method. Meaning: If we do not have case where program needs to be extensible, or new features will be added, simply use if else or Switch, no need for this pattern. NOTE: Difference between Interface and Abstract Class. Interface is a template to a class, which does not have any method implementation. Only method names are given. Abstract class is also a template to a class, but it can have methods implementations, which needs to be shared among its child. In Python we also have Protocol. Which differs in the sense that it can be used to make child nodes, and it will throw error only if method is not defined. While abstract class in python, when a child is instantiated, it will throw error at that time only, if we do not implement method given in the parent class.","title":"Important Considerations"},{"location":"Certifications-and-Learning/design-patterns/03-Iterator-Pattern/","text":"It is almost exactly like State Pattern. The only difference I can see is that, each method defined in the class created from interface, has implementation of some kind of iterator. Like list iteration or array iteration. Concept of generic in java is also explained in the video. Purpose If something changes in a certain class, it should affect only that class. Remaining program should run without issues. No other class should be affected. Example, in browser we have history, with back button, forward button. We can save the links as list or dictionary or other DS. Now, back method for list or hash is different, so is forward. If we change the history DS, all other methods will break. Steps Make interface class with various iterators/ process defined. Iterators are methods in general terms. Create class from interface, and define iterator methods as needed. The main class, calls the interface processes, which calls specific iteration method from child. Important Considerations","title":"03 Iterator Pattern"},{"location":"Certifications-and-Learning/design-patterns/03-Iterator-Pattern/#purpose","text":"If something changes in a certain class, it should affect only that class. Remaining program should run without issues. No other class should be affected. Example, in browser we have history, with back button, forward button. We can save the links as list or dictionary or other DS. Now, back method for list or hash is different, so is forward. If we change the history DS, all other methods will break.","title":"Purpose"},{"location":"Certifications-and-Learning/design-patterns/03-Iterator-Pattern/#steps","text":"Make interface class with various iterators/ process defined. Iterators are methods in general terms. Create class from interface, and define iterator methods as needed. The main class, calls the interface processes, which calls specific iteration method from child.","title":"Steps"},{"location":"Certifications-and-Learning/design-patterns/03-Iterator-Pattern/#important-considerations","text":"","title":"Important Considerations"},{"location":"Certifications-and-Learning/design-patterns/04-Strategy-Pattern/","text":"Again, same as state pattern. One main class One Interface, called strategy. The classes with different method implementation. NOTE: State Pattern: Action is same in main class, mouse down up, but does different things. Iterator Pattern: Action is same in main class, but the way data is handled/ iterated is different in back end. Strategy Pattern: Action is different in main class, and calling of different actions done from the main class through interface based classes.","title":"04 Strategy Pattern"},{"location":"Certifications-and-Learning/design-patterns/05-Template-Method-Pattern/","text":"Primarily uses inheritance from Abstract Classes. (Not Interface!) We create abstract class, with all compulsory methods, which should be present in every instance of child. Since its abstract class, it can have some specific methods defined already, unlike interface, where only method name is present. Now concrete classes are made from abstract class. Since these are created from abstract classes, one can over ride the base methods if needed, else can be kept as it is. The methods defined in abstract class are called HOOKS.","title":"05 Template Method Pattern"},{"location":"Certifications-and-Learning/design-patterns/06-Command-Pattern/","text":"Concept of Frame Work. Imagine a button class. Which has label and a thing it can do. Now a service can use this button. And what the button does, depends on this service class. How? We make a button class with an action define. This action, calls a method from command class. Now, there is a service class, which has button, and action is add customer. This add customer action calls add customer class. This add customer class calls method from the command class. Invoker class talks to command interface. Concrete command class talks to command interface too. Receiver class talks to concrete command class. Here Invoker class and command interface is called Framework.","title":"06 Command Pattern"},{"location":"Certifications-and-Learning/design-patterns/07-Observer-Pattern/","text":"Its pub sub pattern. We have a Abstract Class Called subject. This has attach(observer), detach(observer) and notify() methods. Then we have an interface called Observer. This has update() method. Then we have concrete subject and concrete observers. It has two styles of communication. - https://codewithmosh.com/courses/759570/lectures/13732535 PUSH Style - Observer has update(value) method. PULL Style - Observer has update() AND and concrete subject has getValue() method.","title":"07 Observer Pattern"},{"location":"Certifications-and-Learning/design-patterns/08-Mediator-Pattern/","text":"We have a Mediator Abstract Class and a concrete class. Then we have a colleague interface and concrete Colleague class.","title":"08 Mediator Pattern"},{"location":"Certifications-and-Learning/design-patterns/09-Chain-of-Responsibility-Pattern/","text":"Concept of pipeline. Looks similar to state again, BUT here we have a class which has a handler. There is an Abstract class called Handler. This has pipeline of things to do. The things, which is does is calling other classes, one by one in sequence. The main class, talks to the handler class, and handler class calls required classes with methods in pipeline style.","title":"09 Chain of Responsibility Pattern"},{"location":"Certifications-and-Learning/design-patterns/10-Visitor-Pattern/","text":"Concept of Method Overloading. When object structure is stable. But we are not sure about operations.","title":"10 Visitor Pattern"},{"location":"Certifications-and-Learning/design-patterns/UML/","text":"UML https://codewithmosh.com/courses/759570/lectures/13732320 Box -- Class. Top section in box is class name. -positionX:int -- Variable. minus in start means private. Middle Section in box. +render() -- Method. plus in start means public. No colon means return type is void. End section in box. +render(): -- Method which returns value. The colon in the end tells this. Inheritance --> Black arrow from A to B class -- public class A extends B. A is created from B. B is parent. Composition --> Black arrow from A to B class with a solid square at A -- B inside A. public class A { private B }. Dependency --> Dotted arrow from A to B class -- In A we have reference to B using a method. In above, B is instantiated in A. Here B is called by a method in A.","title":"UML"},{"location":"Certifications-and-Learning/design-patterns/UML/#uml","text":"https://codewithmosh.com/courses/759570/lectures/13732320 Box -- Class. Top section in box is class name. -positionX:int -- Variable. minus in start means private. Middle Section in box. +render() -- Method. plus in start means public. No colon means return type is void. End section in box. +render(): -- Method which returns value. The colon in the end tells this. Inheritance --> Black arrow from A to B class -- public class A extends B. A is created from B. B is parent. Composition --> Black arrow from A to B class with a solid square at A -- B inside A. public class A { private B }. Dependency --> Dotted arrow from A to B class -- In A we have reference to B using a method. In above, B is instantiated in A. Here B is called by a method in A.","title":"UML"},{"location":"Certifications-and-Learning/docker/","text":"Docker and Containers Note: I am using podman instead of docker, and podman does not have podman-compose, which needs to be installed. Link to podman-compose Essentially all podmanc command can be replaced with docker if docker is used About dockerfile and docker-compose Good Tutorial on dockerfile and docker-compose for mern apps dockerfile <-- with this we build images, based on the way we want docker-compose <-- With this we spin up a combination of images with: networks for letting containers talk to each other and volumes which are shared on the host file with containers Format for building from dockerfile Build --> podman build -t imageName:tag -f dockerFileLocation . # The \".\" is there Enter terminal --> podman run -it imageName:tag Format for composing docker-compose Start --> podman-compose -f docker-composeLocation up # docker compose up Stop --> podman-compose -f docker-composeLocation down --volumes # docker compose down Mounting host drive to container podman run -it --volume locationOnHost:locationOnContainer containerName:tag Backing up and snapshots https://www.geeksforgeeks.org/backing-up-a-docker-container/ podman commit -p containerId newImageName <-- This will take snapshot of current state and make an image podman save -o ./my-backup.tar newImageName <-- This will save a tar file of the backed up image podman load --input ./newImageName.tar <-- To load the image back Push to docker hub if needed sudo docker login sudo docker push newImageName:latest Copy files from container to the host podman cp :/file/path/within/container /host/path/target Publishing images Publish files to docker and github package","title":"Docker and Containers"},{"location":"Certifications-and-Learning/docker/#docker-and-containers","text":"Note: I am using podman instead of docker, and podman does not have podman-compose, which needs to be installed. Link to podman-compose Essentially all podmanc command can be replaced with docker if docker is used","title":"Docker and Containers"},{"location":"Certifications-and-Learning/docker/#about-dockerfile-and-docker-compose","text":"Good Tutorial on dockerfile and docker-compose for mern apps dockerfile <-- with this we build images, based on the way we want docker-compose <-- With this we spin up a combination of images with: networks for letting containers talk to each other and volumes which are shared on the host file with containers Format for building from dockerfile Build --> podman build -t imageName:tag -f dockerFileLocation . # The \".\" is there Enter terminal --> podman run -it imageName:tag Format for composing docker-compose Start --> podman-compose -f docker-composeLocation up # docker compose up Stop --> podman-compose -f docker-composeLocation down --volumes # docker compose down","title":"About dockerfile and docker-compose"},{"location":"Certifications-and-Learning/docker/#mounting-host-drive-to-container","text":"podman run -it --volume locationOnHost:locationOnContainer containerName:tag","title":"Mounting host drive to container"},{"location":"Certifications-and-Learning/docker/#backing-up-and-snapshots","text":"https://www.geeksforgeeks.org/backing-up-a-docker-container/ podman commit -p containerId newImageName <-- This will take snapshot of current state and make an image podman save -o ./my-backup.tar newImageName <-- This will save a tar file of the backed up image podman load --input ./newImageName.tar <-- To load the image back","title":"Backing up and snapshots"},{"location":"Certifications-and-Learning/docker/#push-to-docker-hub-if-needed","text":"sudo docker login sudo docker push newImageName:latest","title":"Push to docker hub if needed"},{"location":"Certifications-and-Learning/docker/#copy-files-from-container-to-the-host","text":"podman cp :/file/path/within/container /host/path/target","title":"Copy files from container to the host"},{"location":"Certifications-and-Learning/docker/#publishing-images","text":"Publish files to docker and github package","title":"Publishing images"},{"location":"Certifications-and-Learning/languages/","text":"Objective Purpose is to learn and know 10 programming languages, with OOP and what each is best at. I wish to do it in the next 1 year. https://appetiser.com.au/blog/the-most-loved-and-hated-programming-languages-according-to-developers/ My List Python <-- Data science, large no. for libraries and good support. Very slow. Javascript , TypeScript and NodeJS <-- Mostly in web development. SQL <-- DB tech Solidity <-- For EVM for making smart contracts Rust <-- Very fast and fast builds Go <-- Very fast and fast builds Swift <-- Dont know, pretty famous, learn more Java <-- Fast but verbose, used a lot. Core to understand DSA and LLD C <-- Close to assembly language, not much used. C++ <-- Fastest, old and widely used C# <-- Not sure about it, I think micrsoft made it maybe; need to check WebAssembly (WASM) <-- Used instead of javascript for internet.... Very fast Clojure <-- High Salary - Data centric Dart <-- Pretty fast Elixir <-- High Salary - Very fast with concurrency Scala <-- Pretty famous Language independent basics to know General Basic Grammer The below are applied to all languages and should be learnt as they are what is asked in interviews. Its not about interview, in general it is easier to learn a new language if you know the below. LLD - Design Patterns, mostly OOP based. SOLID PRINCIPLES by uncle bob - Using LLD and OOP to write complex, extendable, stable code. HLD - System design, not a must, but good to know, as they become motivation for learning. DS - Data Structures. Which is good for what. Add, remove, traverse, sort and search. Algo - Greedy, Dynamic, Loops and Recursion. CS Jargon - What is what, most important. Individual Language Template Once you know the following, you can say you know the language. Basic 4 pillars of OOP - Encapsulation, Inheritance, Abstraction and Polymorphism. Variables, Constants, Primitive Types (string, int etc), Reference Types (Objects, Arrays, Functions) Operators - Arithmetic, Assignment, Comparison, Equality, Ternary, Logical, Bitwise Control Flow - if else, switch, for, while, do, break, continue. Garbage Collection and Memory Management. Advance Refactoring - Splitting code into files or modules Parameterizing - Not hard coding variables, each variable can be input later. Error Handling (try catch) - Custom Errors for things which do not work. Coding Style Guide Knowledge for the language - What to be placed where. Code formatting and linting - Proper tabs and spaces and comments. Doc String or JSDocs - Comments for auto documentations. Testing (Unit, Integration, System and Acceptance) - https://www.geeksforgeeks.org/software-testing-basics/ Concurrency, Parallelism, (Thread, Processes), Asynchronous - https://medium.com/swift-india/concurrency-parallelism-threads-processes-async-and-sync-related-39fd951bc61d Packaging and uploading to repo. Pro Contributing to other projects on github Wrapping different language libraries into different. Like bringing in c++ lib to python wrapper. Application Building Famous Frameworks Script, GUI and CLI. Desktop, Web and Mobile. Team work and Other Git complete Docker complete Modern Software Design https://www.arjancodes.com/mindset Mastering The Tools Setting Up Your Development Environment - Learn how to setup your development environment for success (this is more important than you think): which plugins/extensions to use and what settings to change to make your life easier. Types And Type Hints - Knowing what types and type hints are and how they work in Python is really important. In this lesson I dive into the details of type systems, how things work in Python, and show you best practices so you get the most out of using type hints. Data Structures - A core piece of software design is using data structures correctly. Each data structure has its own pros and cons. Knowing about these is going to help you take better decisions about which data structure to use when. Classes And Data Classes - Though this is not a complete introduction of object-oriented programming, I talk about classes and data classes in detail in this lesson and how they fit into software design. Inheritance, ABCs And Protocols - In the final lesson of this module, you learn about abstraction, which is a core element of software design. I cover the various ways in which you can achieve abstraction in Python to help you choose the best option for your design. The 7 Principles Of Modern Software Design The second part of the course presents the 7 Principles Of Modern Software Design. It takes many of the existing design principles and adapts them to the needs of the modern software designer. It goes way beyond object-oriented design by teaching you generic principles that apply to any programming language and paradigm, whether that\u2019s object-oriented, purely procedural, or functional. Favor Composition Over Inheritance - Learn how to approach inheritance in code and use it in a balanced way by looking at several code examples. High Cohesion - Various techniques for making sure that the code you write has clear responsibilities. Low Coupling - Learn how to reduce coupling between different areas of your application so that your code is easier to maintain in the future. Start With The Data - What role does data play in the design process? When should we think about data and data structures in software design? And what is a practical process for modeling the data structures in your software? Depend On Abstractions - Abstractions such as ABCs and Protocols help reduce dependencies. In this lesson I show you how to use these abstractions effectively. Separate Creation From Use - You learn different ways of creating objects in a software system, and how to have better control as a software developer over how and when objects are being created. Keep Things Simple - As a software developer, how do you keep things simple? I talk about different ways to make sure your code stays simple, even if the application itself is complex. Being A Responsible Developer Mixins - You learn what Mixins are, why you need to be very careful with them, and what the much better alternatives are. Dealing With Errors - Any application has to properly deal with errors. Here you learn how error handling works in Python, what the different possibilities are as well as some of the more advanced error handling mechanisms such as context managers. Setting Up A Complex Software Project - Learn about files, folders, modules, packages, absolute and relative imports. Learn how to structure your code properly, and what should generally be in a code repository. Core Concepts Software Design Patterns Book - Design Patterns by Gang of Four LOL https://youtu.be/tv-_1er1mWI?t=33 Look Link --> https://refactoring.guru/design-patterns/ C --> Creational Patterns S --> Structural Patterns B --> Behavioural Patterns Singleton - C - Only once instantiated. Prototype - C - Inheritance from object created object, rather the class. Builder - C - Create object in step by step using methods instead of constructor, which does all at once. Chaining methods. Factory - C - Instantiate from method or function rather than a variable manually. Facade - S - Abstract away details. Make a sub class (facade) and create methods from parent complex class. Combining methods and functions to give final easy methods and functions to sub class. Proxy - S - Replace original with a proxy, then work on proxy, in the end handle actual object. Iterator - B - Normal iterations in steps. Pull Based System. Observer - B - Push Based system. One to Many relationship. Pub Sub kind of model, where one event broadcast and many listen. Kafta Redis RabbitMQ type. Mediator - B - Many to Many relationship. Many broadcast, many consume type. State - B - Using conditional logics and switch statements to make object behave differently. OR create different class for different states. refer this part of video interface, then class implements... is used. THEN there is MONADS https://www.youtube.com/watch?v=VgA4wCaxp-Q Here aim is to make class chainable, which enables pipeline style of working. Architectural Patterns Video --> https://www.youtube.com/watch?v=BrT3AO8bVQY Layered Pattern or n-tier architecture (Poor performance) Presentation Layer Application Layer Business Logic Layer Data Access Layer Pipe-Filter Pattern Shoot an event after event, piping the actions. Input > Pipe > Filter > Pipe > Filter ... > Output Client-Server Pattern Client and Server. Communication with API. MVC - Model View Controller Pattern (Used in Django and Rails) Model -- update view View -- seen by user **End User -- uses controller (not part, just to demonstrate the flow) Controller -- manipulates model Event Bus Pattern (scalability kind of issue) Sounds like Broker pattern Event Source (Publisher) Event Bus (Ditributor like rabbitmq redis kafka) Event Listener (Subscriber) Micro-services Architecture Pattern Client - Front Ends API gateways Services - Backend Broker Pattern Its like micro-services, but uses broker in between rather than direct API gateways. Client Broker (RabbitMQ/ redis type system) Services Peer-to-peer pattern (highly scalable, distributed) Every participant is client and service at the same time. Blockchain, IPFS are examples. Blackboard Pattern When no deterministic patterns are known. Pattern matching done. Used in speech recognition, protein structure analysis Blackboard (like a global memory containing objects) Knowledge Source (specialised modules with their own representation) Control Components (selects configures the modules in knowledge source) Input > Blackboard > Notify Controller > Enrolls Knowledge Source > Updates Blackboard Master-Slave Pattern (only if problem can be decomposed, this can be used) Master Many Identical Slaves Master distribute work to slaves, slaves give back result to master and master combines and gives output. Loosely like Concurrency or asyncio or threading. Remember the corrlation of all symbols to all symbols I made. Now processing in python was very slow due to single core execution. I wanted to execute it in multiple cores, hence I needed to decompose the problem so that it can be done on multicore. Solution is to use permutations on list of symbols, in group of 8s (number of cores), then execute the correlation function. Difference Between Solution, Enterprise and Software Architects https://www.youtube.com/watch?v=zB9WuYE1REI The Jargon UML --> Unified Modeling Language - Visualizing how software works -Requirements (objective) > User Stories (what, how etc) > Format for engineers (UML) Static typed - If we can not change variables later. Define type initially. Dynamic typed - If we can change variables later. No need to define type. TDD - Test Driven Development Multi Paradigm Languages - Meaning all types of programming styles allowed. Like python and Javascript. Dynamic programming -- Cacheing results Greedy Algorithm -- Find fastest solution Reactive Programming -- Event driven OOP -- Data object based Functional Programming -- By functions and sequence Procedural Programming -- In sequence procedures Aspect-Oriented refactoring - Breaking up a big code into smaller chunks paramatrizing - Not hard coding variables, rather passing variables its value from other variables or list Link to testing, wrt solidity unit test - testing our small portion, sections of code like functions individually using asset and all staging or integration tests - code base as a whole is tested, in largest chunks. This is LAST STOP, just before actual deployment. https://www.youtube.com/watch?v=-uleG_Vecis Turing Machine Bit, Byte ASCII Binary, Hexidecimal Nibble - 4 bit group Machine Code Memory Address on RAM I/O Kernels - Speaks to hardware Shell - On top of Kernel, entry point for user CLI - Command Line Interface to connect with local shell SSH - Secure Shell Protocol to connect to computers over network Abstraction Principal - Hide complexities and give a simple interaction Interpreted Language - A program Line by line execute on cpu Complied - As a whole converted to machine code and then sent to cpu Executable - Stand Alone file to run a program without dependencies Data Types - String, Bitmap, Bitfield, Hash, List, Set, Sorted Set, Geospatial, Hyperlog, Stream Dynamically Typed - No need to tell data types of varibales at declaration (eg python) Statically Typed - Data types for each variables must be defined at declaration (javascript, solidity) Pointer - It is a variable whos value is memory address of the other variable Garbage Collector - No one wants to manage memory at low level, hence garbage collector is used. Int : Signed or unsigned eg signed allows negative numbers Floating Point/ Float Double : Float to use double the memory for higher accuracy Char : Single alphabet String : Multiple alphabets Boolean : true false Big Endian: If order in memory starts with most significant byte is stored in smallest memory address Little Endian: When least significant byte is stored in smallest memory address Data Structures: Array - list style [ ] List - Indexed [ 0 1 2 3 ... ] Linked List - Each item has pointer to the next item Stack - LIFO - last in first out Queue - FIFO - first in first out Hash, Dictionary or Map, all is same - Linear way to store data - key value pair style { } Trees - Since organising data in linear way is not efficient in traversing, trees are used which stores data in hierarchy Graph - Trees are very rigid kind of data structure, hence graph is used where 1. Nodes - The data itself 2. Edge - Relationships Algorithm Function - Takes input with arguments and returns output Void Function - Does not return anything Operators like > != etc Expression - Code that Produces value: a_is_bigger = a > b; Gives true or false Statement - Code that does something; if a: {do something} else {do something else} Conditional Logic, if else while Loop is for Iterable data type: for Recursion: when function calls itself, essentially forming a loop Call Stack - In recursion, each time function run, in short term memory function is put in call stack Stack Overflow Error - When memory gets full due to call stack, we get stack overflow error Base condition - Needed to stop the recursion or loop to prevent stack overflow error --> eg if i > 10; Big-O Notation - Approcimate the performance of algorithm at scale eg O(n) O(1) O(log n) O(n!) O(n^2) O(2^n) Time Complexity - How much time taken, how fast Space Complexity - How much memory used Types Brute Force - Try out each and every combination, like in hacking passwords Divide and Conquer - Like binary search, dividing problem in halves Dynamic Programming - Problem divided into smaller sub problems and output of each sub problem is cached so that it can be used later by other sub problems Memoization - Technique where existing value is used instead of calculating from scratch. In the dynamic programming. Greedy Algorithm - Finds result by making choice most beneficial in short term without considering problem as a whole, hence ignoring the best/ optimal solution. Example - Dijkstra's Shortest Path Algo Backtracking Algorithm - Incremental way looking at all options before making a choice. Implementing Code Declarative - describes what program does and the outcome. Ignores control flow. Functional Languages like Haskell uses it. Imperative - Uses statements like if's and while loops, to explicitly tell how to produce outcomes. Procedural programming language like C uses it. General Purpose Languages - Like python, javascript Kotlin swift, which can be used for anything Multiparadigm Languages - They support declarative and imperative style of coding at the same time general purpose languages are usually multiparadigm Object Oriented Programming Classes - Like a main head function Properties - All variables in the classes Inheritance - Sharing behaviours between classes. Example, make a class1 and then class2 which takes a copy class1, called inheritance and then add / modify functionalities. This opens to a new topic called Design Patterns Design Patterns - The way we build various classes and how inheritance done, various studies on it. Instantiate - Class does not do anything by itself. Hence it is instantiated into a variable where they are used and actual data lives in the memory. Heap - When a class is instantiated into multiple variables, it takes space in the memory, which we know that in case of recursion used call stack; but here instead of call stack HEAP is used since the data has to be long lived. In case of call stack, data in memory is not long lived. Reference - Objects passed by reference means that the same object can be used in multiple variables without increasing data memory footprint, since only pointers are used to refer data. Threads - Takes physical CPU core and breaks into multiple virtual cores called threads. Parallelism - Programming languages when run code in multi-thread by default Concurrency - But most languages are single threaded, hence to enable multi thread processing, concurrency is used. Event loops Co-routines Bare Metal - Directly working on physical computer Cloud - Working in a virtual machine created on a remote server and working on that. Virtual Machine - A piece of software which simulates a bare metal machine hardware. Big fast computers this way divided into smaller computers. Networking - Connecting various computers together IP Address - A number address, which points to a machine in a network URL - An alias of IP address, since IP are like numbers, we wrap a name, like google.com DNS - A kind of register, which IP address points to which URL, kind of table is present. TCP - Transmission Control Protocol. When two computer need to establish connection. a handshake is needed, which is done by TCP handshake. Packets - Once by using TCP, two computers connect, now they can exchange data, in small chunks called packets SSL - Secure Sockets Layer - Now if packets are shared on the internet, they can be viewed by anyone, Hence we secure the packets with encryption and decryption using SSL HTTP - Now we have connection with TCP, packets of data is ready and SSL secured them,now we use HTTP, Hyper Text Transfer Protocol, which allows the actual sharing of data. API - Application Programming Interface. This is they way data is requested using HTTP. URI - Uniform Resource Identifier - Like in API, the links to methods of calling specific data from URL URL - Uniform Resource Locator - This is location to the data itself","title":"Objective"},{"location":"Certifications-and-Learning/languages/#objective","text":"Purpose is to learn and know 10 programming languages, with OOP and what each is best at. I wish to do it in the next 1 year. https://appetiser.com.au/blog/the-most-loved-and-hated-programming-languages-according-to-developers/","title":"Objective"},{"location":"Certifications-and-Learning/languages/#my-list","text":"Python <-- Data science, large no. for libraries and good support. Very slow. Javascript , TypeScript and NodeJS <-- Mostly in web development. SQL <-- DB tech Solidity <-- For EVM for making smart contracts Rust <-- Very fast and fast builds Go <-- Very fast and fast builds Swift <-- Dont know, pretty famous, learn more Java <-- Fast but verbose, used a lot. Core to understand DSA and LLD C <-- Close to assembly language, not much used. C++ <-- Fastest, old and widely used C# <-- Not sure about it, I think micrsoft made it maybe; need to check WebAssembly (WASM) <-- Used instead of javascript for internet.... Very fast Clojure <-- High Salary - Data centric Dart <-- Pretty fast Elixir <-- High Salary - Very fast with concurrency Scala <-- Pretty famous","title":"My List"},{"location":"Certifications-and-Learning/languages/#language-independent-basics-to-know","text":"General Basic Grammer The below are applied to all languages and should be learnt as they are what is asked in interviews. Its not about interview, in general it is easier to learn a new language if you know the below. LLD - Design Patterns, mostly OOP based. SOLID PRINCIPLES by uncle bob - Using LLD and OOP to write complex, extendable, stable code. HLD - System design, not a must, but good to know, as they become motivation for learning. DS - Data Structures. Which is good for what. Add, remove, traverse, sort and search. Algo - Greedy, Dynamic, Loops and Recursion. CS Jargon - What is what, most important.","title":"Language independent basics to know"},{"location":"Certifications-and-Learning/languages/#individual-language-template","text":"Once you know the following, you can say you know the language.","title":"Individual Language Template"},{"location":"Certifications-and-Learning/languages/#basic","text":"4 pillars of OOP - Encapsulation, Inheritance, Abstraction and Polymorphism. Variables, Constants, Primitive Types (string, int etc), Reference Types (Objects, Arrays, Functions) Operators - Arithmetic, Assignment, Comparison, Equality, Ternary, Logical, Bitwise Control Flow - if else, switch, for, while, do, break, continue. Garbage Collection and Memory Management.","title":"Basic"},{"location":"Certifications-and-Learning/languages/#advance","text":"Refactoring - Splitting code into files or modules Parameterizing - Not hard coding variables, each variable can be input later. Error Handling (try catch) - Custom Errors for things which do not work. Coding Style Guide Knowledge for the language - What to be placed where. Code formatting and linting - Proper tabs and spaces and comments. Doc String or JSDocs - Comments for auto documentations. Testing (Unit, Integration, System and Acceptance) - https://www.geeksforgeeks.org/software-testing-basics/ Concurrency, Parallelism, (Thread, Processes), Asynchronous - https://medium.com/swift-india/concurrency-parallelism-threads-processes-async-and-sync-related-39fd951bc61d Packaging and uploading to repo.","title":"Advance"},{"location":"Certifications-and-Learning/languages/#pro","text":"Contributing to other projects on github Wrapping different language libraries into different. Like bringing in c++ lib to python wrapper.","title":"Pro"},{"location":"Certifications-and-Learning/languages/#application-building","text":"Famous Frameworks Script, GUI and CLI. Desktop, Web and Mobile.","title":"Application Building"},{"location":"Certifications-and-Learning/languages/#team-work-and-other","text":"Git complete Docker complete","title":"Team work and Other"},{"location":"Certifications-and-Learning/languages/#modern-software-design","text":"https://www.arjancodes.com/mindset","title":"Modern Software Design"},{"location":"Certifications-and-Learning/languages/#mastering-the-tools","text":"Setting Up Your Development Environment - Learn how to setup your development environment for success (this is more important than you think): which plugins/extensions to use and what settings to change to make your life easier. Types And Type Hints - Knowing what types and type hints are and how they work in Python is really important. In this lesson I dive into the details of type systems, how things work in Python, and show you best practices so you get the most out of using type hints. Data Structures - A core piece of software design is using data structures correctly. Each data structure has its own pros and cons. Knowing about these is going to help you take better decisions about which data structure to use when. Classes And Data Classes - Though this is not a complete introduction of object-oriented programming, I talk about classes and data classes in detail in this lesson and how they fit into software design. Inheritance, ABCs And Protocols - In the final lesson of this module, you learn about abstraction, which is a core element of software design. I cover the various ways in which you can achieve abstraction in Python to help you choose the best option for your design.","title":"Mastering The Tools"},{"location":"Certifications-and-Learning/languages/#the-7-principles-of-modern-software-design","text":"The second part of the course presents the 7 Principles Of Modern Software Design. It takes many of the existing design principles and adapts them to the needs of the modern software designer. It goes way beyond object-oriented design by teaching you generic principles that apply to any programming language and paradigm, whether that\u2019s object-oriented, purely procedural, or functional. Favor Composition Over Inheritance - Learn how to approach inheritance in code and use it in a balanced way by looking at several code examples. High Cohesion - Various techniques for making sure that the code you write has clear responsibilities. Low Coupling - Learn how to reduce coupling between different areas of your application so that your code is easier to maintain in the future. Start With The Data - What role does data play in the design process? When should we think about data and data structures in software design? And what is a practical process for modeling the data structures in your software? Depend On Abstractions - Abstractions such as ABCs and Protocols help reduce dependencies. In this lesson I show you how to use these abstractions effectively. Separate Creation From Use - You learn different ways of creating objects in a software system, and how to have better control as a software developer over how and when objects are being created. Keep Things Simple - As a software developer, how do you keep things simple? I talk about different ways to make sure your code stays simple, even if the application itself is complex.","title":"The 7 Principles Of Modern Software Design"},{"location":"Certifications-and-Learning/languages/#being-a-responsible-developer","text":"Mixins - You learn what Mixins are, why you need to be very careful with them, and what the much better alternatives are. Dealing With Errors - Any application has to properly deal with errors. Here you learn how error handling works in Python, what the different possibilities are as well as some of the more advanced error handling mechanisms such as context managers. Setting Up A Complex Software Project - Learn about files, folders, modules, packages, absolute and relative imports. Learn how to structure your code properly, and what should generally be in a code repository.","title":"Being A Responsible Developer"},{"location":"Certifications-and-Learning/languages/#core-concepts","text":"","title":"Core Concepts"},{"location":"Certifications-and-Learning/languages/#software-design-patterns","text":"Book - Design Patterns by Gang of Four LOL https://youtu.be/tv-_1er1mWI?t=33 Look Link --> https://refactoring.guru/design-patterns/ C --> Creational Patterns S --> Structural Patterns B --> Behavioural Patterns Singleton - C - Only once instantiated. Prototype - C - Inheritance from object created object, rather the class. Builder - C - Create object in step by step using methods instead of constructor, which does all at once. Chaining methods. Factory - C - Instantiate from method or function rather than a variable manually. Facade - S - Abstract away details. Make a sub class (facade) and create methods from parent complex class. Combining methods and functions to give final easy methods and functions to sub class. Proxy - S - Replace original with a proxy, then work on proxy, in the end handle actual object. Iterator - B - Normal iterations in steps. Pull Based System. Observer - B - Push Based system. One to Many relationship. Pub Sub kind of model, where one event broadcast and many listen. Kafta Redis RabbitMQ type. Mediator - B - Many to Many relationship. Many broadcast, many consume type. State - B - Using conditional logics and switch statements to make object behave differently. OR create different class for different states. refer this part of video interface, then class implements... is used. THEN there is MONADS https://www.youtube.com/watch?v=VgA4wCaxp-Q Here aim is to make class chainable, which enables pipeline style of working.","title":"Software Design Patterns"},{"location":"Certifications-and-Learning/languages/#architectural-patterns","text":"Video --> https://www.youtube.com/watch?v=BrT3AO8bVQY","title":"Architectural Patterns"},{"location":"Certifications-and-Learning/languages/#layered-pattern-or-n-tier-architecture-poor-performance","text":"Presentation Layer Application Layer Business Logic Layer Data Access Layer","title":"Layered Pattern or n-tier architecture (Poor performance)"},{"location":"Certifications-and-Learning/languages/#pipe-filter-pattern","text":"Shoot an event after event, piping the actions. Input > Pipe > Filter > Pipe > Filter ... > Output","title":"Pipe-Filter Pattern"},{"location":"Certifications-and-Learning/languages/#client-server-pattern","text":"Client and Server. Communication with API.","title":"Client-Server Pattern"},{"location":"Certifications-and-Learning/languages/#mvc-model-view-controller-pattern-used-in-django-and-rails","text":"Model -- update view View -- seen by user **End User -- uses controller (not part, just to demonstrate the flow) Controller -- manipulates model","title":"MVC - Model View Controller Pattern (Used in Django and Rails)"},{"location":"Certifications-and-Learning/languages/#event-bus-pattern-scalability-kind-of-issue","text":"Sounds like Broker pattern Event Source (Publisher) Event Bus (Ditributor like rabbitmq redis kafka) Event Listener (Subscriber)","title":"Event Bus Pattern (scalability kind of issue)"},{"location":"Certifications-and-Learning/languages/#micro-services-architecture-pattern","text":"Client - Front Ends API gateways Services - Backend","title":"Micro-services Architecture Pattern"},{"location":"Certifications-and-Learning/languages/#broker-pattern","text":"Its like micro-services, but uses broker in between rather than direct API gateways. Client Broker (RabbitMQ/ redis type system) Services","title":"Broker Pattern"},{"location":"Certifications-and-Learning/languages/#peer-to-peer-pattern-highly-scalable-distributed","text":"Every participant is client and service at the same time. Blockchain, IPFS are examples.","title":"Peer-to-peer pattern (highly scalable, distributed)"},{"location":"Certifications-and-Learning/languages/#blackboard-pattern","text":"When no deterministic patterns are known. Pattern matching done. Used in speech recognition, protein structure analysis Blackboard (like a global memory containing objects) Knowledge Source (specialised modules with their own representation) Control Components (selects configures the modules in knowledge source) Input > Blackboard > Notify Controller > Enrolls Knowledge Source > Updates Blackboard","title":"Blackboard Pattern"},{"location":"Certifications-and-Learning/languages/#master-slave-pattern-only-if-problem-can-be-decomposed-this-can-be-used","text":"Master Many Identical Slaves Master distribute work to slaves, slaves give back result to master and master combines and gives output. Loosely like Concurrency or asyncio or threading. Remember the corrlation of all symbols to all symbols I made. Now processing in python was very slow due to single core execution. I wanted to execute it in multiple cores, hence I needed to decompose the problem so that it can be done on multicore. Solution is to use permutations on list of symbols, in group of 8s (number of cores), then execute the correlation function.","title":"Master-Slave Pattern (only if problem can be decomposed, this can be used)"},{"location":"Certifications-and-Learning/languages/#difference-between-solution-enterprise-and-software-architects","text":"https://www.youtube.com/watch?v=zB9WuYE1REI","title":"Difference Between Solution, Enterprise and Software Architects"},{"location":"Certifications-and-Learning/languages/#the-jargon","text":"UML --> Unified Modeling Language - Visualizing how software works -Requirements (objective) > User Stories (what, how etc) > Format for engineers (UML) Static typed - If we can not change variables later. Define type initially. Dynamic typed - If we can change variables later. No need to define type. TDD - Test Driven Development Multi Paradigm Languages - Meaning all types of programming styles allowed. Like python and Javascript. Dynamic programming -- Cacheing results Greedy Algorithm -- Find fastest solution Reactive Programming -- Event driven OOP -- Data object based Functional Programming -- By functions and sequence Procedural Programming -- In sequence procedures Aspect-Oriented refactoring - Breaking up a big code into smaller chunks paramatrizing - Not hard coding variables, rather passing variables its value from other variables or list Link to testing, wrt solidity unit test - testing our small portion, sections of code like functions individually using asset and all staging or integration tests - code base as a whole is tested, in largest chunks. This is LAST STOP, just before actual deployment. https://www.youtube.com/watch?v=-uleG_Vecis Turing Machine Bit, Byte ASCII Binary, Hexidecimal Nibble - 4 bit group Machine Code Memory Address on RAM I/O Kernels - Speaks to hardware Shell - On top of Kernel, entry point for user CLI - Command Line Interface to connect with local shell SSH - Secure Shell Protocol to connect to computers over network Abstraction Principal - Hide complexities and give a simple interaction Interpreted Language - A program Line by line execute on cpu Complied - As a whole converted to machine code and then sent to cpu Executable - Stand Alone file to run a program without dependencies Data Types - String, Bitmap, Bitfield, Hash, List, Set, Sorted Set, Geospatial, Hyperlog, Stream Dynamically Typed - No need to tell data types of varibales at declaration (eg python) Statically Typed - Data types for each variables must be defined at declaration (javascript, solidity) Pointer - It is a variable whos value is memory address of the other variable Garbage Collector - No one wants to manage memory at low level, hence garbage collector is used. Int : Signed or unsigned eg signed allows negative numbers Floating Point/ Float Double : Float to use double the memory for higher accuracy Char : Single alphabet String : Multiple alphabets Boolean : true false Big Endian: If order in memory starts with most significant byte is stored in smallest memory address Little Endian: When least significant byte is stored in smallest memory address Data Structures: Array - list style [ ] List - Indexed [ 0 1 2 3 ... ] Linked List - Each item has pointer to the next item Stack - LIFO - last in first out Queue - FIFO - first in first out Hash, Dictionary or Map, all is same - Linear way to store data - key value pair style { } Trees - Since organising data in linear way is not efficient in traversing, trees are used which stores data in hierarchy Graph - Trees are very rigid kind of data structure, hence graph is used where 1. Nodes - The data itself 2. Edge - Relationships Algorithm Function - Takes input with arguments and returns output Void Function - Does not return anything Operators like > != etc Expression - Code that Produces value: a_is_bigger = a > b; Gives true or false Statement - Code that does something; if a: {do something} else {do something else} Conditional Logic, if else while Loop is for Iterable data type: for Recursion: when function calls itself, essentially forming a loop Call Stack - In recursion, each time function run, in short term memory function is put in call stack Stack Overflow Error - When memory gets full due to call stack, we get stack overflow error Base condition - Needed to stop the recursion or loop to prevent stack overflow error --> eg if i > 10; Big-O Notation - Approcimate the performance of algorithm at scale eg O(n) O(1) O(log n) O(n!) O(n^2) O(2^n) Time Complexity - How much time taken, how fast Space Complexity - How much memory used Types Brute Force - Try out each and every combination, like in hacking passwords Divide and Conquer - Like binary search, dividing problem in halves Dynamic Programming - Problem divided into smaller sub problems and output of each sub problem is cached so that it can be used later by other sub problems Memoization - Technique where existing value is used instead of calculating from scratch. In the dynamic programming. Greedy Algorithm - Finds result by making choice most beneficial in short term without considering problem as a whole, hence ignoring the best/ optimal solution. Example - Dijkstra's Shortest Path Algo Backtracking Algorithm - Incremental way looking at all options before making a choice. Implementing Code Declarative - describes what program does and the outcome. Ignores control flow. Functional Languages like Haskell uses it. Imperative - Uses statements like if's and while loops, to explicitly tell how to produce outcomes. Procedural programming language like C uses it. General Purpose Languages - Like python, javascript Kotlin swift, which can be used for anything Multiparadigm Languages - They support declarative and imperative style of coding at the same time general purpose languages are usually multiparadigm Object Oriented Programming Classes - Like a main head function Properties - All variables in the classes Inheritance - Sharing behaviours between classes. Example, make a class1 and then class2 which takes a copy class1, called inheritance and then add / modify functionalities. This opens to a new topic called Design Patterns Design Patterns - The way we build various classes and how inheritance done, various studies on it. Instantiate - Class does not do anything by itself. Hence it is instantiated into a variable where they are used and actual data lives in the memory. Heap - When a class is instantiated into multiple variables, it takes space in the memory, which we know that in case of recursion used call stack; but here instead of call stack HEAP is used since the data has to be long lived. In case of call stack, data in memory is not long lived. Reference - Objects passed by reference means that the same object can be used in multiple variables without increasing data memory footprint, since only pointers are used to refer data. Threads - Takes physical CPU core and breaks into multiple virtual cores called threads. Parallelism - Programming languages when run code in multi-thread by default Concurrency - But most languages are single threaded, hence to enable multi thread processing, concurrency is used. Event loops Co-routines Bare Metal - Directly working on physical computer Cloud - Working in a virtual machine created on a remote server and working on that. Virtual Machine - A piece of software which simulates a bare metal machine hardware. Big fast computers this way divided into smaller computers. Networking - Connecting various computers together IP Address - A number address, which points to a machine in a network URL - An alias of IP address, since IP are like numbers, we wrap a name, like google.com DNS - A kind of register, which IP address points to which URL, kind of table is present. TCP - Transmission Control Protocol. When two computer need to establish connection. a handshake is needed, which is done by TCP handshake. Packets - Once by using TCP, two computers connect, now they can exchange data, in small chunks called packets SSL - Secure Sockets Layer - Now if packets are shared on the internet, they can be viewed by anyone, Hence we secure the packets with encryption and decryption using SSL HTTP - Now we have connection with TCP, packets of data is ready and SSL secured them,now we use HTTP, Hyper Text Transfer Protocol, which allows the actual sharing of data. API - Application Programming Interface. This is they way data is requested using HTTP. URI - Uniform Resource Identifier - Like in API, the links to methods of calling specific data from URL URL - Uniform Resource Locator - This is location to the data itself","title":"The Jargon"},{"location":"Certifications-and-Learning/languages/General-Basic-Grammer/","text":"Intro There is a set of grammar that is common to all computer languages which is to be learned. Aspects of Computer Programming analogous to human languages Basic rules - Like alphabets, grammar rules in normal language. Logic - Like creating sentences, and paragraphs. Art - Like creating content on specific topics. Basic Rules Primitive Types - string, numbers, type conversion, integers, floats, doubles, null, undefined, NaN Reference Types - objects, functions Operators - Comparison, Conditional, Ternary, Logical, Assignment, Bitwise, Non Boolean like falsy truthy Control Flow - Short-circuit evaluation; Loops, Recursions; Break, Continue, Pass Functions - Arguments, Key Word Arguments, Default Arguments, Scope, Anonymous Data Structures - Array(list), Hashmap (dictionary), tuples, sets, enums etc DS operations - packing, unpacking; enumerations, each, map, reduce; joining, splitting, filtering, mapping, reducing; looping; adding, removing, sorting, finding items; list comprehensions etc OOP - Class, Constructor, Methods, Static Methods, Private Methods, Attributes, Private members(abstraction), Getters, Setters, Method Overriding, Interfaces (abstract classes, protocol), Inheritance, Composition, Encapsulation, Polymorphism, Duck Typing, Magic Methods like repr, print, comparison, eq, gt etc etc Exceptions Handling and debugging - try except; raising Other Extra - Date Formats, printing, user inputs, file IO, OS control Documenting and Commenting - doc string like Concurrency and Threading, Processes, Async Module handling and creation - remote repository Package Managers - remote repository Testing - TDD (Test Driven Development) - Unit, Integration and E2E (end to end); assert Finally Domain Specific Applications ... <-- here is where most people are, who are not from CS background, and learning from youtube Logic All about learning Algorithims Dynamic Programming Greedy Loops, if else and recursions Art OOP Functional programming","title":"Intro"},{"location":"Certifications-and-Learning/languages/General-Basic-Grammer/#intro","text":"There is a set of grammar that is common to all computer languages which is to be learned. Aspects of Computer Programming analogous to human languages Basic rules - Like alphabets, grammar rules in normal language. Logic - Like creating sentences, and paragraphs. Art - Like creating content on specific topics.","title":"Intro"},{"location":"Certifications-and-Learning/languages/General-Basic-Grammer/#basic-rules","text":"Primitive Types - string, numbers, type conversion, integers, floats, doubles, null, undefined, NaN Reference Types - objects, functions Operators - Comparison, Conditional, Ternary, Logical, Assignment, Bitwise, Non Boolean like falsy truthy Control Flow - Short-circuit evaluation; Loops, Recursions; Break, Continue, Pass Functions - Arguments, Key Word Arguments, Default Arguments, Scope, Anonymous Data Structures - Array(list), Hashmap (dictionary), tuples, sets, enums etc DS operations - packing, unpacking; enumerations, each, map, reduce; joining, splitting, filtering, mapping, reducing; looping; adding, removing, sorting, finding items; list comprehensions etc OOP - Class, Constructor, Methods, Static Methods, Private Methods, Attributes, Private members(abstraction), Getters, Setters, Method Overriding, Interfaces (abstract classes, protocol), Inheritance, Composition, Encapsulation, Polymorphism, Duck Typing, Magic Methods like repr, print, comparison, eq, gt etc etc Exceptions Handling and debugging - try except; raising Other Extra - Date Formats, printing, user inputs, file IO, OS control Documenting and Commenting - doc string like Concurrency and Threading, Processes, Async Module handling and creation - remote repository Package Managers - remote repository Testing - TDD (Test Driven Development) - Unit, Integration and E2E (end to end); assert Finally Domain Specific Applications ... <-- here is where most people are, who are not from CS background, and learning from youtube","title":"Basic Rules"},{"location":"Certifications-and-Learning/languages/General-Basic-Grammer/#logic","text":"All about learning Algorithims Dynamic Programming Greedy Loops, if else and recursions","title":"Logic"},{"location":"Certifications-and-Learning/languages/General-Basic-Grammer/#art","text":"OOP Functional programming","title":"Art"},{"location":"Certifications-and-Learning/languages/angular/","text":"Angular","title":"Angular"},{"location":"Certifications-and-Learning/languages/angular/#angular","text":"","title":"Angular"},{"location":"Certifications-and-Learning/languages/css-html/","text":"Contents CSS Display Flexbox Container properties Items properties Grid Container Items Media Queries CSS Display display: block means fit the width --> Div is default display: block; display: inline means putting itmes inline. Height and width can not be used here --> Span is default display: inline; display: inline-block is inline but height and width can be adjusted --> img is fedault display: inline-block; Simply Remove item --> display: none Flexbox Link --> https://www.youtube.com/watch?v=fYq5PXgSsbE Container properties Becomes columns --> display: flex; Main axis horizontal and cross axis vertical Align items at main axis (horizontally if case of display: flex) Push items to left --> justify-content: flex-start; Push items to center --> justify-content: center; Push items to center, fit width with spaces between items --> justify-content: space-between; Push items to center, fit width with spaces all around items --> justify-content: space-around; Align Items at cross axis (vertically in case of display: flex) Items grow and fit the row --> align-items: stretch; Items arranged without effecting size --> align-items: flex-start; Items aligned to center vertically without effecting size --> align-items: center; Wraps all items to next row instead of shrinking to fit width --> flex-wrap: wrap; When flex-wrap: wrap used, Will align vertically at center --> align-content: center; When flex-wrap: wrap used, Will align vertically at top --> align-content: flex-start; When flex-wrap: wrap used, Will align vertically at bottom --> align-content: flex-end; When flex-wrap: wrap used, Will align vertically at bottom --> align-content: space-between; Becomes rows and main axis is now vertical and cross is horizontal --> flex-direction: column; Now all above justify content and align items is reversed essentially because of main and cross axis flipped Items properties These are applied to items individually inside the container shorthand --> flex: _grow _shrink _basis eg flex: 1 0 2px; All below combined in one. Prevent shrinking of item --> flex-shrink: 0; Fill items to remaining space --> flex-grow: 1; If one item is given grow of 1 and other 2, then the remaining space will be divided among items appropriate ratio Note that the actual item with 2 will not be double size to item with 1. To make sure exact for above --> flex-basis: 0; Individually align items and override the flex alignment --> align-self: center; (flex-end flex-start etc) Ordering of items (not recommended as tabs key will jump differently in the html also screen readers dont work well) --> order: 1; (use 2, 3 etc for each item) This only changed ordeing due to css, but screenreaders, keyboard tabs still refer the html only and messes things up Grid Link --> https://www.youtube.com/watch?v=9zBsdzdE4sM It is 2d version of flexbox. Container display: grid; Two columns with 200px 100px width --> grid-template-columns: 200px 100px; Two columns with fractional width --> grid-template-columns: 1fr 2fr; 5 columns with fractional width --> grid-template-columns: repeat(5,1fr); Make all rows 250px long --> grid-auto-rows: 250px; To set first row to 150px --> grid-template-rows: 150px; # Kind of strange, dig into it more Empty item to be 150px and filled item to stretch out to fill row --> grid-auto-rows: minmax(150px,auto); Adjust gaps between items --> grid-row-gap and grid-column-gap OR grid-gap shorthand can be used Areas method: Pretty cool, just write the names of items the number of times and spaces that it should take, and then assign those names in the item to form a layopout. .container grid-template-areas: \"header header\" \"sidebar content\" \"sidebar content\" .item1 --> grid-area: header; .item2 --> grid-area: sidebar; etc etc Items Start item at 1 and go till 3; essentially filling up 2 columns grid-column-start: 1; grid-column-end: 3; (or -1 to span till the end) grid-column: 1 / -1 (Shorthand, span by starting at col 1 and spanning till the end) grid-column: span 3 (This way span to 3 columns) grid-row-start, grid-row-end and grid-row works the same way, just wrt rows Alignments Container Align horizontally --> justify-content: start end center stretch space-around etc Align vertically --> align-content: start end center stretch space-around etc Items Align horizontally, default is stretch --> justify-content: start end center stretch space-around etc Align vertically, default is stretch --> align-content: start end center stretch space-around etc Override container properties using per item --> align-self: and justify-self: Media Queries Link --> https://www.youtube.com/watch?v=yU7jJ3NbPdA @media screen @media print @media speech @media all @media all and (something){} OR @media (){} This means \"all and\" by default @media all and (max-width: 500px){ / Use , for \"OR\" / body{} div{} .... any property } @media (orientation: landscape) {} @media (orientation: potrait) {} Using AND --> @media (orientation: landscape) and (max-width: 500px) {} Using OR --> @media (orientation: landscape), (max-width: 500px) {}","title":"Contents"},{"location":"Certifications-and-Learning/languages/css-html/#contents","text":"CSS Display Flexbox Container properties Items properties Grid Container Items Media Queries","title":"Contents"},{"location":"Certifications-and-Learning/languages/css-html/#css","text":"","title":"CSS"},{"location":"Certifications-and-Learning/languages/css-html/#display","text":"display: block means fit the width --> Div is default display: block; display: inline means putting itmes inline. Height and width can not be used here --> Span is default display: inline; display: inline-block is inline but height and width can be adjusted --> img is fedault display: inline-block; Simply Remove item --> display: none","title":"Display"},{"location":"Certifications-and-Learning/languages/css-html/#flexbox","text":"Link --> https://www.youtube.com/watch?v=fYq5PXgSsbE","title":"Flexbox"},{"location":"Certifications-and-Learning/languages/css-html/#container-properties","text":"Becomes columns --> display: flex; Main axis horizontal and cross axis vertical Align items at main axis (horizontally if case of display: flex) Push items to left --> justify-content: flex-start; Push items to center --> justify-content: center; Push items to center, fit width with spaces between items --> justify-content: space-between; Push items to center, fit width with spaces all around items --> justify-content: space-around; Align Items at cross axis (vertically in case of display: flex) Items grow and fit the row --> align-items: stretch; Items arranged without effecting size --> align-items: flex-start; Items aligned to center vertically without effecting size --> align-items: center; Wraps all items to next row instead of shrinking to fit width --> flex-wrap: wrap; When flex-wrap: wrap used, Will align vertically at center --> align-content: center; When flex-wrap: wrap used, Will align vertically at top --> align-content: flex-start; When flex-wrap: wrap used, Will align vertically at bottom --> align-content: flex-end; When flex-wrap: wrap used, Will align vertically at bottom --> align-content: space-between; Becomes rows and main axis is now vertical and cross is horizontal --> flex-direction: column; Now all above justify content and align items is reversed essentially because of main and cross axis flipped","title":"Container properties"},{"location":"Certifications-and-Learning/languages/css-html/#items-properties","text":"These are applied to items individually inside the container shorthand --> flex: _grow _shrink _basis eg flex: 1 0 2px; All below combined in one. Prevent shrinking of item --> flex-shrink: 0; Fill items to remaining space --> flex-grow: 1; If one item is given grow of 1 and other 2, then the remaining space will be divided among items appropriate ratio Note that the actual item with 2 will not be double size to item with 1. To make sure exact for above --> flex-basis: 0; Individually align items and override the flex alignment --> align-self: center; (flex-end flex-start etc) Ordering of items (not recommended as tabs key will jump differently in the html also screen readers dont work well) --> order: 1; (use 2, 3 etc for each item) This only changed ordeing due to css, but screenreaders, keyboard tabs still refer the html only and messes things up","title":"Items properties"},{"location":"Certifications-and-Learning/languages/css-html/#grid","text":"Link --> https://www.youtube.com/watch?v=9zBsdzdE4sM It is 2d version of flexbox.","title":"Grid"},{"location":"Certifications-and-Learning/languages/css-html/#container","text":"display: grid; Two columns with 200px 100px width --> grid-template-columns: 200px 100px; Two columns with fractional width --> grid-template-columns: 1fr 2fr; 5 columns with fractional width --> grid-template-columns: repeat(5,1fr); Make all rows 250px long --> grid-auto-rows: 250px; To set first row to 150px --> grid-template-rows: 150px; # Kind of strange, dig into it more Empty item to be 150px and filled item to stretch out to fill row --> grid-auto-rows: minmax(150px,auto); Adjust gaps between items --> grid-row-gap and grid-column-gap OR grid-gap shorthand can be used Areas method: Pretty cool, just write the names of items the number of times and spaces that it should take, and then assign those names in the item to form a layopout. .container grid-template-areas: \"header header\" \"sidebar content\" \"sidebar content\" .item1 --> grid-area: header; .item2 --> grid-area: sidebar; etc etc","title":"Container"},{"location":"Certifications-and-Learning/languages/css-html/#items","text":"Start item at 1 and go till 3; essentially filling up 2 columns grid-column-start: 1; grid-column-end: 3; (or -1 to span till the end) grid-column: 1 / -1 (Shorthand, span by starting at col 1 and spanning till the end) grid-column: span 3 (This way span to 3 columns) grid-row-start, grid-row-end and grid-row works the same way, just wrt rows","title":"Items"},{"location":"Certifications-and-Learning/languages/css-html/#alignments","text":"","title":"Alignments"},{"location":"Certifications-and-Learning/languages/css-html/#container_1","text":"Align horizontally --> justify-content: start end center stretch space-around etc Align vertically --> align-content: start end center stretch space-around etc","title":"Container"},{"location":"Certifications-and-Learning/languages/css-html/#items_1","text":"Align horizontally, default is stretch --> justify-content: start end center stretch space-around etc Align vertically, default is stretch --> align-content: start end center stretch space-around etc Override container properties using per item --> align-self: and justify-self:","title":"Items"},{"location":"Certifications-and-Learning/languages/css-html/#media-queries","text":"Link --> https://www.youtube.com/watch?v=yU7jJ3NbPdA @media screen @media print @media speech @media all @media all and (something){} OR @media (){} This means \"all and\" by default @media all and (max-width: 500px){ / Use , for \"OR\" / body{} div{} .... any property } @media (orientation: landscape) {} @media (orientation: potrait) {} Using AND --> @media (orientation: landscape) and (max-width: 500px) {} Using OR --> @media (orientation: landscape), (max-width: 500px) {}","title":"Media Queries"},{"location":"Certifications-and-Learning/languages/elixir/","text":"Elixir https://www.youtube.com/watch?v=pBNOavRoNL0 Practice Code # This creates your module which holds all your # functions defmodule M do # Functions start with def, the functions name # and then end def main do # gets retrieves user input # trim removes the newline name = IO.gets(\"What is your name? \") |> String.trim # You can combine string and variable output # with #{} IO.puts \"Hello #{name}\" data_stuff() end # ----- DATA TYPES ----- # Variables start with lowercase letters or # underscores and then uppercase letters, # underscores or numbers # Once set a variables value can't change # Types Integers, Floats, Atoms, Ranges, # Binaries, Lists, Maps, Tuples def data_stuff do # There is no maximum int size my_int = 123 IO.puts \"Integer #{is_integer(my_int)}\" # Floats have about 16 digit precision my_float = 3.14159 IO.puts \"Float #{is_float(my_float)}\" # An Atoms name is its value IO.puts \"Atom #{is_atom(:Pittsburgh)}\" # Use double quotes for spaces :\"New York\" # Ranges define a start and end using ints one_to_10 = 1..10 # ----- STRINGS ----- # Strings are defined with double quotes my_str = \"My Sentence\" IO.puts \"Length : #{String.length(my_str)}\" # You can combine strings longer_str = my_str <> \" \" <> \"is longer\" # Compare strings IO.puts \"Equal : #{\"Egg\" === \"egg\"}\" # Check if a string contains a string IO.puts \"My ? #{String.contains?(my_str, \"My\")}\" # Return first character IO.puts \"First : #{String.first(my_str)}\" # Get character at index IO.puts \"Index 4 : #{String.at(my_str, 4)}\" # Get a substring IO.puts \"Substring : #{String.slice(my_str, 3, 8)}\" # Split a string into a list # Inspect which prints the internal # representation of a value IO.inspect String.split(longer_str, \" \") # Reverse a string IO.puts String.reverse(longer_str) # Uppercase IO.puts String.upcase(longer_str) # Lowercase IO.puts String.downcase(longer_str) # Capitalize IO.puts String.capitalize(longer_str) # Pipe output from one to another 4 * 10 |> IO.puts # ----- MATH ----- IO.puts \"5 + 4 = #{5+4}\" IO.puts \"5 - 4 = #{5-4}\" IO.puts \"5 * 4 = #{5*4}\" IO.puts \"5 / 4 = #{5/4}\" IO.puts \"5 div 4 = #{div(5,4)}\" IO.puts \"5 rem 4 = #{rem(5,4)}\" # ----- COMPARISON ----- IO.puts \"4 == 4.0 : #{4 == 4.0}\" # Checks for equality of value and type IO.puts \"4 === 4.0 : #{4 === 4.0}\" IO.puts \"4 != 4.0 : #{4 != 4.0}\" # Checks for inequality of value and type IO.puts \"4 !== 4.0 : #{4 == 4.0}\" IO.puts \"5 > 4 : #{5 > 4}\" IO.puts \"5 >= 4 : #{5 >= 4}\" IO.puts \"5 < 4 : #{5 < 4}\" IO.puts \"5 <= 4 : #{5 <= 4}\" # Logical operators age = 16 IO.puts \"Vote & Drive : #{(age >= 16) and (age >= 18)}\" IO.puts \"Vote or Drive : #{(age >= 16) or (age >= 18)}\" # Converts true to false vice versa IO.puts not true # ----- DECISION MAKING ----- # If and Else if age >= 18 do IO.puts \"Can Vote\" else IO.puts \"Can Wait\" end # Unless unless age === 18 do IO.puts \"You're not 18\" else IO.puts \"You're 18\" end # Cond works like else if # it only hits the 1st match cond do age >= 14 -> IO.puts \"You can wait\" age >= 16 -> IO.puts \"You can drive\" age >= 18 -> IO.puts \"You can vote\" true -> IO.puts \"Default\" end # Case works like switch case 2 do 1 -> IO.puts \"Entered 1\" 2 -> IO.puts \"Entered 2\" _ -> IO.puts \"Default\" end # Ternary operator IO.puts \"Ternary : #{if age > 18, do: \"Can Vote\", else: \"Can't Vote\"}\" # ----- TUPLES ----- # Tuples normally have 2 to 4 values # They can hold any value # They aren't for enumerating, or # cycling through like lists # They ar for pattern matching # Create a tuple my_stats = {175, 6.25, :Derek} IO.puts \"Tuple #{is_tuple(my_stats)}\" # You can append values my_stats2 = Tuple.append(my_stats, 42) # Retrieve values by index IO.puts \"Age #{elem(my_stats2, 3)}\" # Get tuple size IO.puts \"Size #{tuple_size(my_stats2)}\" # Delete an index my_stats3 = Tuple.delete_at(my_stats2, 0) # Insert at an index my_stats4 = Tuple.insert_at(my_stats3, 0, 1974) # Create a tuple with the same values # duplicated a number of times many_zeroes = Tuple.duplicate(0, 5) # You can use tuples for pattern matching {weight, height, name} = {175, 6.25, :Derek} IO.puts \"Weight : #{weight}\" # ----- LISTS ----- # Lists contain lists of data of any data type list1 = [1,2,3] list2 = [4,5,6] # You can combine Lists list3 = list1 ++ list2 # You can subtract Lists list4 = list3 -- list1 # Verify if an item is in a list IO.puts 6 in list4 # Separate the head and tail of list [head | tail] = list3 IO.puts \"Head : #{head}\" # Write to the screen without a newline IO.write \"Tail : \" # To show the tail use inspect IO.inspect tail # Inspect which prints the internal # representation of a # value may give odd results IO.inspect [97,98] # You can force inspect to print as a list # like this IO.inspect [97,98], char_lists: :as_lists # Enum can enumerate over lists Enum.each tail, fn item -> IO.puts item end words = [\"Random\", \"Words\", \"in a\", \"list\"] Enum.each words, fn word -> IO.puts word end # We can use recursion to loop as well display_list(words) # Delete deletes the given item from a list IO.puts display_list(List.delete(words,\"Random\")) # Delete item at index IO.puts display_list(List.delete_at(words,1)) # Insert item at index IO.puts display_list(List.insert_at(words,4, \"Yeah\")) # Get first item IO.puts List.first(words) # Get last item IO.puts List.last(words) # You can create lists of key value tuples my_stats5 = [name: \"Derek\", height: 6.25, weight: 175] # ----- MAPS ----- # Maps hold collections of key value pairs capitals = %{\"Alabama\" => \"Montgomery\", \"Alaska\" => \"Juneau\", \"Arizona\" => \"Phoenix\"} # Retrieve values using the key IO.puts \"Capital of Alaska is #{capitals[\"Alaska\"]}\" # You can use atoms as keys capitals2 = %{alabama: \"Montgomery\", alaska: \"Juneau\", arizona: \"Phoenix\"} IO.puts \"Capital of Arizona is #{capitals2.arizona}\" # Insert a key / value capitals3 = Dict.put_new(capitals, \"Arkansas\", \"Big Rock\") # ----- PATTERN MATCHING ----- # With pattern matching we can retrieve # data from data structures [length, width] = [20, 30] IO.puts \"Width : #{width}\" # If you don't care about data use _ [_, [_, a]] = [20, [30, 40]] IO.puts \"Get Num : #{a}\" # ----- ANONYMOUS FUNCTIONS ----- # An anonymous function has no name and can # be passed to another function get_sum = fn (x, y) -> x + y end IO.puts \"5 + 5 = #{get_sum.(5,5)}\" # Shorthand of th above # Increment the parameter names by 1 get_less = &(&1 - &2) IO.puts \"7 - 6 = #{get_less.(7,6)}\" # You can have functions except different # numbers of parameters add_sum = fn {x,y} -> IO.puts \"#{x} + #{y} = #{x+y}\" {x,y,z} -> IO.puts \"#{x} + #{y} + #{z} = #{x+y+z}\" end add_sum.({1,2}) add_sum.({1,2,3}) # You can set defaults for parameters IO.puts do_it() # ----- RECURSION ----- # Recursion is the act of a function # calling itself IO.puts \"Factorial of 3 : #{factorial(4)}\" # ----- LOOPING ----- # With most languages we loop by # incrementing or decrementing a value # Since all variables are immutable # in Elixir we use recursion to loop IO.puts \"Sum : #{sum([1,2,3])}\" # An Elixir for loop loop(5,1) # ----- ENUMERABLES ----- # An enumerable can have its items # counted off # Check if all values are even IO.puts \"Even List : #{Enum.all?([1,2,3], fn(n) -> rem(n,2) == 0 end)}\" # Check if any items are even IO.puts \"Even Item : #{Enum.any?([1,2,3], fn(n) -> rem(n,2) == 0 end)}\" # Print out each item Enum.each([1,2,3], fn(n) -> IO.puts n end) # Double each value in a list dbl_list = Enum.map([1,2,3], fn(n) -> n * 2 end) IO.inspect dbl_list # Reduce down to a single value sum_vals = Enum.reduce([1,2,3], fn(n, sum) -> n + sum end) IO.puts \"Sum : #{sum_vals}\" IO.inspect Enum.uniq([1,2,2]) # ----- LIST COMPREHENSIONS ----- # Provides an additonal way to perform # actions on a list # Double every list item dbl_list2 = for n <- [1,2,3], do: n * 2 IO.inspect dbl_list2 # Create a list of evens even_list = for n <- [1,2,3,4], rem(n,2) == 0, do: n IO.inspect even_list # ----- EXCEPTION HANDLING ----- # Allows us to handle errors err = try do 5 / 0 rescue ArithmeticError -> \"Can't Divide by Zero\" end IO.puts err # ----- CONCURRENCY ----- # Running multiple blocks of code at once # Calling spawn starts a new process that # runs the code specified at an undefined # time # Spawn returns a Process ID (PID) spawn(fn() -> loop(50, 1) end) spawn(fn() -> loop(100, 50) end) # We can send messgaes between # processes # Send a message to this process # and receive it send(self(), {:french, \"Bob\"}) receive do {:german, name} -> IO.puts \"Guten tag #{name}\" {:french, name} -> IO.puts \"Bonjour #{name}\" {:english, name} -> IO.puts \"Hello #{name}\" # If there is no matching message you can issue # a timeout like I did for 500 milliseconds after 500 -> IO.puts \"Times up\" end end # ----- RECURSIVE FUNCTIONS ----- # Output list with recursion def display_list([word|words]) do IO.puts word display_list(words) end def display_list([]), do: nil # Calculate a factorial def factorial(num) do # This will end the calling of # additional functions if num <= 1 do 1 else result = num * factorial(num - 1) result end end # 1st : result = 4 * factorial(3) = 4 * 6 = 24 # 2nd : result = 3 * factorial(2) = 3 * 2 = 6 # 3rd : result = 2 * factorial(1) = 2 * 1 = 2 # Demonstrate looping # Sum values in a list # Decide what happens if we get an empty list def sum([]), do: 0 # Empty the list as we sum values def sum([h|t]), do: h + sum(t) # A Elixir for loop # What happens if the 1st attribute is 0 def loop(0,_), do: nil def loop(max, min) do if max < min do loop(0, min) else IO.puts \"Num : #{max}\" loop(max - 1, min) end end # ----- DEFINE DEFAULTS ----- # Define defaults with \\\\ def do_it(x \\\\ 1, y \\\\ 1) do x + y end end","title":"Elixir"},{"location":"Certifications-and-Learning/languages/elixir/#elixir","text":"https://www.youtube.com/watch?v=pBNOavRoNL0","title":"Elixir"},{"location":"Certifications-and-Learning/languages/elixir/#practice-code","text":"# This creates your module which holds all your # functions defmodule M do # Functions start with def, the functions name # and then end def main do # gets retrieves user input # trim removes the newline name = IO.gets(\"What is your name? \") |> String.trim # You can combine string and variable output # with #{} IO.puts \"Hello #{name}\" data_stuff() end # ----- DATA TYPES ----- # Variables start with lowercase letters or # underscores and then uppercase letters, # underscores or numbers # Once set a variables value can't change # Types Integers, Floats, Atoms, Ranges, # Binaries, Lists, Maps, Tuples def data_stuff do # There is no maximum int size my_int = 123 IO.puts \"Integer #{is_integer(my_int)}\" # Floats have about 16 digit precision my_float = 3.14159 IO.puts \"Float #{is_float(my_float)}\" # An Atoms name is its value IO.puts \"Atom #{is_atom(:Pittsburgh)}\" # Use double quotes for spaces :\"New York\" # Ranges define a start and end using ints one_to_10 = 1..10 # ----- STRINGS ----- # Strings are defined with double quotes my_str = \"My Sentence\" IO.puts \"Length : #{String.length(my_str)}\" # You can combine strings longer_str = my_str <> \" \" <> \"is longer\" # Compare strings IO.puts \"Equal : #{\"Egg\" === \"egg\"}\" # Check if a string contains a string IO.puts \"My ? #{String.contains?(my_str, \"My\")}\" # Return first character IO.puts \"First : #{String.first(my_str)}\" # Get character at index IO.puts \"Index 4 : #{String.at(my_str, 4)}\" # Get a substring IO.puts \"Substring : #{String.slice(my_str, 3, 8)}\" # Split a string into a list # Inspect which prints the internal # representation of a value IO.inspect String.split(longer_str, \" \") # Reverse a string IO.puts String.reverse(longer_str) # Uppercase IO.puts String.upcase(longer_str) # Lowercase IO.puts String.downcase(longer_str) # Capitalize IO.puts String.capitalize(longer_str) # Pipe output from one to another 4 * 10 |> IO.puts # ----- MATH ----- IO.puts \"5 + 4 = #{5+4}\" IO.puts \"5 - 4 = #{5-4}\" IO.puts \"5 * 4 = #{5*4}\" IO.puts \"5 / 4 = #{5/4}\" IO.puts \"5 div 4 = #{div(5,4)}\" IO.puts \"5 rem 4 = #{rem(5,4)}\" # ----- COMPARISON ----- IO.puts \"4 == 4.0 : #{4 == 4.0}\" # Checks for equality of value and type IO.puts \"4 === 4.0 : #{4 === 4.0}\" IO.puts \"4 != 4.0 : #{4 != 4.0}\" # Checks for inequality of value and type IO.puts \"4 !== 4.0 : #{4 == 4.0}\" IO.puts \"5 > 4 : #{5 > 4}\" IO.puts \"5 >= 4 : #{5 >= 4}\" IO.puts \"5 < 4 : #{5 < 4}\" IO.puts \"5 <= 4 : #{5 <= 4}\" # Logical operators age = 16 IO.puts \"Vote & Drive : #{(age >= 16) and (age >= 18)}\" IO.puts \"Vote or Drive : #{(age >= 16) or (age >= 18)}\" # Converts true to false vice versa IO.puts not true # ----- DECISION MAKING ----- # If and Else if age >= 18 do IO.puts \"Can Vote\" else IO.puts \"Can Wait\" end # Unless unless age === 18 do IO.puts \"You're not 18\" else IO.puts \"You're 18\" end # Cond works like else if # it only hits the 1st match cond do age >= 14 -> IO.puts \"You can wait\" age >= 16 -> IO.puts \"You can drive\" age >= 18 -> IO.puts \"You can vote\" true -> IO.puts \"Default\" end # Case works like switch case 2 do 1 -> IO.puts \"Entered 1\" 2 -> IO.puts \"Entered 2\" _ -> IO.puts \"Default\" end # Ternary operator IO.puts \"Ternary : #{if age > 18, do: \"Can Vote\", else: \"Can't Vote\"}\" # ----- TUPLES ----- # Tuples normally have 2 to 4 values # They can hold any value # They aren't for enumerating, or # cycling through like lists # They ar for pattern matching # Create a tuple my_stats = {175, 6.25, :Derek} IO.puts \"Tuple #{is_tuple(my_stats)}\" # You can append values my_stats2 = Tuple.append(my_stats, 42) # Retrieve values by index IO.puts \"Age #{elem(my_stats2, 3)}\" # Get tuple size IO.puts \"Size #{tuple_size(my_stats2)}\" # Delete an index my_stats3 = Tuple.delete_at(my_stats2, 0) # Insert at an index my_stats4 = Tuple.insert_at(my_stats3, 0, 1974) # Create a tuple with the same values # duplicated a number of times many_zeroes = Tuple.duplicate(0, 5) # You can use tuples for pattern matching {weight, height, name} = {175, 6.25, :Derek} IO.puts \"Weight : #{weight}\" # ----- LISTS ----- # Lists contain lists of data of any data type list1 = [1,2,3] list2 = [4,5,6] # You can combine Lists list3 = list1 ++ list2 # You can subtract Lists list4 = list3 -- list1 # Verify if an item is in a list IO.puts 6 in list4 # Separate the head and tail of list [head | tail] = list3 IO.puts \"Head : #{head}\" # Write to the screen without a newline IO.write \"Tail : \" # To show the tail use inspect IO.inspect tail # Inspect which prints the internal # representation of a # value may give odd results IO.inspect [97,98] # You can force inspect to print as a list # like this IO.inspect [97,98], char_lists: :as_lists # Enum can enumerate over lists Enum.each tail, fn item -> IO.puts item end words = [\"Random\", \"Words\", \"in a\", \"list\"] Enum.each words, fn word -> IO.puts word end # We can use recursion to loop as well display_list(words) # Delete deletes the given item from a list IO.puts display_list(List.delete(words,\"Random\")) # Delete item at index IO.puts display_list(List.delete_at(words,1)) # Insert item at index IO.puts display_list(List.insert_at(words,4, \"Yeah\")) # Get first item IO.puts List.first(words) # Get last item IO.puts List.last(words) # You can create lists of key value tuples my_stats5 = [name: \"Derek\", height: 6.25, weight: 175] # ----- MAPS ----- # Maps hold collections of key value pairs capitals = %{\"Alabama\" => \"Montgomery\", \"Alaska\" => \"Juneau\", \"Arizona\" => \"Phoenix\"} # Retrieve values using the key IO.puts \"Capital of Alaska is #{capitals[\"Alaska\"]}\" # You can use atoms as keys capitals2 = %{alabama: \"Montgomery\", alaska: \"Juneau\", arizona: \"Phoenix\"} IO.puts \"Capital of Arizona is #{capitals2.arizona}\" # Insert a key / value capitals3 = Dict.put_new(capitals, \"Arkansas\", \"Big Rock\") # ----- PATTERN MATCHING ----- # With pattern matching we can retrieve # data from data structures [length, width] = [20, 30] IO.puts \"Width : #{width}\" # If you don't care about data use _ [_, [_, a]] = [20, [30, 40]] IO.puts \"Get Num : #{a}\" # ----- ANONYMOUS FUNCTIONS ----- # An anonymous function has no name and can # be passed to another function get_sum = fn (x, y) -> x + y end IO.puts \"5 + 5 = #{get_sum.(5,5)}\" # Shorthand of th above # Increment the parameter names by 1 get_less = &(&1 - &2) IO.puts \"7 - 6 = #{get_less.(7,6)}\" # You can have functions except different # numbers of parameters add_sum = fn {x,y} -> IO.puts \"#{x} + #{y} = #{x+y}\" {x,y,z} -> IO.puts \"#{x} + #{y} + #{z} = #{x+y+z}\" end add_sum.({1,2}) add_sum.({1,2,3}) # You can set defaults for parameters IO.puts do_it() # ----- RECURSION ----- # Recursion is the act of a function # calling itself IO.puts \"Factorial of 3 : #{factorial(4)}\" # ----- LOOPING ----- # With most languages we loop by # incrementing or decrementing a value # Since all variables are immutable # in Elixir we use recursion to loop IO.puts \"Sum : #{sum([1,2,3])}\" # An Elixir for loop loop(5,1) # ----- ENUMERABLES ----- # An enumerable can have its items # counted off # Check if all values are even IO.puts \"Even List : #{Enum.all?([1,2,3], fn(n) -> rem(n,2) == 0 end)}\" # Check if any items are even IO.puts \"Even Item : #{Enum.any?([1,2,3], fn(n) -> rem(n,2) == 0 end)}\" # Print out each item Enum.each([1,2,3], fn(n) -> IO.puts n end) # Double each value in a list dbl_list = Enum.map([1,2,3], fn(n) -> n * 2 end) IO.inspect dbl_list # Reduce down to a single value sum_vals = Enum.reduce([1,2,3], fn(n, sum) -> n + sum end) IO.puts \"Sum : #{sum_vals}\" IO.inspect Enum.uniq([1,2,2]) # ----- LIST COMPREHENSIONS ----- # Provides an additonal way to perform # actions on a list # Double every list item dbl_list2 = for n <- [1,2,3], do: n * 2 IO.inspect dbl_list2 # Create a list of evens even_list = for n <- [1,2,3,4], rem(n,2) == 0, do: n IO.inspect even_list # ----- EXCEPTION HANDLING ----- # Allows us to handle errors err = try do 5 / 0 rescue ArithmeticError -> \"Can't Divide by Zero\" end IO.puts err # ----- CONCURRENCY ----- # Running multiple blocks of code at once # Calling spawn starts a new process that # runs the code specified at an undefined # time # Spawn returns a Process ID (PID) spawn(fn() -> loop(50, 1) end) spawn(fn() -> loop(100, 50) end) # We can send messgaes between # processes # Send a message to this process # and receive it send(self(), {:french, \"Bob\"}) receive do {:german, name} -> IO.puts \"Guten tag #{name}\" {:french, name} -> IO.puts \"Bonjour #{name}\" {:english, name} -> IO.puts \"Hello #{name}\" # If there is no matching message you can issue # a timeout like I did for 500 milliseconds after 500 -> IO.puts \"Times up\" end end # ----- RECURSIVE FUNCTIONS ----- # Output list with recursion def display_list([word|words]) do IO.puts word display_list(words) end def display_list([]), do: nil # Calculate a factorial def factorial(num) do # This will end the calling of # additional functions if num <= 1 do 1 else result = num * factorial(num - 1) result end end # 1st : result = 4 * factorial(3) = 4 * 6 = 24 # 2nd : result = 3 * factorial(2) = 3 * 2 = 6 # 3rd : result = 2 * factorial(1) = 2 * 1 = 2 # Demonstrate looping # Sum values in a list # Decide what happens if we get an empty list def sum([]), do: 0 # Empty the list as we sum values def sum([h|t]), do: h + sum(t) # A Elixir for loop # What happens if the 1st attribute is 0 def loop(0,_), do: nil def loop(max, min) do if max < min do loop(0, min) else IO.puts \"Num : #{max}\" loop(max - 1, min) end end # ----- DEFINE DEFAULTS ----- # Define defaults with \\\\ def do_it(x \\\\ 1, y \\\\ 1) do x + y end end","title":"Practice Code"},{"location":"Certifications-and-Learning/languages/javascript/","text":"Contents Javascript Sections Core Concept Loops and choices Core Functions Arrays Adding and Removing Emptying an Array - remove all elements Finding - Primitives Finding - Objects Other Extra Multithreading and Web Workers Hoisting Helpful Interview General Javascript Supporting Code Javascript basics and OOP. ECMAScript - Just a specification. ES6 - In 2015, ES2015 above company released ES6 specification. Node is c++ program which runs javascript. Javascript Engine Firefox - SpiderMonkey Chrome - v8 Sections 01 Objects 02 Prototypes 03 Prototypical Inheritance 04 ES6 -- Latest way of writing javascript Core Concept Pillars of OOP and design patterns - Design Patterns -- LLD Loops and choices if else -- Usual switch case -- case break, case break, default. for -- for (let i=0; i<5; i++){} while -- Executes only if condition matches do while -- Executes atleast once, even if condition is false for in -- For list/ array - for (let key in personList){} for of -- New way, ES6 -> for (let color of colors){} -- here the problem of using key is gone. break -- Exits and end the loop. continue -- Continues to next iteration, skipping present, does not end the loop. Core Functions Math - random, max, min, round, floor, ceil, trunc, abs Strings - split, length, includes, startsWith, endsWith, indexOf, replace, toUpperCase, trim, trimLeft Escape Notation in Strings - \\, \\n, many others Date - https://codewithmosh.com/courses/324741/lectures/5142758 toDateString, toTimeString, toISOString https://codewithmosh.com/courses/324741/lectures/5142753 Template Literals - Using Put anything here 'even quotes' and {some-variable} Arrays Anything in [] eg [[],[],[],[]] eg [{},{},{},{}] Now Json is different, its like {{[],[]},{[],[]},{[],[]}} In short [] uses array[0] {} uses array.key Adding and Removing https://codewithmosh.com/courses/324741/lectures/5088115 push(5,6) and pop() - Add to end. push is adding and pop is removing unshift(1,2) and shift() - Add to start. unshift is adding and shift is removing splice(a,b,c) - Add anywhere. a is start index of element, b is how many, c is what to add. In case of removing, we do not supply c. slice(a,b) - Means index a to b. This does not over write variable, splice does! Emptying an Array - remove all elements let number = [1,2,3,4] number = [] - Must be defined in let, to replace with empty array number.length = 0 - This works too number.splice(0, numbers.length) - Ok but noisy // Method 4 - Na, not too good while (number/length>0) number.pop() Finding - Primitives https://codewithmosh.com/courses/324741/lectures/5088119 indexOf lastIndexOf includes - True false Finding - Objects https://codewithmosh.com/courses/324741/lectures/5088121 anyArray.find(function(element){ return element > 10 }) anyArray.findIndex(function(element){ return element.name === \"Something\" }) https://codewithmosh.com/courses/324741/lectures/5088123 In ES6 simpler method anyArray.find( () => {} ) <-- General Syntax anyArray.find( element => element.name === \"Something\" ) <-- If single return and single input anyArray.anyFunction( each => condition ) <-- Simple syntax of above, If single return and single input Other arr1.concat(arr2) arr1.slice(a,b) // From index a to b-1. b index not included. const combined = [...arr1, ...arr2] Both above methods, numbers are copied to new, but in case array has objects, ONLY REFERENCE COPIED. // Iteration. All are same. arr.forEach(function(each){}) // Basic arr.forEach((each, index)=>{}) // Arrow with index arr.forEach(each => one-line-logic) // Arrow with one input and single line logic someArray.join(',') // Returns string someString.split(' ') // Split string Extra Multithreading and Web Workers https://www.youtube.com/watch?v=Gcp7triXFjg Create a worker. Create your functions in different scripts. Send message to worker Worker send output back to the calling script Hoisting https://www.youtube.com/watch?v=EvfRXyKa_GI Before code runs, javascript moves some parts to top and leaves other wherever Example const sumA = (a,b) => a+b <-- Functions in this way are run in sequence. Calling them before defining in code, means they will throw error. function sumA(a,b) { a+b } <-- These can be placed anywhere in code. Javascript moves them to top before running. var something = anything <-- Also moves to top. But shows undefined if called before. const something = anything <-- Does not move up. Shows an error rather than undefined. let also works like const. Helpful https://www.youtube.com/watch?v=v2tJ3nzXh8I Using ?? instead of || Styling javascript console output with CSS using %c Use optional chaining instead of long if(something && other && more){}. Use something?.other?.more instead Example --> console.log(array.someKeyInArray?.[0]) Here, if key exist, then it will show first item in that key. Old way --> if (array.someKeyInArray) {console.log(array....blah[0])} If key and name are same, only mention the key. Example --> const some = {name: name, age: age, gender: sex} <-- Old Long way const some = {name, age, gender: sex} <-- New Shorter way Use defer. We usually import js at the bottom of HTML, so that page loads fast, before it downloads big javascript file. Rather, using defer, the js starts downloading and renders HTML first and then load the js. Which is awesome. Example --> Right way --> Top of html put Wrong way --> Bottom of html put More on this topic and async here --> https://www.youtube.com/watch?v=BMuFBYw91UQ Interview General https://www.youtube.com/watch?v=8eRVxE9PEF0 Single Threaded How async handeled in javascript Has event loop - maintains a call stack, push new func call, and pop which is done Promises - three states are there Also something called Ban, Catch and Final Blocks What is event loop - it keeps checking event queue If you resolve promise, it goes to event queue and Event loop checks if its done/ completed Event loop checks event queue for callbacks, and pushes to call stack when needed Function calls --> Event Queue --> Call Stack <-- handled by event loop https://youtu.be/8eRVxE9PEF0?t=458 Promises VS Observables Observable has subscribed functions When something happens, observable tells subscribed function about it with or without values to process prompts.all vs prompts.allsettled - https://www.geeksforgeeks.org/how-does-promise-all-method-differs-from-promise-allsettled-method-in-javascript/#:~:text=all()%20method%20returns%20an,properties%20further%20status%20and%20value. .all is like AND - Output is only data .allsettled is like OR - Output is status and value pair. Event Emitters - Like PubSub Optemisation Techniques Caching Memoisation Break Continue and goto operations - https://youtu.be/8eRVxE9PEF0?t=838 Web Workers?? Maybe Prevent memory leaks - Avoid global vars, use local scope Creating utility functions, to re-use code in various places Call vs Apply vs Bind - https://medium.com/@leonardobrunolima/javascript-tips-apply-vs-call-vs-bind-d738a9e8b4e1 Call - Pass argument as variables Apply - Pass argument as array Bind - Creates a new function - For Currying Const vs Object.freeze - https://www.geeksforgeeks.org/difference-between-object-freeze-and-const-in-javascript/ const prevents reassignment Object.freeze() prevents mutability Map vs WeakMap - https://www.tutorialspoint.com/what-is-the-difference-between-map-and-weakmap-in-javascript Null vs undefined Hoisting JsonP Best Practice Consitent Code Style ESLint Free commit tools and check with Husky Prototyping Module Pattern VS Constructor Pattern and Prototype Reference VS Value Javascript is passed by value Deep Freezing vs Shallow Freeze why \"this\" operator inconsistent function vs arrow function in normal function, this needs to be binded in arrow function, it is preconfigured async await VS generators (yield) - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator Concept of \"symbol\" also come here generator vs coroutine - https://medium.com/@tjholowaychuk/callbacks-vs-coroutines-174f1fe66127 Generators are sometimes referred to as \u201csemicoroutines\u201d, a more limited form of coroutine that may only yield to its caller.","title":"Contents"},{"location":"Certifications-and-Learning/languages/javascript/#contents","text":"Javascript Sections Core Concept Loops and choices Core Functions Arrays Adding and Removing Emptying an Array - remove all elements Finding - Primitives Finding - Objects Other Extra Multithreading and Web Workers Hoisting Helpful Interview General","title":"Contents"},{"location":"Certifications-and-Learning/languages/javascript/#javascript","text":"Supporting Code Javascript basics and OOP. ECMAScript - Just a specification. ES6 - In 2015, ES2015 above company released ES6 specification. Node is c++ program which runs javascript. Javascript Engine Firefox - SpiderMonkey Chrome - v8","title":"Javascript"},{"location":"Certifications-and-Learning/languages/javascript/#sections","text":"01 Objects 02 Prototypes 03 Prototypical Inheritance 04 ES6 -- Latest way of writing javascript","title":"Sections"},{"location":"Certifications-and-Learning/languages/javascript/#core-concept","text":"Pillars of OOP and design patterns - Design Patterns -- LLD","title":"Core Concept"},{"location":"Certifications-and-Learning/languages/javascript/#loops-and-choices","text":"if else -- Usual switch case -- case break, case break, default. for -- for (let i=0; i<5; i++){} while -- Executes only if condition matches do while -- Executes atleast once, even if condition is false for in -- For list/ array - for (let key in personList){} for of -- New way, ES6 -> for (let color of colors){} -- here the problem of using key is gone. break -- Exits and end the loop. continue -- Continues to next iteration, skipping present, does not end the loop.","title":"Loops and choices"},{"location":"Certifications-and-Learning/languages/javascript/#core-functions","text":"Math - random, max, min, round, floor, ceil, trunc, abs Strings - split, length, includes, startsWith, endsWith, indexOf, replace, toUpperCase, trim, trimLeft Escape Notation in Strings - \\, \\n, many others Date - https://codewithmosh.com/courses/324741/lectures/5142758 toDateString, toTimeString, toISOString https://codewithmosh.com/courses/324741/lectures/5142753 Template Literals - Using Put anything here 'even quotes' and {some-variable}","title":"Core Functions"},{"location":"Certifications-and-Learning/languages/javascript/#arrays","text":"Anything in [] eg [[],[],[],[]] eg [{},{},{},{}] Now Json is different, its like {{[],[]},{[],[]},{[],[]}} In short [] uses array[0] {} uses array.key","title":"Arrays"},{"location":"Certifications-and-Learning/languages/javascript/#adding-and-removing","text":"https://codewithmosh.com/courses/324741/lectures/5088115 push(5,6) and pop() - Add to end. push is adding and pop is removing unshift(1,2) and shift() - Add to start. unshift is adding and shift is removing splice(a,b,c) - Add anywhere. a is start index of element, b is how many, c is what to add. In case of removing, we do not supply c. slice(a,b) - Means index a to b. This does not over write variable, splice does!","title":"Adding and Removing"},{"location":"Certifications-and-Learning/languages/javascript/#emptying-an-array-remove-all-elements","text":"let number = [1,2,3,4] number = [] - Must be defined in let, to replace with empty array number.length = 0 - This works too number.splice(0, numbers.length) - Ok but noisy // Method 4 - Na, not too good while (number/length>0) number.pop()","title":"Emptying an Array - remove all elements"},{"location":"Certifications-and-Learning/languages/javascript/#finding-primitives","text":"https://codewithmosh.com/courses/324741/lectures/5088119 indexOf lastIndexOf includes - True false","title":"Finding - Primitives"},{"location":"Certifications-and-Learning/languages/javascript/#finding-objects","text":"https://codewithmosh.com/courses/324741/lectures/5088121 anyArray.find(function(element){ return element > 10 }) anyArray.findIndex(function(element){ return element.name === \"Something\" }) https://codewithmosh.com/courses/324741/lectures/5088123 In ES6 simpler method anyArray.find( () => {} ) <-- General Syntax anyArray.find( element => element.name === \"Something\" ) <-- If single return and single input anyArray.anyFunction( each => condition ) <-- Simple syntax of above, If single return and single input","title":"Finding - Objects"},{"location":"Certifications-and-Learning/languages/javascript/#other","text":"arr1.concat(arr2) arr1.slice(a,b) // From index a to b-1. b index not included. const combined = [...arr1, ...arr2] Both above methods, numbers are copied to new, but in case array has objects, ONLY REFERENCE COPIED. // Iteration. All are same. arr.forEach(function(each){}) // Basic arr.forEach((each, index)=>{}) // Arrow with index arr.forEach(each => one-line-logic) // Arrow with one input and single line logic someArray.join(',') // Returns string someString.split(' ') // Split string","title":"Other"},{"location":"Certifications-and-Learning/languages/javascript/#extra","text":"","title":"Extra"},{"location":"Certifications-and-Learning/languages/javascript/#multithreading-and-web-workers","text":"https://www.youtube.com/watch?v=Gcp7triXFjg Create a worker. Create your functions in different scripts. Send message to worker Worker send output back to the calling script","title":"Multithreading and Web Workers"},{"location":"Certifications-and-Learning/languages/javascript/#hoisting","text":"https://www.youtube.com/watch?v=EvfRXyKa_GI Before code runs, javascript moves some parts to top and leaves other wherever Example const sumA = (a,b) => a+b <-- Functions in this way are run in sequence. Calling them before defining in code, means they will throw error. function sumA(a,b) { a+b } <-- These can be placed anywhere in code. Javascript moves them to top before running. var something = anything <-- Also moves to top. But shows undefined if called before. const something = anything <-- Does not move up. Shows an error rather than undefined. let also works like const.","title":"Hoisting"},{"location":"Certifications-and-Learning/languages/javascript/#helpful","text":"https://www.youtube.com/watch?v=v2tJ3nzXh8I Using ?? instead of || Styling javascript console output with CSS using %c Use optional chaining instead of long if(something && other && more){}. Use something?.other?.more instead Example --> console.log(array.someKeyInArray?.[0]) Here, if key exist, then it will show first item in that key. Old way --> if (array.someKeyInArray) {console.log(array....blah[0])} If key and name are same, only mention the key. Example --> const some = {name: name, age: age, gender: sex} <-- Old Long way const some = {name, age, gender: sex} <-- New Shorter way Use defer. We usually import js at the bottom of HTML, so that page loads fast, before it downloads big javascript file. Rather, using defer, the js starts downloading and renders HTML first and then load the js. Which is awesome. Example --> Right way --> Top of html put Wrong way --> Bottom of html put More on this topic and async here --> https://www.youtube.com/watch?v=BMuFBYw91UQ","title":"Helpful"},{"location":"Certifications-and-Learning/languages/javascript/#interview-general","text":"https://www.youtube.com/watch?v=8eRVxE9PEF0 Single Threaded How async handeled in javascript Has event loop - maintains a call stack, push new func call, and pop which is done Promises - three states are there Also something called Ban, Catch and Final Blocks What is event loop - it keeps checking event queue If you resolve promise, it goes to event queue and Event loop checks if its done/ completed Event loop checks event queue for callbacks, and pushes to call stack when needed Function calls --> Event Queue --> Call Stack <-- handled by event loop https://youtu.be/8eRVxE9PEF0?t=458 Promises VS Observables Observable has subscribed functions When something happens, observable tells subscribed function about it with or without values to process prompts.all vs prompts.allsettled - https://www.geeksforgeeks.org/how-does-promise-all-method-differs-from-promise-allsettled-method-in-javascript/#:~:text=all()%20method%20returns%20an,properties%20further%20status%20and%20value. .all is like AND - Output is only data .allsettled is like OR - Output is status and value pair. Event Emitters - Like PubSub Optemisation Techniques Caching Memoisation Break Continue and goto operations - https://youtu.be/8eRVxE9PEF0?t=838 Web Workers?? Maybe Prevent memory leaks - Avoid global vars, use local scope Creating utility functions, to re-use code in various places Call vs Apply vs Bind - https://medium.com/@leonardobrunolima/javascript-tips-apply-vs-call-vs-bind-d738a9e8b4e1 Call - Pass argument as variables Apply - Pass argument as array Bind - Creates a new function - For Currying Const vs Object.freeze - https://www.geeksforgeeks.org/difference-between-object-freeze-and-const-in-javascript/ const prevents reassignment Object.freeze() prevents mutability Map vs WeakMap - https://www.tutorialspoint.com/what-is-the-difference-between-map-and-weakmap-in-javascript Null vs undefined Hoisting JsonP Best Practice Consitent Code Style ESLint Free commit tools and check with Husky Prototyping Module Pattern VS Constructor Pattern and Prototype Reference VS Value Javascript is passed by value Deep Freezing vs Shallow Freeze why \"this\" operator inconsistent function vs arrow function in normal function, this needs to be binded in arrow function, it is preconfigured async await VS generators (yield) - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator Concept of \"symbol\" also come here generator vs coroutine - https://medium.com/@tjholowaychuk/callbacks-vs-coroutines-174f1fe66127 Generators are sometimes referred to as \u201csemicoroutines\u201d, a more limited form of coroutine that may only yield to its caller.","title":"Interview General"},{"location":"Certifications-and-Learning/languages/javascript/01-Objects/","text":"Contents Objects Object Literals Factories Constructors Constructor Property Functions are also Object Value types and Reference Types Enumerating Properties Abstraction Getters and Setters Objects https://codewithmosh.com/courses/310571/lectures/4881076 In javascript, everything is all about objects. Object Literals const - Block level scope and can not be changed. Always use this. let - Block level scope and can be changed. If you want to change the variable for some reason, then use this. var - This has functional level scope, and should not be used now. Factories It has a constructor function. Does not have this.something etc. We do not use \"new\" while defining new instance. Constructors Like factory, but uses this.something. We use \"new\" to define new instance. Constructor Property anything.constructor <-- shows us what anything is made of new String() new Boolean() new Number() We have all these. Everything is an object. Functions are also Object if \"Circle\" is a constructor, then to create a new instance we can use either of the two below: const another = new Circle(1); <-- Normally done Circle.call({},1) <-- Under the hood this happens Circle.apply({},[1,2,3,4]) <-- Same as call, but here we pass arguments in [] Above three are same. Value types and Reference Types https://codewithmosh.com/courses/310571/lectures/4881080 Value Types - Number, String, Boolean, Symbol, Undefined, Null Reference Types - Object, Function, Array Primitives are copied by their value Objects are copied by their reference Enumerating Properties Assume circle is an instance of an object called Circle. // Method 1 for (let key in circle){ if (typeof circle.[key] !== 'function') console.log() } // Method 2 const keys = Object.keys(circle); console.log(keys) // Method 3 if ('radius' in circle) console.log('Circle has a radius.') Abstraction https://codewithmosh.com/courses/310571/lectures/4881071 Using this.something, the methods and properties can be accessed by the user of the object. However we would like to hide it. Instead of this.anything.... we use let/ const to define things. Just like factory. In nutshell, making vars and funcs private to the class, instead of letting user use them directly. Getters and Setters Get makes something accessible from outside and is read only. To be able to change property from outside, we use setter. Object.defineProperty(this, 'defaultLocation',{ get: function() { // Getter, read property, read only return something; }, set: function(value){ // Setter, make possible to change value. if (!value.x || value.y) // Showing that we can add validations too throw new Error('Invalid Location') something = value // Without setter, something is read only } })","title":"Contents"},{"location":"Certifications-and-Learning/languages/javascript/01-Objects/#contents","text":"Objects Object Literals Factories Constructors Constructor Property Functions are also Object Value types and Reference Types Enumerating Properties Abstraction Getters and Setters","title":"Contents"},{"location":"Certifications-and-Learning/languages/javascript/01-Objects/#objects","text":"https://codewithmosh.com/courses/310571/lectures/4881076 In javascript, everything is all about objects.","title":"Objects"},{"location":"Certifications-and-Learning/languages/javascript/01-Objects/#object-literals","text":"const - Block level scope and can not be changed. Always use this. let - Block level scope and can be changed. If you want to change the variable for some reason, then use this. var - This has functional level scope, and should not be used now.","title":"Object Literals"},{"location":"Certifications-and-Learning/languages/javascript/01-Objects/#factories","text":"It has a constructor function. Does not have this.something etc. We do not use \"new\" while defining new instance.","title":"Factories"},{"location":"Certifications-and-Learning/languages/javascript/01-Objects/#constructors","text":"Like factory, but uses this.something. We use \"new\" to define new instance.","title":"Constructors"},{"location":"Certifications-and-Learning/languages/javascript/01-Objects/#constructor-property","text":"anything.constructor <-- shows us what anything is made of new String() new Boolean() new Number() We have all these. Everything is an object.","title":"Constructor Property"},{"location":"Certifications-and-Learning/languages/javascript/01-Objects/#functions-are-also-object","text":"if \"Circle\" is a constructor, then to create a new instance we can use either of the two below: const another = new Circle(1); <-- Normally done Circle.call({},1) <-- Under the hood this happens Circle.apply({},[1,2,3,4]) <-- Same as call, but here we pass arguments in [] Above three are same.","title":"Functions are also Object"},{"location":"Certifications-and-Learning/languages/javascript/01-Objects/#value-types-and-reference-types","text":"https://codewithmosh.com/courses/310571/lectures/4881080 Value Types - Number, String, Boolean, Symbol, Undefined, Null Reference Types - Object, Function, Array Primitives are copied by their value Objects are copied by their reference","title":"Value types and Reference Types"},{"location":"Certifications-and-Learning/languages/javascript/01-Objects/#enumerating-properties","text":"Assume circle is an instance of an object called Circle. // Method 1 for (let key in circle){ if (typeof circle.[key] !== 'function') console.log() } // Method 2 const keys = Object.keys(circle); console.log(keys) // Method 3 if ('radius' in circle) console.log('Circle has a radius.')","title":"Enumerating Properties"},{"location":"Certifications-and-Learning/languages/javascript/01-Objects/#abstraction","text":"https://codewithmosh.com/courses/310571/lectures/4881071 Using this.something, the methods and properties can be accessed by the user of the object. However we would like to hide it. Instead of this.anything.... we use let/ const to define things. Just like factory. In nutshell, making vars and funcs private to the class, instead of letting user use them directly.","title":"Abstraction"},{"location":"Certifications-and-Learning/languages/javascript/01-Objects/#getters-and-setters","text":"Get makes something accessible from outside and is read only. To be able to change property from outside, we use setter. Object.defineProperty(this, 'defaultLocation',{ get: function() { // Getter, read property, read only return something; }, set: function(value){ // Setter, make possible to change value. if (!value.x || value.y) // Showing that we can add validations too throw new Error('Invalid Location') something = value // Without setter, something is read only } })","title":"Getters and Setters"},{"location":"Certifications-and-Learning/languages/javascript/02-Prototypes/","text":"Contents Prototypes Prototypical Inheritance Multilevel Inheritance Prototype Descriptors Constructor Prototypes Prototype vs Instance Members Iterating instance and prototype members Prototypes All about inheritance. In javascript we do not have classes, we only have objects. So how does inheritance work??! Classical VS Prototypical Inheritance Javascript used Prototypical Inheritance NOTE: After this you understand how to change javascript built in objects. Do not edit built in objects! Its always good not to touch objects you do not own. Prototypical Inheritance https://codewithmosh.com/courses/310571/lectures/4881218 Whenever an object is created in Javascript, it inherits from the root object base, called prototype. Prototype is just a regular Object! always know it. Everything is object in javascript. let x = {} let y = {} Object.getPrototypeOf(x) === Object.getPrototypeOf(y) // gives true x.__proto__ === y.__proto__ // This has been depreciated, should not be used Multilevel Inheritance If we define array, it inherits from array prototype, which inherits from root prototype If we create instance of our own object, its prototype is the object we defined, which inherits from the root prototype. So in javascript, chain of inheritance occurs, which always roots to root prototype. Prototype Descriptors https://codewithmosh.com/courses/310571/lectures/4881220 let person = {name: \"Manasvi\"} let objectBase = Object.getPrototypeOf(person); let descriptor = Object.getOwnPropertyDescriptor(objectBase,'toString') console.log(descriptor) let person = {name: \"Manasvi\"} Object.defineProperty(person, 'name', { // Be default all 3 are true writable: true, enumerable: true, configurable: true }) Constructor Prototypes Prototype vs Instance Members https://codewithmosh.com/courses/310571/lectures/4881222 For each instance created from object, we will have all parent methods copied. This can result into memory issues. Hence we define methods at prototype level, so that only once instance is created in memory. function Circle(radius) { // These are instance members this.radius = radius; this.move = function() { //this.draw() // Note: We accessing protype member here. console.log('move') } } //These are prototype members Circle.prototype.draw = function() { this.move() // Note: Here we using an instance member at protoype level console.log('draw'); } // NOTE: in above example, we have instance access proto method and proto access instance member. This create a circular reference, shown only as example that this can be done. const c1 = new Circle(1) const c2 = new Circle(1) // Below root prototype method toString is changed as per our need. Circle.prototype.toString = function() { return 'Circle with radius ' + this.radius; } Iterating instance and prototype members console.log(Object.keys(c1)); // Only returns instance members for (let key in c1) console.log(key); // Returns instance + prototype members c1.hasOwnProperty('radius') // True to instance members c1.hasOwnProperty('draw') // False for prototype members","title":"Contents"},{"location":"Certifications-and-Learning/languages/javascript/02-Prototypes/#contents","text":"Prototypes Prototypical Inheritance Multilevel Inheritance Prototype Descriptors Constructor Prototypes Prototype vs Instance Members Iterating instance and prototype members","title":"Contents"},{"location":"Certifications-and-Learning/languages/javascript/02-Prototypes/#prototypes","text":"All about inheritance. In javascript we do not have classes, we only have objects. So how does inheritance work??! Classical VS Prototypical Inheritance Javascript used Prototypical Inheritance NOTE: After this you understand how to change javascript built in objects. Do not edit built in objects! Its always good not to touch objects you do not own.","title":"Prototypes"},{"location":"Certifications-and-Learning/languages/javascript/02-Prototypes/#prototypical-inheritance","text":"https://codewithmosh.com/courses/310571/lectures/4881218 Whenever an object is created in Javascript, it inherits from the root object base, called prototype. Prototype is just a regular Object! always know it. Everything is object in javascript. let x = {} let y = {} Object.getPrototypeOf(x) === Object.getPrototypeOf(y) // gives true x.__proto__ === y.__proto__ // This has been depreciated, should not be used","title":"Prototypical Inheritance"},{"location":"Certifications-and-Learning/languages/javascript/02-Prototypes/#multilevel-inheritance","text":"If we define array, it inherits from array prototype, which inherits from root prototype If we create instance of our own object, its prototype is the object we defined, which inherits from the root prototype. So in javascript, chain of inheritance occurs, which always roots to root prototype.","title":"Multilevel Inheritance"},{"location":"Certifications-and-Learning/languages/javascript/02-Prototypes/#prototype-descriptors","text":"https://codewithmosh.com/courses/310571/lectures/4881220 let person = {name: \"Manasvi\"} let objectBase = Object.getPrototypeOf(person); let descriptor = Object.getOwnPropertyDescriptor(objectBase,'toString') console.log(descriptor) let person = {name: \"Manasvi\"} Object.defineProperty(person, 'name', { // Be default all 3 are true writable: true, enumerable: true, configurable: true })","title":"Prototype Descriptors"},{"location":"Certifications-and-Learning/languages/javascript/02-Prototypes/#constructor-prototypes","text":"","title":"Constructor Prototypes"},{"location":"Certifications-and-Learning/languages/javascript/02-Prototypes/#prototype-vs-instance-members","text":"https://codewithmosh.com/courses/310571/lectures/4881222 For each instance created from object, we will have all parent methods copied. This can result into memory issues. Hence we define methods at prototype level, so that only once instance is created in memory. function Circle(radius) { // These are instance members this.radius = radius; this.move = function() { //this.draw() // Note: We accessing protype member here. console.log('move') } } //These are prototype members Circle.prototype.draw = function() { this.move() // Note: Here we using an instance member at protoype level console.log('draw'); } // NOTE: in above example, we have instance access proto method and proto access instance member. This create a circular reference, shown only as example that this can be done. const c1 = new Circle(1) const c2 = new Circle(1) // Below root prototype method toString is changed as per our need. Circle.prototype.toString = function() { return 'Circle with radius ' + this.radius; }","title":"Prototype vs Instance Members"},{"location":"Certifications-and-Learning/languages/javascript/02-Prototypes/#iterating-instance-and-prototype-members","text":"console.log(Object.keys(c1)); // Only returns instance members for (let key in c1) console.log(key); // Returns instance + prototype members c1.hasOwnProperty('radius') // True to instance members c1.hasOwnProperty('draw') // False for prototype members","title":"Iterating instance and prototype members"},{"location":"Certifications-and-Learning/languages/javascript/03-Prototypical-Inheritance/","text":"Contents Prototypical Inheritance Calling Super Constructor Intermediate Function Inheritance Method Overriding Polymorphism Mixins Prototypical Inheritance https://codewithmosh.com/courses/310571/lectures/4881270 function Shape(){ } Shape.prototype.duplicate = function() { console.log('duplicate') } function Circle(radius) { this.radius = radius } Circle.prototype.draw = function() { console.log('draw') } const s = new Shape() const c = new Circle(1) We have shape object and circle object. Default is circle <- proto root We want circle <- proto shape <- proto root Default under the hood --> Circle.prototype = Object.create(Object.prototype) We change to --> Circle.prototype = Object.create(Shape.prototype) Circle.prototype.constructor = Cricle // Always update constructor when resetting prototype. In ES6 we simple use extends, and above need not to be done. This way the chaining has been changed. Always update the constructor when resetting prototypes, else there could be weird issues https://codewithmosh.com/courses/310571/lectures/4881275 Calling Super Constructor https://codewithmosh.com/courses/310571/lectures/4881274 In any object, if you want to call members of other object, use call method. function Circle(radius, color) { Shape.call(this, color) this.radius = radius } Intermediate Function Inheritance https://codewithmosh.com/courses/310571/lectures/4881276 So when we define a function to reset constructor proto, its called intermediate function inheritance. function extend(Child, Parent) { Parent.prototype = Object.create(Parent.prototype) Child.prototype.constructor = Child } Method Overriding https://codewithmosh.com/courses/310571/lectures/4881277 Polymorphism https://codewithmosh.com/courses/310571/lectures/4881278 Mixins const person = Object.assign({}, canEat, canWalk) https://codewithmosh.com/courses/310571/lectures/4881280 https://codewithmosh.com/courses/310571/lectures/4881279 Inheritance is very fragile. Becomes complex very fast. And makes your code hard to read. Also, when a new object type is introduced, the inheritance tree can break. Composition is another technique. Always use composition over inheritance if possible. Method - 1. We create methods, like canWalk, canEat, canSwim 2. Then we create object, like Fish, Dog, Human 3. then we we assign Object.assign(Fish.prototype, canEat, canSwim) etc The above is called Composition, when we compose a final object from combining others. When we do it using a function, we call it mixins. function mixin(target, ...sources){ // Using rest operator ... to get n number of inputs Object.assign(target, ...sources) // Using spread operator ... to access each element in a array } Yes, rest and spread operator looks same, they are kind off......","title":"Contents"},{"location":"Certifications-and-Learning/languages/javascript/03-Prototypical-Inheritance/#contents","text":"Prototypical Inheritance Calling Super Constructor Intermediate Function Inheritance Method Overriding Polymorphism Mixins","title":"Contents"},{"location":"Certifications-and-Learning/languages/javascript/03-Prototypical-Inheritance/#prototypical-inheritance","text":"https://codewithmosh.com/courses/310571/lectures/4881270 function Shape(){ } Shape.prototype.duplicate = function() { console.log('duplicate') } function Circle(radius) { this.radius = radius } Circle.prototype.draw = function() { console.log('draw') } const s = new Shape() const c = new Circle(1) We have shape object and circle object. Default is circle <- proto root We want circle <- proto shape <- proto root Default under the hood --> Circle.prototype = Object.create(Object.prototype) We change to --> Circle.prototype = Object.create(Shape.prototype) Circle.prototype.constructor = Cricle // Always update constructor when resetting prototype. In ES6 we simple use extends, and above need not to be done. This way the chaining has been changed. Always update the constructor when resetting prototypes, else there could be weird issues https://codewithmosh.com/courses/310571/lectures/4881275","title":"Prototypical Inheritance"},{"location":"Certifications-and-Learning/languages/javascript/03-Prototypical-Inheritance/#calling-super-constructor","text":"https://codewithmosh.com/courses/310571/lectures/4881274 In any object, if you want to call members of other object, use call method. function Circle(radius, color) { Shape.call(this, color) this.radius = radius }","title":"Calling Super Constructor"},{"location":"Certifications-and-Learning/languages/javascript/03-Prototypical-Inheritance/#intermediate-function-inheritance","text":"https://codewithmosh.com/courses/310571/lectures/4881276 So when we define a function to reset constructor proto, its called intermediate function inheritance. function extend(Child, Parent) { Parent.prototype = Object.create(Parent.prototype) Child.prototype.constructor = Child }","title":"Intermediate Function Inheritance"},{"location":"Certifications-and-Learning/languages/javascript/03-Prototypical-Inheritance/#method-overriding","text":"https://codewithmosh.com/courses/310571/lectures/4881277","title":"Method Overriding"},{"location":"Certifications-and-Learning/languages/javascript/03-Prototypical-Inheritance/#polymorphism","text":"https://codewithmosh.com/courses/310571/lectures/4881278","title":"Polymorphism"},{"location":"Certifications-and-Learning/languages/javascript/03-Prototypical-Inheritance/#mixins","text":"const person = Object.assign({}, canEat, canWalk) https://codewithmosh.com/courses/310571/lectures/4881280 https://codewithmosh.com/courses/310571/lectures/4881279 Inheritance is very fragile. Becomes complex very fast. And makes your code hard to read. Also, when a new object type is introduced, the inheritance tree can break. Composition is another technique. Always use composition over inheritance if possible. Method - 1. We create methods, like canWalk, canEat, canSwim 2. Then we create object, like Fish, Dog, Human 3. then we we assign Object.assign(Fish.prototype, canEat, canSwim) etc The above is called Composition, when we compose a final object from combining others. When we do it using a function, we call it mixins. function mixin(target, ...sources){ // Using rest operator ... to get n number of inputs Object.assign(target, ...sources) // Using spread operator ... to access each element in a array } Yes, rest and spread operator looks same, they are kind off......","title":"Mixins"},{"location":"Certifications-and-Learning/languages/javascript/04-ES6/","text":"Contents ES6 Classes Hoisting Static Method Strict Mode and This keyword Private Members Getter and Setters Inheritance Method Overriding Tooling CommonJS ES6 ES6 Tooling Babel Webpack ES6 Refer Code Here Before ES6 we need to use prototypes and setting them and all. Now all that has been made simple. Syntactical sugar has been added and we can use (still class is actually object) class, constructor, extends, super etc just like python Everything is still object in javascript! lol Classes class Circle { constructor(radius) { this.radius = radius } draw(){} // Instance method, can be accesses only if instance is created. static parse(str){} // Static Method, can be accessed independently, without creating instance. } Circle.draw() // Does not work Circle.parse('hello') // Works ok const c1 = new Circle(1) c1.draw() // Works ok Hoisting Refer the index page, better explanation is given. Static Method See the section \"Classes\" We use static methods in classes to create utility functions. Strict Mode and This keyword https://codewithmosh.com/courses/310571/lectures/4881370 // Case 1 c1.draw() // Here this refers to c1 object // Case 2 const draw = c1.draw draw() // Here this refers to window object To prevent case 2, we use 'use strict'; at the top of the code. This way in second case, instead of pointing to the window object, this will point to undefined. Private Members We need private properties and objects in OOP. How we do it in JavaScript? Symbols - https://codewithmosh.com/courses/310571/lectures/4881369 const _radius = Symbol() <-- create a Symbol for variable const _draw = Symbol() <-- create another symbol for function this[_radius] = radius <-- inside constructor of class, define variable [_draw](){} <-- inside constructor of class, define function WeakMaps - https://codewithmosh.com/courses/310571/lectures/4881371 const _radius = new WeakMap() <-- Define WeakMap for variable const _move = new WeakMap() <-- Define WeakMap for function _radius.set(this, radius) <-- Use Set to set value _radius.get(this) <-- Use get to use the value _move.set(this, () => {}) <-- Use Set to set function NOTE: Always use arrow functions here, else the \"this\" value issues arise We can use const privateProps = new WeakMap() and then add all variables and functions to the privateProps. Getter and Setters // Called Implementation Detail - https://codewithmosh.com/courses/310571/lectures/4881473 const _radius = new Weakmap(); // Called Public Interface - https://codewithmosh.com/courses/310571/lectures/4881473 class Circle { constructor(radius) { _radius.set(this, radius) } get radius() {} // Simply use get set radius(value) { // Simply use set and include custom errors if (value <= 0) throw new Error('invalid radius') _radius.set(this,value) } } const c = new Circle(1); console.log(_radius.get(c)) // Note we can still use this to view the values. // To prevent above, we take the class out to another file, and export the class. // Using modularity, we can ensure none of private is visible to user Inheritance In ES6, the following is all we need to do: class Shape {move(){}, draw(){}} class Circle extends Shape {constructor(.., ..){super(..)} curve(){}} class Square extends Shape {corner(){}} // Note, constructor is not always needed const c = circle() const s = square() Method Overriding https://codewithmosh.com/courses/310571/lectures/4881374 Notice super in constructor, in above section. super(variables) <-- To get variables from parent use super.function() <-- To get function from parent use Tooling We want to ensure our code for * Maintainability * Reuse * Abstract Hence modularity comes in. Principle of cohesion is used, meaning similar things go together. History: Before ES6, in ES5 there was no definition of modules!!! LOL Hence various syntax styles called module formats were defined 1. AMD - Asynchronous Module Definition - Used by Browser only 2. CommonJS - Used by Nodejs 3. UMD - Universal Module definition - Used by Browser and Nodejs 4. ES6 Modules CommonJS Exporting multiple classes module.exports.Circle = Circle module.exports.Square = Square Exporting single class module.exports= Circle Then in other file const Circle = require('./path-to-file') ES6 export class .... export default dclass ..... in other file import {class} from \"path-to-file\" <-- {} used for non default exports import dclass from \"path-to-file\" <-- No {} in case of default export ES6 Tooling We need to compile the scripts into backward compatible js, so we use babel compiler and webpack Babel https://codewithmosh.com/courses/310571/lectures/4881476 We can use babel cli to convert any js file to backward compatible. But if we have 100 js files in project, we need to use webpack. Webpack https://codewithmosh.com/courses/310571/lectures/4881472","title":"Contents"},{"location":"Certifications-and-Learning/languages/javascript/04-ES6/#contents","text":"ES6 Classes Hoisting Static Method Strict Mode and This keyword Private Members Getter and Setters Inheritance Method Overriding Tooling CommonJS ES6 ES6 Tooling Babel Webpack","title":"Contents"},{"location":"Certifications-and-Learning/languages/javascript/04-ES6/#es6","text":"Refer Code Here Before ES6 we need to use prototypes and setting them and all. Now all that has been made simple. Syntactical sugar has been added and we can use (still class is actually object) class, constructor, extends, super etc just like python Everything is still object in javascript! lol","title":"ES6"},{"location":"Certifications-and-Learning/languages/javascript/04-ES6/#classes","text":"class Circle { constructor(radius) { this.radius = radius } draw(){} // Instance method, can be accesses only if instance is created. static parse(str){} // Static Method, can be accessed independently, without creating instance. } Circle.draw() // Does not work Circle.parse('hello') // Works ok const c1 = new Circle(1) c1.draw() // Works ok","title":"Classes"},{"location":"Certifications-and-Learning/languages/javascript/04-ES6/#hoisting","text":"Refer the index page, better explanation is given.","title":"Hoisting"},{"location":"Certifications-and-Learning/languages/javascript/04-ES6/#static-method","text":"See the section \"Classes\" We use static methods in classes to create utility functions.","title":"Static Method"},{"location":"Certifications-and-Learning/languages/javascript/04-ES6/#strict-mode-and-this-keyword","text":"https://codewithmosh.com/courses/310571/lectures/4881370 // Case 1 c1.draw() // Here this refers to c1 object // Case 2 const draw = c1.draw draw() // Here this refers to window object To prevent case 2, we use 'use strict'; at the top of the code. This way in second case, instead of pointing to the window object, this will point to undefined.","title":"Strict Mode and This keyword"},{"location":"Certifications-and-Learning/languages/javascript/04-ES6/#private-members","text":"We need private properties and objects in OOP. How we do it in JavaScript? Symbols - https://codewithmosh.com/courses/310571/lectures/4881369 const _radius = Symbol() <-- create a Symbol for variable const _draw = Symbol() <-- create another symbol for function this[_radius] = radius <-- inside constructor of class, define variable [_draw](){} <-- inside constructor of class, define function WeakMaps - https://codewithmosh.com/courses/310571/lectures/4881371 const _radius = new WeakMap() <-- Define WeakMap for variable const _move = new WeakMap() <-- Define WeakMap for function _radius.set(this, radius) <-- Use Set to set value _radius.get(this) <-- Use get to use the value _move.set(this, () => {}) <-- Use Set to set function NOTE: Always use arrow functions here, else the \"this\" value issues arise We can use const privateProps = new WeakMap() and then add all variables and functions to the privateProps.","title":"Private Members"},{"location":"Certifications-and-Learning/languages/javascript/04-ES6/#getter-and-setters","text":"// Called Implementation Detail - https://codewithmosh.com/courses/310571/lectures/4881473 const _radius = new Weakmap(); // Called Public Interface - https://codewithmosh.com/courses/310571/lectures/4881473 class Circle { constructor(radius) { _radius.set(this, radius) } get radius() {} // Simply use get set radius(value) { // Simply use set and include custom errors if (value <= 0) throw new Error('invalid radius') _radius.set(this,value) } } const c = new Circle(1); console.log(_radius.get(c)) // Note we can still use this to view the values. // To prevent above, we take the class out to another file, and export the class. // Using modularity, we can ensure none of private is visible to user","title":"Getter and Setters"},{"location":"Certifications-and-Learning/languages/javascript/04-ES6/#inheritance","text":"In ES6, the following is all we need to do: class Shape {move(){}, draw(){}} class Circle extends Shape {constructor(.., ..){super(..)} curve(){}} class Square extends Shape {corner(){}} // Note, constructor is not always needed const c = circle() const s = square()","title":"Inheritance"},{"location":"Certifications-and-Learning/languages/javascript/04-ES6/#method-overriding","text":"https://codewithmosh.com/courses/310571/lectures/4881374 Notice super in constructor, in above section. super(variables) <-- To get variables from parent use super.function() <-- To get function from parent use","title":"Method Overriding"},{"location":"Certifications-and-Learning/languages/javascript/04-ES6/#tooling","text":"We want to ensure our code for * Maintainability * Reuse * Abstract Hence modularity comes in. Principle of cohesion is used, meaning similar things go together. History: Before ES6, in ES5 there was no definition of modules!!! LOL Hence various syntax styles called module formats were defined 1. AMD - Asynchronous Module Definition - Used by Browser only 2. CommonJS - Used by Nodejs 3. UMD - Universal Module definition - Used by Browser and Nodejs 4. ES6 Modules","title":"Tooling"},{"location":"Certifications-and-Learning/languages/javascript/04-ES6/#commonjs","text":"Exporting multiple classes module.exports.Circle = Circle module.exports.Square = Square Exporting single class module.exports= Circle Then in other file const Circle = require('./path-to-file')","title":"CommonJS"},{"location":"Certifications-and-Learning/languages/javascript/04-ES6/#es6_1","text":"export class .... export default dclass ..... in other file import {class} from \"path-to-file\" <-- {} used for non default exports import dclass from \"path-to-file\" <-- No {} in case of default export","title":"ES6"},{"location":"Certifications-and-Learning/languages/javascript/04-ES6/#es6-tooling","text":"We need to compile the scripts into backward compatible js, so we use babel compiler and webpack","title":"ES6 Tooling"},{"location":"Certifications-and-Learning/languages/javascript/04-ES6/#babel","text":"https://codewithmosh.com/courses/310571/lectures/4881476 We can use babel cli to convert any js file to backward compatible. But if we have 100 js files in project, we need to use webpack.","title":"Babel"},{"location":"Certifications-and-Learning/languages/javascript/04-ES6/#webpack","text":"https://codewithmosh.com/courses/310571/lectures/4881472","title":"Webpack"},{"location":"Certifications-and-Learning/languages/javascript/code/","text":"JavaScript Code 00 Complete Basics OOP Mixins","title":"JavaScript Code"},{"location":"Certifications-and-Learning/languages/javascript/code/#javascript-code","text":"00 Complete Basics OOP Mixins","title":"JavaScript Code"},{"location":"Certifications-and-Learning/languages/nodejs/","text":"NodeJs General Concepts https://www.youtube.com/watch?v=Y8tlFLIjyMU NodeJs asyncronous Event Loop NodeJs multi-threading - Fork to spawn mulitple process v8 engine by google open source no interprester, convert to machine code use just in time compiler hence run faster Event Loop perform non blocking IO operations canals and they are multithreaded?? has different phases Callback and queue Callbacks Functions register in event group, to be called later Callback Hell - https://www.freecodecamp.org/news/how-to-deal-with-nested-callbacks-and-avoid-callback-hell-1bc8dc4a2012/ Implement async processes one after another. Difficult to read Modularise into async await independent functions and use promises Use javascript generators with promises Express Kua NestJS - https://www.youtube.com/watch?v=0M8AYU_hPas Use TypeScript. Uses Fastify or Express. Rest and GraphQL support Model View Controller Pattern - Like laravel or Ruby on Rails Caching, Logging, Rate-limiting,cors, websockets CLI uses JEST for testing Express is low level, less opiniated, more control, quick small code NestJS is higher level, more opiniated like dependency injection, large scalable code Dependency Injection - https://en.wikipedia.org/wiki/Dependency_injection Makes code declarative, rather than imperative Declarative programming is a paradigm describing WHAT the program does, without explicitly specifying its control flow. Imperative programming is a paradigm describing HOW the program should do something by explicitly specifying each instruction (or statement) step by step, which mutate the program's state Streaming Managing Data in chunks for less load on memory Event Emitters - Help write decoupled code Event Emiiter VS Pubsub Pub Sub has topic. Use case difference - PubSub to communicarte across services over HTTPs Event Emitter limited to local service Database - Postgress (ORM) and MongoDB (O Data M) (ODM) Postgress - relational - SQL MongoB - Non relational - NoSQL - Key value pairs More flexible than postgress WebSockets - For local projects Live communications - Dual, push type VS restful - request respose cycle GraphQL Endpoints need not be set in advance, unlike SQL Request only what needed How stay updated Medium Documentation official website Youtube trends Courses too","title":"NodeJs"},{"location":"Certifications-and-Learning/languages/nodejs/#nodejs","text":"","title":"NodeJs"},{"location":"Certifications-and-Learning/languages/nodejs/#general-concepts","text":"https://www.youtube.com/watch?v=Y8tlFLIjyMU NodeJs asyncronous Event Loop NodeJs multi-threading - Fork to spawn mulitple process v8 engine by google open source no interprester, convert to machine code use just in time compiler hence run faster Event Loop perform non blocking IO operations canals and they are multithreaded?? has different phases Callback and queue Callbacks Functions register in event group, to be called later Callback Hell - https://www.freecodecamp.org/news/how-to-deal-with-nested-callbacks-and-avoid-callback-hell-1bc8dc4a2012/ Implement async processes one after another. Difficult to read Modularise into async await independent functions and use promises Use javascript generators with promises Express Kua NestJS - https://www.youtube.com/watch?v=0M8AYU_hPas Use TypeScript. Uses Fastify or Express. Rest and GraphQL support Model View Controller Pattern - Like laravel or Ruby on Rails Caching, Logging, Rate-limiting,cors, websockets CLI uses JEST for testing Express is low level, less opiniated, more control, quick small code NestJS is higher level, more opiniated like dependency injection, large scalable code Dependency Injection - https://en.wikipedia.org/wiki/Dependency_injection Makes code declarative, rather than imperative Declarative programming is a paradigm describing WHAT the program does, without explicitly specifying its control flow. Imperative programming is a paradigm describing HOW the program should do something by explicitly specifying each instruction (or statement) step by step, which mutate the program's state Streaming Managing Data in chunks for less load on memory Event Emitters - Help write decoupled code Event Emiiter VS Pubsub Pub Sub has topic. Use case difference - PubSub to communicarte across services over HTTPs Event Emitter limited to local service Database - Postgress (ORM) and MongoDB (O Data M) (ODM) Postgress - relational - SQL MongoB - Non relational - NoSQL - Key value pairs More flexible than postgress WebSockets - For local projects Live communications - Dual, push type VS restful - request respose cycle GraphQL Endpoints need not be set in advance, unlike SQL Request only what needed How stay updated Medium Documentation official website Youtube trends Courses too","title":"General Concepts"},{"location":"Certifications-and-Learning/languages/python/","text":"Contents Core Concepts Refresher by Mosh Excerise interview question Extra Multithreading and MultiProcessing MultiThreading MultiProcessing JobLib parrallel pprint for better control on printing If based checking and \"in\" operator Swapping variables example Core Concepts Pillars of OOP and design patterns - Design Patterns -- LLD Protocol Class - Raise error when the method is called. Abstract Class - Raise error when the child instance is created. all the code arg <-- Makes tuple () of any number of arguments in a function *kwargs <-- Makes dictionary {} of any number of keyword arguments in a function Refresher by Mosh List DSA functions Stacks Queues Tuples Arrays Set Dictionary Unpacking Operator Excerise interview question https://codewithmosh.com/courses/417695/lectures/6781694 Extra Multithreading and MultiProcessing What are the difference between them - https://www.youtube.com/watch?v=ecKWiaHCEKs One GIL (Global Interpreter Lock) for all threads. Meaning on interpreter is used. In multiprocess, each process has its own GIL. Memory is shared among threads. But in multiprocessing, it is independent for each process. Fast to start a thread as compared to process. A new thread is spawned with in a single process, while multiprocess has its own independent processes. Mutexes often necessary in threading, and not necessary in process, unless processes use threads within. In all cases, data can be shared between instances using ques and pipes. Another good video --> https://www.youtube.com/watch?v=AZnGRKFUU0c Generally Speaking, if we have multiple functions, interdependent on each other, like finding correlation of every item to another item in a pandas df (i had this issue), then this can not work. To make it work, we need to find permutations of all pairs, make n lists of them, where n is number of cores in cpu, then create processes. How threading, process and async combines potentially: 1. Make threads with in a function. 2. Run the function multiple times in various processes. 3. Have mulitple scripts of the above. Call them at once using async io, redis, kafka ques etc.. MultiThreading https://www.youtube.com/watch?v=GqHLztqy0PU Mostly used when IO based tasks, like reading writing downloading files and doing something on them. Basic format: from threading import * # Define class and inherit from Thread class AnyClassA(Thread): pass class AnyClassB(Thread): pass # Instantiate the classes tA=AnyClassA() tB=AnyClassB() # Start the process in parrallel tA.start() tB.start() # Wait for both of them to stop tA.join() tB.join() # Print the final message print(\"All Done\") MultiProcessing https://www.youtube.com/watch?v=GT10PnUFLlE Another nice video sing queues in processing - https://www.youtube.com/watch?v=iwFGC_3sVio Mostly used when CPU intensive tasks and computations are to be done, and single core is just making things slow. Here output to functions are not returned!! Use Queue - https://www.youtube.com/watch?v=sp7EhjLkFY4 import multiprocessing as mp def func_a(x): pass def func_b(x): pass if __name__ == '__main__': p1 = mp.Process(target=func_a, args=(x,)) # in args, we have comma after x --> (x,) p2 = mp.Process(target=func_b, args=(x,)) p1.start() p2.start() p1.join() p2.join() print(\"All Done\") JobLib parrallel https://www.youtube.com/watch?v=Dm4up8_zJdo Its kind of abstraction on multiprocess and threading. When there is a function to be run multiple times, the same function will be run n times, n is number of cores specified. Note that if the function has a loop inside, and it is run through joblib once, it makes no sense. Only if a function is to be run many times, and outputs are not interconnected, then joblib is cool to run. from joblib import Parallel, delayed def func(x): pass result = Parallel(n_jobs=-1)(delayed(func)(x) for x in range(1000)) # -1 means all cores. Async IO. Alternative to threads. In javascript what we call promise, here we call futures. Link 1 - https://www.youtube.com/watch?v=t5Bo1Je9EmE import asyncio async def func_a(x): return x*5 async def func_b(x): return x*10 async def main(): x=5 t1 = asyncio.create_task(func_a(x)) t2 = asyncio.create_task(func_b(x)) v1 = await t1 v2 = await t2 await asyncio.gather(func_a(x), func_b(x)) # Another way https://www.youtube.com/watch?v=t0JXiljpNRo # Another way - https://www.youtube.com/watch?v=BI0asZuqFXM async def another(): x=5 t1 = loop.create_task(func_a(x)) # notice loop.create_task instead of asyncio.create_task t2 = loop.create_task(func_b(x)) await asyncio.wait([t1,t2]) return t1,t2 if __name__ = '__main__': loop = asyncio.get_event_loop() a1, a2 = loop.run_until_complete(another()) print(a1.result()) print(a2.result()) loop.close() pprint for better control on printing from pprint import pprint pprint(long-dictionary, width=1) If based checking and \"in\" operator if someValue in someVariable: print(\"yes it exists in the variable like list, set, dictionary\") Swapping variables example https://codewithmosh.com/courses/417695/lectures/6781695 x=10 y=11 x, y = y, x <-- EASY! but why it works? Notice, x = 1, 2 is like defing a tuple! x, y = tuple is like unpacking tuple Hence x, y = y, x is like define a tuple and then unpack in reverse WOW!!!","title":"Contents"},{"location":"Certifications-and-Learning/languages/python/#contents","text":"Core Concepts Refresher by Mosh Excerise interview question Extra Multithreading and MultiProcessing MultiThreading MultiProcessing JobLib parrallel pprint for better control on printing If based checking and \"in\" operator Swapping variables example","title":"Contents"},{"location":"Certifications-and-Learning/languages/python/#core-concepts","text":"Pillars of OOP and design patterns - Design Patterns -- LLD Protocol Class - Raise error when the method is called. Abstract Class - Raise error when the child instance is created. all the code arg <-- Makes tuple () of any number of arguments in a function *kwargs <-- Makes dictionary {} of any number of keyword arguments in a function","title":"Core Concepts"},{"location":"Certifications-and-Learning/languages/python/#refresher-by-mosh","text":"List DSA functions Stacks Queues Tuples Arrays Set Dictionary Unpacking Operator","title":"Refresher by Mosh"},{"location":"Certifications-and-Learning/languages/python/#excerise-interview-question","text":"https://codewithmosh.com/courses/417695/lectures/6781694","title":"Excerise interview question"},{"location":"Certifications-and-Learning/languages/python/#extra","text":"","title":"Extra"},{"location":"Certifications-and-Learning/languages/python/#multithreading-and-multiprocessing","text":"What are the difference between them - https://www.youtube.com/watch?v=ecKWiaHCEKs One GIL (Global Interpreter Lock) for all threads. Meaning on interpreter is used. In multiprocess, each process has its own GIL. Memory is shared among threads. But in multiprocessing, it is independent for each process. Fast to start a thread as compared to process. A new thread is spawned with in a single process, while multiprocess has its own independent processes. Mutexes often necessary in threading, and not necessary in process, unless processes use threads within. In all cases, data can be shared between instances using ques and pipes. Another good video --> https://www.youtube.com/watch?v=AZnGRKFUU0c Generally Speaking, if we have multiple functions, interdependent on each other, like finding correlation of every item to another item in a pandas df (i had this issue), then this can not work. To make it work, we need to find permutations of all pairs, make n lists of them, where n is number of cores in cpu, then create processes. How threading, process and async combines potentially: 1. Make threads with in a function. 2. Run the function multiple times in various processes. 3. Have mulitple scripts of the above. Call them at once using async io, redis, kafka ques etc..","title":"Multithreading and MultiProcessing"},{"location":"Certifications-and-Learning/languages/python/#multithreading","text":"https://www.youtube.com/watch?v=GqHLztqy0PU Mostly used when IO based tasks, like reading writing downloading files and doing something on them. Basic format: from threading import * # Define class and inherit from Thread class AnyClassA(Thread): pass class AnyClassB(Thread): pass # Instantiate the classes tA=AnyClassA() tB=AnyClassB() # Start the process in parrallel tA.start() tB.start() # Wait for both of them to stop tA.join() tB.join() # Print the final message print(\"All Done\")","title":"MultiThreading"},{"location":"Certifications-and-Learning/languages/python/#multiprocessing","text":"https://www.youtube.com/watch?v=GT10PnUFLlE Another nice video sing queues in processing - https://www.youtube.com/watch?v=iwFGC_3sVio Mostly used when CPU intensive tasks and computations are to be done, and single core is just making things slow. Here output to functions are not returned!! Use Queue - https://www.youtube.com/watch?v=sp7EhjLkFY4 import multiprocessing as mp def func_a(x): pass def func_b(x): pass if __name__ == '__main__': p1 = mp.Process(target=func_a, args=(x,)) # in args, we have comma after x --> (x,) p2 = mp.Process(target=func_b, args=(x,)) p1.start() p2.start() p1.join() p2.join() print(\"All Done\")","title":"MultiProcessing"},{"location":"Certifications-and-Learning/languages/python/#joblib-parrallel","text":"https://www.youtube.com/watch?v=Dm4up8_zJdo Its kind of abstraction on multiprocess and threading. When there is a function to be run multiple times, the same function will be run n times, n is number of cores specified. Note that if the function has a loop inside, and it is run through joblib once, it makes no sense. Only if a function is to be run many times, and outputs are not interconnected, then joblib is cool to run. from joblib import Parallel, delayed def func(x): pass result = Parallel(n_jobs=-1)(delayed(func)(x) for x in range(1000)) # -1 means all cores.","title":"JobLib parrallel"},{"location":"Certifications-and-Learning/languages/python/#async-io-alternative-to-threads","text":"In javascript what we call promise, here we call futures. Link 1 - https://www.youtube.com/watch?v=t5Bo1Je9EmE import asyncio async def func_a(x): return x*5 async def func_b(x): return x*10 async def main(): x=5 t1 = asyncio.create_task(func_a(x)) t2 = asyncio.create_task(func_b(x)) v1 = await t1 v2 = await t2 await asyncio.gather(func_a(x), func_b(x)) # Another way https://www.youtube.com/watch?v=t0JXiljpNRo # Another way - https://www.youtube.com/watch?v=BI0asZuqFXM async def another(): x=5 t1 = loop.create_task(func_a(x)) # notice loop.create_task instead of asyncio.create_task t2 = loop.create_task(func_b(x)) await asyncio.wait([t1,t2]) return t1,t2 if __name__ = '__main__': loop = asyncio.get_event_loop() a1, a2 = loop.run_until_complete(another()) print(a1.result()) print(a2.result()) loop.close()","title":"Async IO. Alternative to threads."},{"location":"Certifications-and-Learning/languages/python/#pprint-for-better-control-on-printing","text":"from pprint import pprint pprint(long-dictionary, width=1)","title":"pprint for better control on printing"},{"location":"Certifications-and-Learning/languages/python/#if-based-checking-and-in-operator","text":"if someValue in someVariable: print(\"yes it exists in the variable like list, set, dictionary\")","title":"If based checking and \"in\" operator"},{"location":"Certifications-and-Learning/languages/python/#swapping-variables-example","text":"https://codewithmosh.com/courses/417695/lectures/6781695 x=10 y=11 x, y = y, x <-- EASY! but why it works? Notice, x = 1, 2 is like defing a tuple! x, y = tuple is like unpacking tuple Hence x, y = y, x is like define a tuple and then unpack in reverse WOW!!!","title":"Swapping variables example"},{"location":"Certifications-and-Learning/languages/python/Arrays/","text":"Arrays https://codewithmosh.com/courses/417695/lectures/6781690 List can be used for anything. But when thing get very big, we get performance hit, hence array used. This is in python, and we need to specifically use array. On google, search python 3 typecode from array import array a = array(\"i\", [1,2,3]) <-- here i is the typecode, check out the google search Just like list a.append(4) <-- add to last a.insert(4,4) <-- insert at location using an index, here at fourth index put 4 a.pop() <-- remove last a.remove(2) <-- remove specific item a[0] = 2 <-- replace zero index item with 2 a[0] = \"abc\" <-- does not work coz type is defined in array, unlike list","title":"Arrays"},{"location":"Certifications-and-Learning/languages/python/Arrays/#arrays","text":"https://codewithmosh.com/courses/417695/lectures/6781690 List can be used for anything. But when thing get very big, we get performance hit, hence array used. This is in python, and we need to specifically use array. On google, search python 3 typecode from array import array a = array(\"i\", [1,2,3]) <-- here i is the typecode, check out the google search Just like list a.append(4) <-- add to last a.insert(4,4) <-- insert at location using an index, here at fourth index put 4 a.pop() <-- remove last a.remove(2) <-- remove specific item a[0] = 2 <-- replace zero index item with 2 a[0] = \"abc\" <-- does not work coz type is defined in array, unlike list","title":"Arrays"},{"location":"Certifications-and-Learning/languages/python/DSA-functions/","text":"Important Functions Lambda Function https://codewithmosh.com/courses/417695/lectures/6781706 format --> lambda input:output Its a one line, anonymous function (function with no name). Kind of use once and throw. items = [(\"P1\", 10), (\"P2\",5), (\"P4\",11)] items.sort() <-- Does not work items.sort(key=lambda item:item[1]) Map Function https://codewithmosh.com/courses/417695/lectures/6781705 items = [(\"P1\", 10), (\"P2\",5), (\"P4\",11)] prices = [] for each in items: prices.append(item[1]) Above is direct way; but stronger is map! map(function, iterable) prices = map(lambda each:each[1], items) <-- Give map object prices = list(map(lambda each:each[1], items)) <-- Convert map object to list Filter function items = [(\"P1\", 10), (\"P2\",5), (\"P4\",11)] filter(function, iterable) filtered = filter(lambda each: each[1] >= 10 , items) <-- Gives filter object filtered = list(filter(lambda each: each[1] >= 10 , items)) <-- Convert filter object to list How filter and map different? - my explanation, you need to confirm and check Filter gives the filtered list back, which looks like original list Map gives the specific items within the list List Comprehension Only python seem to have this features, other languages don't have it. Again a looping function on iterables. Both map and filter can be repaced by list comprehension and is considered my pythonic Format --> [output for input in iterable] Example prices = [each[1] for each in items] filtered = [each for each in items if each[1]>=10] Zip functions Combining multiple lists, index by index. Format --> zip(l1,l2,l3,l4,l5 ...... ln) l1 = [1,2,3] l2 = [\"a\",\"b\",\"c\"] we want l3 to look like [(1,\"a\"),(2,\"b\"),(3,\"c\")] zip(l1,l2) <-- Gives zip object l3 = list(zip(l1,l2)) <-- you get what you want cool-thing = list(zip(\"abc\", l1, l2)) <-- Now since string is a list, three lists are combined Dictionary and advance comprehension https://codewithmosh.com/courses/417695/lectures/6781693 [do-something for each in collection] [output for each-element in input] <-- input is list, set, dict anything values = [] for x in range(5): values.append(x*2) values = [x 2 for x in range(5)] <-- list values = {x 2 for x in range(5)} <-- set values = {x: x*2 for x in range(5)} <-- dictionary, only output part is changed values = (x*2 for x in range(5)) <-- should be tuple, but no. Its a GENERATOR Generator Expressions https://codewithmosh.com/courses/417695/lectures/6781708 Lists go into memory all at once, hence a range(10000000000000000) can kill the ram. hence we use Generator, to load only what is needed and when needed, not all at once. value-a = [x*2 for x in range(100000))] <-- For a large number, all in memory are not good! value-b = (x*2 for x in range(100000))) <-- Generator object, curve bracket, which can be iterated for x in values-b: # or value-a print(x) from sys import getsizeof getsizeof(value-a) <-- 824464 byte getsizeof(value-b) <-- 120 byte WOW!!! len(value-b) <-- throws error, coz generator object calculates things only when needed and running len(value-a) <-- you get 100000","title":"Important Functions"},{"location":"Certifications-and-Learning/languages/python/DSA-functions/#important-functions","text":"","title":"Important Functions"},{"location":"Certifications-and-Learning/languages/python/DSA-functions/#lambda-function","text":"https://codewithmosh.com/courses/417695/lectures/6781706 format --> lambda input:output Its a one line, anonymous function (function with no name). Kind of use once and throw. items = [(\"P1\", 10), (\"P2\",5), (\"P4\",11)] items.sort() <-- Does not work items.sort(key=lambda item:item[1])","title":"Lambda Function"},{"location":"Certifications-and-Learning/languages/python/DSA-functions/#map-function","text":"https://codewithmosh.com/courses/417695/lectures/6781705 items = [(\"P1\", 10), (\"P2\",5), (\"P4\",11)] prices = [] for each in items: prices.append(item[1]) Above is direct way; but stronger is map! map(function, iterable) prices = map(lambda each:each[1], items) <-- Give map object prices = list(map(lambda each:each[1], items)) <-- Convert map object to list","title":"Map Function"},{"location":"Certifications-and-Learning/languages/python/DSA-functions/#filter-function","text":"items = [(\"P1\", 10), (\"P2\",5), (\"P4\",11)] filter(function, iterable) filtered = filter(lambda each: each[1] >= 10 , items) <-- Gives filter object filtered = list(filter(lambda each: each[1] >= 10 , items)) <-- Convert filter object to list How filter and map different? - my explanation, you need to confirm and check Filter gives the filtered list back, which looks like original list Map gives the specific items within the list","title":"Filter function"},{"location":"Certifications-and-Learning/languages/python/DSA-functions/#list-comprehension","text":"Only python seem to have this features, other languages don't have it. Again a looping function on iterables. Both map and filter can be repaced by list comprehension and is considered my pythonic Format --> [output for input in iterable] Example prices = [each[1] for each in items] filtered = [each for each in items if each[1]>=10]","title":"List Comprehension"},{"location":"Certifications-and-Learning/languages/python/DSA-functions/#zip-functions","text":"Combining multiple lists, index by index. Format --> zip(l1,l2,l3,l4,l5 ...... ln) l1 = [1,2,3] l2 = [\"a\",\"b\",\"c\"] we want l3 to look like [(1,\"a\"),(2,\"b\"),(3,\"c\")] zip(l1,l2) <-- Gives zip object l3 = list(zip(l1,l2)) <-- you get what you want cool-thing = list(zip(\"abc\", l1, l2)) <-- Now since string is a list, three lists are combined","title":"Zip functions"},{"location":"Certifications-and-Learning/languages/python/DSA-functions/#dictionary-and-advance-comprehension","text":"https://codewithmosh.com/courses/417695/lectures/6781693 [do-something for each in collection] [output for each-element in input] <-- input is list, set, dict anything values = [] for x in range(5): values.append(x*2) values = [x 2 for x in range(5)] <-- list values = {x 2 for x in range(5)} <-- set values = {x: x*2 for x in range(5)} <-- dictionary, only output part is changed values = (x*2 for x in range(5)) <-- should be tuple, but no. Its a GENERATOR","title":"Dictionary and advance comprehension"},{"location":"Certifications-and-Learning/languages/python/DSA-functions/#generator-expressions","text":"https://codewithmosh.com/courses/417695/lectures/6781708 Lists go into memory all at once, hence a range(10000000000000000) can kill the ram. hence we use Generator, to load only what is needed and when needed, not all at once. value-a = [x*2 for x in range(100000))] <-- For a large number, all in memory are not good! value-b = (x*2 for x in range(100000))) <-- Generator object, curve bracket, which can be iterated for x in values-b: # or value-a print(x) from sys import getsizeof getsizeof(value-a) <-- 824464 byte getsizeof(value-b) <-- 120 byte WOW!!! len(value-b) <-- throws error, coz generator object calculates things only when needed and running len(value-a) <-- you get 100000","title":"Generator Expressions"},{"location":"Certifications-and-Learning/languages/python/Dictionary/","text":"Dictionary Key value pair point = {\"x\": 1, \"y\": 2} point = dict(x=1,y=2) <-- same as above point[\"x\"] <-- point[0] like index does not work point.get(\"a\") <-- return None, since its not there point.get(\"a\",0) <-- return 0, since if a not there, then assign 0 del point[\"x\"] Looping: for key in point: print(key) print(point[key]) OR for key, value in point.items(): print(key, value) <-- gives tuple like (\"x\",1) and (\"y\",2) Dictionary Comprehension https://codewithmosh.com/courses/417695/lectures/6781693 refer - DSA functions","title":"Dictionary"},{"location":"Certifications-and-Learning/languages/python/Dictionary/#dictionary","text":"Key value pair point = {\"x\": 1, \"y\": 2} point = dict(x=1,y=2) <-- same as above point[\"x\"] <-- point[0] like index does not work point.get(\"a\") <-- return None, since its not there point.get(\"a\",0) <-- return 0, since if a not there, then assign 0 del point[\"x\"] Looping: for key in point: print(key) print(point[key]) OR for key, value in point.items(): print(key, value) <-- gives tuple like (\"x\",1) and (\"y\",2)","title":"Dictionary"},{"location":"Certifications-and-Learning/languages/python/Dictionary/#dictionary-comprehension","text":"https://codewithmosh.com/courses/417695/lectures/6781693 refer - DSA functions","title":"Dictionary Comprehension"},{"location":"Certifications-and-Learning/languages/python/List/","text":"Contents Lists Basic Creation Accessing Unpacking and packing Looping Adding and Removing Add Remove Finding Items Lists Basic Creation n = [a,b,c] matrix = [[1,2],[1,3]] zeros = [0] * 100 combine = zeros + n genList = list(range(20)) genList2 = list(\"Hello Bhai\") len(n) Accessing n[1] <- count from start n[-1] <- go to last, and the count n[0:3] n[:3] n[0:] n[:] <- from to n[::2] <- list in steps of 2 n[::-1] <- all items, but in reverse Unpacking and packing https://codewithmosh.com/courses/417695/lectures/6781696 n = [1,2,3] first, second, third = n <- each var is given each item of list n = list(range(20)) first, second, other = n <-- var first and second assigned, and new list with other items created first, other, last = n <-- capture first and last, middle ones form new list named other Looping https://codewithmosh.com/courses/417695/lectures/6781702 n = [1,2,3] for each in n: <-- gives list items only print(each) for each in enumerate(n): <-- This gives a tuple of index and item of list print(each[0], each[1]) OR for index, item in enumerate(n): <-- list unpacking used print(index, item) Adding and Removing Add n = [1,2,3,4] n.append(5) <-- add to end n.insert(0,\"xyz\") <-- add to index, here at 0 index, which is start giving [\"xyz\",1,2,3,4] Remove n.pop() <-- remove last item n.pop(2) <-- remove item at index 2 n.remove(\"xyz\") <-- remove first instance from left. Run loop to delete all instances. del n[0], n[::2] <-- remove range, in steps, specific.. many options n.clear() <-- clear the list, make it empty again Finding Items https://codewithmosh.com/courses/417695/lectures/6781691 n = [1, 2, 2, 2, 9, 3, 4] n.index(2) <-- Gives back index of specified item n.index(7) <-- Gives error. Other languages like c or java gives -1 if item does not exist We can do following: if 7 in n: print(n.index(7)) else: print(-1) n.count(2) <-- Number of occurrence of 2 in list, which will give 3 in our case Sorting https://codewithmosh.com/courses/417695/lectures/6781698 n = [1,5,4,3,78,5,2,9,8,6,0] n.sort() <-- Ascending order n.sort(reverse=True) <-- Descending To create a new sorted list, and not alter the existing one newList = sorted(n) newList = sorted(n, reverse=True) items = [(\"P1\", 10), (\"P2\",5), (\"P4\",11)] items.sort() <-- Does not work, refer next section, lambda function def sort_item(item): return item[1] <-- Sort is kind of loop in behind. So for \"each\" item's index 1, will be returned items.sort(key=sort_item) <-- we tell sort, the key which is to be sorted is as per our function The above is too long, hence lambda can be used. Lambda Function https://codewithmosh.com/courses/417695/lectures/6781706 Its a one line, anonymous function (function with no name). Kind of use once and throw. items = [(\"P1\", 10), (\"P2\",5), (\"P4\",11)] items.sort() <-- Does not work items.sort(key=lambda item:item[1])","title":"Contents"},{"location":"Certifications-and-Learning/languages/python/List/#contents","text":"Lists Basic Creation Accessing Unpacking and packing Looping Adding and Removing Add Remove Finding Items","title":"Contents"},{"location":"Certifications-and-Learning/languages/python/List/#lists","text":"","title":"Lists"},{"location":"Certifications-and-Learning/languages/python/List/#basic-creation","text":"n = [a,b,c] matrix = [[1,2],[1,3]] zeros = [0] * 100 combine = zeros + n genList = list(range(20)) genList2 = list(\"Hello Bhai\") len(n)","title":"Basic Creation"},{"location":"Certifications-and-Learning/languages/python/List/#accessing","text":"n[1] <- count from start n[-1] <- go to last, and the count n[0:3] n[:3] n[0:] n[:] <- from to n[::2] <- list in steps of 2 n[::-1] <- all items, but in reverse","title":"Accessing"},{"location":"Certifications-and-Learning/languages/python/List/#unpacking-and-packing","text":"https://codewithmosh.com/courses/417695/lectures/6781696 n = [1,2,3] first, second, third = n <- each var is given each item of list n = list(range(20)) first, second, other = n <-- var first and second assigned, and new list with other items created first, other, last = n <-- capture first and last, middle ones form new list named other","title":"Unpacking and packing"},{"location":"Certifications-and-Learning/languages/python/List/#looping","text":"https://codewithmosh.com/courses/417695/lectures/6781702 n = [1,2,3] for each in n: <-- gives list items only print(each) for each in enumerate(n): <-- This gives a tuple of index and item of list print(each[0], each[1]) OR for index, item in enumerate(n): <-- list unpacking used print(index, item)","title":"Looping"},{"location":"Certifications-and-Learning/languages/python/List/#adding-and-removing","text":"","title":"Adding and Removing"},{"location":"Certifications-and-Learning/languages/python/List/#add","text":"n = [1,2,3,4] n.append(5) <-- add to end n.insert(0,\"xyz\") <-- add to index, here at 0 index, which is start giving [\"xyz\",1,2,3,4]","title":"Add"},{"location":"Certifications-and-Learning/languages/python/List/#remove","text":"n.pop() <-- remove last item n.pop(2) <-- remove item at index 2 n.remove(\"xyz\") <-- remove first instance from left. Run loop to delete all instances. del n[0], n[::2] <-- remove range, in steps, specific.. many options n.clear() <-- clear the list, make it empty again","title":"Remove"},{"location":"Certifications-and-Learning/languages/python/List/#finding-items","text":"https://codewithmosh.com/courses/417695/lectures/6781691 n = [1, 2, 2, 2, 9, 3, 4] n.index(2) <-- Gives back index of specified item n.index(7) <-- Gives error. Other languages like c or java gives -1 if item does not exist We can do following: if 7 in n: print(n.index(7)) else: print(-1) n.count(2) <-- Number of occurrence of 2 in list, which will give 3 in our case","title":"Finding Items"},{"location":"Certifications-and-Learning/languages/python/List/#sorting","text":"https://codewithmosh.com/courses/417695/lectures/6781698 n = [1,5,4,3,78,5,2,9,8,6,0] n.sort() <-- Ascending order n.sort(reverse=True) <-- Descending To create a new sorted list, and not alter the existing one newList = sorted(n) newList = sorted(n, reverse=True) items = [(\"P1\", 10), (\"P2\",5), (\"P4\",11)] items.sort() <-- Does not work, refer next section, lambda function def sort_item(item): return item[1] <-- Sort is kind of loop in behind. So for \"each\" item's index 1, will be returned items.sort(key=sort_item) <-- we tell sort, the key which is to be sorted is as per our function The above is too long, hence lambda can be used.","title":"Sorting"},{"location":"Certifications-and-Learning/languages/python/List/#lambda-function","text":"https://codewithmosh.com/courses/417695/lectures/6781706 Its a one line, anonymous function (function with no name). Kind of use once and throw. items = [(\"P1\", 10), (\"P2\",5), (\"P4\",11)] items.sort() <-- Does not work items.sort(key=lambda item:item[1])","title":"Lambda Function"},{"location":"Certifications-and-Learning/languages/python/Queues/","text":"Queues https://codewithmosh.com/courses/417695/lectures/6781688 FIFO - First in -- First Out Like a real human key on a ticket counter Removing first item from a list is very memory intensive in python. Example. Image a list of 10000 items, remove the first, and remaining 9999 items will have to be moved to left. So deque is used. from collections import deque n = [1,2,3,4,5,6,7,8,9] que = deque(n) .append .popleft","title":"Queues"},{"location":"Certifications-and-Learning/languages/python/Queues/#queues","text":"https://codewithmosh.com/courses/417695/lectures/6781688 FIFO - First in -- First Out Like a real human key on a ticket counter Removing first item from a list is very memory intensive in python. Example. Image a list of 10000 items, remove the first, and remaining 9999 items will have to be moved to left. So deque is used. from collections import deque n = [1,2,3,4,5,6,7,8,9] que = deque(n) .append .popleft","title":"Queues"},{"location":"Certifications-and-Learning/languages/python/Set/","text":"Set https://codewithmosh.com/courses/417695/lectures/6781697 A collection with no duplicates. Uses {} brackets setVar = {1,2,3,4} n = [1,2,3,4,4,4,5,6,6] unique = set(n) <-- Gives {1,2,3,4,5,6} unique.add(7) unique.remove(5) len(unique) Most list method don't work here like unique[0] will throw error The Main power of sets! a = {1,2,3,4} b = {1,2,5,6} a | b <-- union {1,2,3,4,5,6} a & b <-- intersection {1,2} a - b <-- difference {3,4} keeps from left item a ^ b <-- symmetric difference {3,4,5,6} remove common in both","title":"Set"},{"location":"Certifications-and-Learning/languages/python/Set/#set","text":"https://codewithmosh.com/courses/417695/lectures/6781697 A collection with no duplicates. Uses {} brackets setVar = {1,2,3,4} n = [1,2,3,4,4,4,5,6,6] unique = set(n) <-- Gives {1,2,3,4,5,6} unique.add(7) unique.remove(5) len(unique) Most list method don't work here like unique[0] will throw error","title":"Set"},{"location":"Certifications-and-Learning/languages/python/Set/#the-main-power-of-sets","text":"a = {1,2,3,4} b = {1,2,5,6} a | b <-- union {1,2,3,4,5,6} a & b <-- intersection {1,2} a - b <-- difference {3,4} keeps from left item a ^ b <-- symmetric difference {3,4,5,6} remove common in both","title":"The Main power of sets!"},{"location":"Certifications-and-Learning/languages/python/Stacks/","text":"Stack LIFO -- last in - first out Like a stack of plates .append to add to end .pop to remove from end","title":"Stack"},{"location":"Certifications-and-Learning/languages/python/Stacks/#stack","text":"LIFO -- last in - first out Like a stack of plates .append to add to end .pop to remove from end","title":"Stack"},{"location":"Certifications-and-Learning/languages/python/Tuples/","text":"Tuples https://codewithmosh.com/courses/417695/lectures/6781707 A read only list, that can not be changed. Uses curve brackets like --> () List use --> [] Sets use --> {} point = (1,2) <-- this is the way to define point = 1,2 <-- python treats as tuple type(point) <-- see the type point = (1,2) + (3,4) <-- (1,2,3,4) point = (1,2) * 3 <-- (1,2,1,2,1,2) point = tuple([1,2]) <-- convert list [1,2] to tuple point[0] [:2:2] <-- all list like ways to access stuff packing and unpacking like list eg a,b = point","title":"Tuples"},{"location":"Certifications-and-Learning/languages/python/Tuples/#tuples","text":"https://codewithmosh.com/courses/417695/lectures/6781707 A read only list, that can not be changed. Uses curve brackets like --> () List use --> [] Sets use --> {} point = (1,2) <-- this is the way to define point = 1,2 <-- python treats as tuple type(point) <-- see the type point = (1,2) + (3,4) <-- (1,2,3,4) point = (1,2) * 3 <-- (1,2,1,2,1,2) point = tuple([1,2]) <-- convert list [1,2] to tuple point[0] [:2:2] <-- all list like ways to access stuff packing and unpacking like list eg a,b = point","title":"Tuples"},{"location":"Certifications-and-Learning/languages/python/Unpacking-Operator/","text":"Unpacking Operator https://codewithmosh.com/courses/417695/lectures/6781701 n = [1,2,3] print(n) --> [1,2,3] but we want 1,2,3 print(*n) --> 1,2,3 *n in python is similar to spread operator \"...n\" in javascript Example use values = list(range(5)) values = [*range(5)] <-- Use this instead of above another = [ range(3), \"Hello\", [3,2,1], values] <-- This creates and add all lists together d1 = {\"x\":1} d2 = {\"x\":5, \"y\":9} combine = { d1, d2, \"z\":8} <-- Double unpack dictionary. This adds them all up. Now we have x in d1 and d2. Unpacking will keep the second one, \"x\":5, coz it overwrites the first","title":"Unpacking Operator"},{"location":"Certifications-and-Learning/languages/python/Unpacking-Operator/#unpacking-operator","text":"https://codewithmosh.com/courses/417695/lectures/6781701 n = [1,2,3] print(n) --> [1,2,3] but we want 1,2,3 print(*n) --> 1,2,3 *n in python is similar to spread operator \"...n\" in javascript Example use values = list(range(5)) values = [*range(5)] <-- Use this instead of above another = [ range(3), \"Hello\", [3,2,1], values] <-- This creates and add all lists together d1 = {\"x\":1} d2 = {\"x\":5, \"y\":9} combine = { d1, d2, \"z\":8} <-- Double unpack dictionary. This adds them all up. Now we have x in d1 and d2. Unpacking will keep the second one, \"x\":5, coz it overwrites the first","title":"Unpacking Operator"},{"location":"Certifications-and-Learning/languages/python/code/","text":"Code index OOP exceptions timing-code-blocks packaging","title":"Code index"},{"location":"Certifications-and-Learning/languages/python/code/#code-index","text":"OOP exceptions timing-code-blocks packaging","title":"Code index"},{"location":"Certifications-and-Learning/languages/python/python_good_code_practice/","text":"Project Name Tags Links Youtube: https://www.youtube.com/watch?v=_uQrJ0TkZlc&t=7542s Github: Other: Objective Learning the best way to code in python and make a foundation for myself to learn new languages in future in such a way that best practices are always followed. Overview We learn: 1. OOP - Object oriented helps use design patterns and all 2. Docstring - For documentation 3. Error Handling - Every error should be handled 4. Testing - Each code must have tests 5. Linting and Formatting - To be sure the code looks and formatted properly 6. Modules - Proper way to create modules, with init .py 7. Scripts - Proper way with if name == ' main ' thingy enum for custom data type inheritance composition etc Details name == main thingy \"name\" gives the name of the module from which the function is run. Run say.py, the answer is always __main Run another.py, which imports say.py. This time it prints the script name, which is \"say\" Author Details Name : Manasvi Mohan Sharma Website : https://www.manasvi.co.in Mobile : +91-9899447040, +91-8181010179 Email : manasvimsharma@gmail.com LinkedIn : https://www.linkedin.com/in/manasvi-m/","title":"Project Name"},{"location":"Certifications-and-Learning/languages/python/python_good_code_practice/#project-name","text":"","title":"Project Name"},{"location":"Certifications-and-Learning/languages/python/python_good_code_practice/#tags","text":"","title":"Tags"},{"location":"Certifications-and-Learning/languages/python/python_good_code_practice/#links","text":"Youtube: https://www.youtube.com/watch?v=_uQrJ0TkZlc&t=7542s Github: Other:","title":"Links"},{"location":"Certifications-and-Learning/languages/python/python_good_code_practice/#objective","text":"Learning the best way to code in python and make a foundation for myself to learn new languages in future in such a way that best practices are always followed.","title":"Objective"},{"location":"Certifications-and-Learning/languages/python/python_good_code_practice/#overview","text":"We learn: 1. OOP - Object oriented helps use design patterns and all 2. Docstring - For documentation 3. Error Handling - Every error should be handled 4. Testing - Each code must have tests 5. Linting and Formatting - To be sure the code looks and formatted properly 6. Modules - Proper way to create modules, with init .py 7. Scripts - Proper way with if name == ' main ' thingy enum for custom data type inheritance composition etc","title":"Overview"},{"location":"Certifications-and-Learning/languages/python/python_good_code_practice/#details","text":"","title":"Details"},{"location":"Certifications-and-Learning/languages/python/python_good_code_practice/#name-main-thingy","text":"\"name\" gives the name of the module from which the function is run. Run say.py, the answer is always __main Run another.py, which imports say.py. This time it prints the script name, which is \"say\"","title":"name == main thingy"},{"location":"Certifications-and-Learning/languages/python/python_good_code_practice/#author-details","text":"Name : Manasvi Mohan Sharma Website : https://www.manasvi.co.in Mobile : +91-9899447040, +91-8181010179 Email : manasvimsharma@gmail.com LinkedIn : https://www.linkedin.com/in/manasvi-m/","title":"Author Details"},{"location":"Certifications-and-Learning/languages/react/","text":"Contents React VS Code Setup Basic Components Basic Advance Pagination, Sorting and Filtering - Client Side Routing Forms - Login, add item and Search Box based filtering Calling back end services Authentication and Authorization React https://codewithmosh.com/courses/357787/lectures/5634521 The course focuses on class based components. While today, people use functional based components. Its ok, basics are same. Functional Component Video - https://codewithmosh.com/courses/357787/lectures/5634720 Read the difference here - https://www.geeksforgeeks.org/differences-between-functional-components-and-class-components-in-react/ VS Code Setup Simple React Snippets - Burke Holland imrc imr cc ccc sfc Prettier - Esben Petersen Auto Import - ES6, TS, JSX, TSX - Sergey Korenuk Multi curser editing - ctrl + d Markup generation, also called Zen Coding - https://codewithmosh.com/courses/357787/lectures/5634619 table.table>thead>tr>th 4 div>div.classname>div.subclassname>a 4 Basic create-react-app appName import React from 'react'; import ReactDOM from 'react-dom'; const element = <h1>Hello World</h1>; ReactDOM.render(element, document.getElementById('root')); // Most Basic example of map const num = [1,2,3] const out = num.map(each => `<li>${each}</li>`) // Object Destructuring const arr = {a:'',b:'',c:''} const {a,b,c} = arr // Spread const obj1 = {name: 'A'} const obj2 = {age: 10} const comboObj = {...obj1, ...obj2, location: 'India'} const array1 = [1,2,3] const array2 = [4,5,6] const comboArray = [...array1, [9,8,7], ...array2] In javascript we use anything ${variable to inject} anything in jsx we use {variable to inject} with no back ticks. Example in return statement. Components Basic -- https://codewithmosh.com/courses/357787/lectures/5634614 Render Class Dynamically and Refactor VS code - https://codewithmosh.com/courses/357787/lectures/5634625 Handling Events - https://codewithmosh.com/courses/357787/lectures/5634622 onClick etc Binding Event Handlers - https://codewithmosh.com/courses/357787/lectures/5634615 Handle \"this\" by using \"bind()\" in the \"constructor\" OR use Arrow Function Updating State - https://codewithmosh.com/courses/357787/lectures/5634608 setState - Only in class based components, not in functional -- confirm and check not sure Passing Event Arguments - https://codewithmosh.com/courses/357787/lectures/5634618 onClick={()=> this.functionName(anyArgument)} functionName = anyArgument => {} Advance https://codewithmosh.com/courses/357787/lectures/5634716 Composing Components - https://codewithmosh.com/courses/357787/lectures/5634716 Passing data to components - https://codewithmosh.com/courses/357787/lectures/5634713 Passing children - https://codewithmosh.com/courses/357787/lectures/5634710 Debugging React App - https://codewithmosh.com/courses/357787/lectures/5634703 React Developer Tools in chrome extensions Props vs State - https://codewithmosh.com/courses/357787/lectures/5634715 Props value can not be changed when passed to child Raiding and Handling Events - https://codewithmosh.com/courses/357787/lectures/5634711 RULE: The component that owns a piece of state, should be the only one to modify it. So Child will raise event, and parent will handle event, by passing reference using props CHILD --> onClick={this.props.onDelete} -- In the JSX PARENT --> onDelete = {this.handleDelete} -- In the JSX handleDelete = () => {} -- A function defined Updating State - https://codewithmosh.com/courses/357787/lectures/5634718 Single Source of Truth - https://codewithmosh.com/courses/357787/lectures/5634714 Removing Local State and Controlled Component- https://codewithmosh.com/courses/357787/lectures/5634721 Multiple Components in Sync - https://codewithmosh.com/courses/357787/lectures/5634706 Lifting the State up - https://codewithmosh.com/courses/357787/lectures/5634719 Functional Component - https://codewithmosh.com/courses/357787/lectures/5634720 Life Cycle Hooks - https://codewithmosh.com/courses/357787/lectures/5634717 Used in class based components only, not in functional components Mount - https://codewithmosh.com/courses/357787/lectures/5634707 //For external calls if needed like various ajax calls constructor render componentDidMount Update - https://codewithmosh.com/courses/357787/lectures/5634723 //Used for optimizing things. If needed to make more external calls like ajax render componentDidUpdate Unmount - https://codewithmosh.com/courses/357787/lectures/5634709 //Can clean up memory and reset stuff to prevent memory leaks etc componentDidUnmount Pagination, Sorting and Filtering - Client Side https://codewithmosh.com/courses/357787/lectures/5706714 lodash underscore - https://codewithmosh.com/courses/357787/lectures/5706706 type checking - https://codewithmosh.com/courses/357787/lectures/5706709 Routing https://codewithmosh.com/courses/357787/lectures/5706771 No concept of routing in REACT, to other library is needed. React only handles the views of client side, thats it. Much like d3. yarn add react-router-dom yarn add query-string // https://codewithmosh.com/courses/357787/lectures/5706947 Important - https://codewithmosh.com/courses/357787/lectures/5706944 Forms - Login, add item and Search Box based filtering https://codewithmosh.com/courses/357787/lectures/5707058 Refs - https://codewithmosh.com/courses/357787/lectures/5707067 Validations with JOI - https://codewithmosh.com/courses/357787/lectures/5707068 yarn add joi-browser Calling back end services https://codewithmosh.com/courses/357787/lectures/5867611 Authentication and Authorization","title":"Contents"},{"location":"Certifications-and-Learning/languages/react/#contents","text":"React VS Code Setup Basic Components Basic Advance Pagination, Sorting and Filtering - Client Side Routing Forms - Login, add item and Search Box based filtering Calling back end services Authentication and Authorization","title":"Contents"},{"location":"Certifications-and-Learning/languages/react/#react","text":"https://codewithmosh.com/courses/357787/lectures/5634521 The course focuses on class based components. While today, people use functional based components. Its ok, basics are same. Functional Component Video - https://codewithmosh.com/courses/357787/lectures/5634720 Read the difference here - https://www.geeksforgeeks.org/differences-between-functional-components-and-class-components-in-react/","title":"React"},{"location":"Certifications-and-Learning/languages/react/#vs-code-setup","text":"Simple React Snippets - Burke Holland imrc imr cc ccc sfc Prettier - Esben Petersen Auto Import - ES6, TS, JSX, TSX - Sergey Korenuk Multi curser editing - ctrl + d Markup generation, also called Zen Coding - https://codewithmosh.com/courses/357787/lectures/5634619 table.table>thead>tr>th 4 div>div.classname>div.subclassname>a 4","title":"VS Code Setup"},{"location":"Certifications-and-Learning/languages/react/#basic","text":"create-react-app appName import React from 'react'; import ReactDOM from 'react-dom'; const element = <h1>Hello World</h1>; ReactDOM.render(element, document.getElementById('root')); // Most Basic example of map const num = [1,2,3] const out = num.map(each => `<li>${each}</li>`) // Object Destructuring const arr = {a:'',b:'',c:''} const {a,b,c} = arr // Spread const obj1 = {name: 'A'} const obj2 = {age: 10} const comboObj = {...obj1, ...obj2, location: 'India'} const array1 = [1,2,3] const array2 = [4,5,6] const comboArray = [...array1, [9,8,7], ...array2] In javascript we use anything ${variable to inject} anything in jsx we use {variable to inject} with no back ticks. Example in return statement.","title":"Basic"},{"location":"Certifications-and-Learning/languages/react/#components","text":"","title":"Components"},{"location":"Certifications-and-Learning/languages/react/#basic_1","text":"-- https://codewithmosh.com/courses/357787/lectures/5634614 Render Class Dynamically and Refactor VS code - https://codewithmosh.com/courses/357787/lectures/5634625 Handling Events - https://codewithmosh.com/courses/357787/lectures/5634622 onClick etc Binding Event Handlers - https://codewithmosh.com/courses/357787/lectures/5634615 Handle \"this\" by using \"bind()\" in the \"constructor\" OR use Arrow Function Updating State - https://codewithmosh.com/courses/357787/lectures/5634608 setState - Only in class based components, not in functional -- confirm and check not sure Passing Event Arguments - https://codewithmosh.com/courses/357787/lectures/5634618 onClick={()=> this.functionName(anyArgument)} functionName = anyArgument => {}","title":"Basic"},{"location":"Certifications-and-Learning/languages/react/#advance","text":"https://codewithmosh.com/courses/357787/lectures/5634716 Composing Components - https://codewithmosh.com/courses/357787/lectures/5634716 Passing data to components - https://codewithmosh.com/courses/357787/lectures/5634713 Passing children - https://codewithmosh.com/courses/357787/lectures/5634710 Debugging React App - https://codewithmosh.com/courses/357787/lectures/5634703 React Developer Tools in chrome extensions Props vs State - https://codewithmosh.com/courses/357787/lectures/5634715 Props value can not be changed when passed to child Raiding and Handling Events - https://codewithmosh.com/courses/357787/lectures/5634711 RULE: The component that owns a piece of state, should be the only one to modify it. So Child will raise event, and parent will handle event, by passing reference using props CHILD --> onClick={this.props.onDelete} -- In the JSX PARENT --> onDelete = {this.handleDelete} -- In the JSX handleDelete = () => {} -- A function defined Updating State - https://codewithmosh.com/courses/357787/lectures/5634718 Single Source of Truth - https://codewithmosh.com/courses/357787/lectures/5634714 Removing Local State and Controlled Component- https://codewithmosh.com/courses/357787/lectures/5634721 Multiple Components in Sync - https://codewithmosh.com/courses/357787/lectures/5634706 Lifting the State up - https://codewithmosh.com/courses/357787/lectures/5634719 Functional Component - https://codewithmosh.com/courses/357787/lectures/5634720 Life Cycle Hooks - https://codewithmosh.com/courses/357787/lectures/5634717 Used in class based components only, not in functional components Mount - https://codewithmosh.com/courses/357787/lectures/5634707 //For external calls if needed like various ajax calls constructor render componentDidMount Update - https://codewithmosh.com/courses/357787/lectures/5634723 //Used for optimizing things. If needed to make more external calls like ajax render componentDidUpdate Unmount - https://codewithmosh.com/courses/357787/lectures/5634709 //Can clean up memory and reset stuff to prevent memory leaks etc componentDidUnmount","title":"Advance"},{"location":"Certifications-and-Learning/languages/react/#pagination-sorting-and-filtering-client-side","text":"https://codewithmosh.com/courses/357787/lectures/5706714 lodash underscore - https://codewithmosh.com/courses/357787/lectures/5706706 type checking - https://codewithmosh.com/courses/357787/lectures/5706709","title":"Pagination, Sorting and Filtering - Client Side"},{"location":"Certifications-and-Learning/languages/react/#routing","text":"https://codewithmosh.com/courses/357787/lectures/5706771 No concept of routing in REACT, to other library is needed. React only handles the views of client side, thats it. Much like d3. yarn add react-router-dom yarn add query-string // https://codewithmosh.com/courses/357787/lectures/5706947 Important - https://codewithmosh.com/courses/357787/lectures/5706944","title":"Routing"},{"location":"Certifications-and-Learning/languages/react/#forms-login-add-item-and-search-box-based-filtering","text":"https://codewithmosh.com/courses/357787/lectures/5707058 Refs - https://codewithmosh.com/courses/357787/lectures/5707067 Validations with JOI - https://codewithmosh.com/courses/357787/lectures/5707068 yarn add joi-browser","title":"Forms - Login, add item and Search Box based filtering"},{"location":"Certifications-and-Learning/languages/react/#calling-back-end-services","text":"https://codewithmosh.com/courses/357787/lectures/5867611","title":"Calling back end services"},{"location":"Certifications-and-Learning/languages/react/#authentication-and-authorization","text":"","title":"Authentication and Authorization"},{"location":"Certifications-and-Learning/languages/react-native/","text":"React Native Two ways to make using React Native 1. Expo CLI - npm i -g expo-cli 2. React Native CLI - npm i -g VS Code plugins - https://codewithmosh.com/courses/887220/lectures/16299611 react native tools react-native/react/redux prettier material icon theme Very Basic like div tag like div tag and takes care of notches too is like p tag","title":"React Native"},{"location":"Certifications-and-Learning/languages/react-native/#react-native","text":"Two ways to make using React Native 1. Expo CLI - npm i -g expo-cli 2. React Native CLI - npm i -g VS Code plugins - https://codewithmosh.com/courses/887220/lectures/16299611 react native tools react-native/react/redux prettier material icon theme","title":"React Native"},{"location":"Certifications-and-Learning/languages/react-native/#very-basic","text":"like div tag like div tag and takes care of notches too is like p tag","title":"Very Basic"},{"location":"Certifications-and-Learning/languages/redux/","text":"Contents Intro Basic File Structure Functional Programming Functions are First Class Citizens Higher Order Functions Function Composition Composing and Piping Currying Pure Functions and Immutability Updating objects Updating Arrays Enforcing Immutability Redux Fundamentals Three Building Blocks Building redux - steps Files Needed Design Store Define Actions Create Reducer Set up the Store Dispatching and Subscribing Actions Action Types Action Creators Redux Dev Tool Clean Redux Code Project Structure Recommended Intuitive Ducks Pattern Redux Toolkit Store Actions Reducers Slices - FINAL BEST WAY Advance Designing a store Combine Reducers Normalization Selectors and Memoizing Selectors Middleware Basic use Parameterizing Middleare REDUX THUNK Intro Flux by facebook Redux - Inspired by Flux Mobx Single Source of Truth. Central State Management. Strength - How data changed and track UI state change for troubleshooting - Time Travel Debugging - Redux dev tools - Log Rocket tool - for tracking and time travel debugging - Save any state and load later - Preserve and Cache states, to prevent re-download or reload Pros: Predictable state changes, Centralised state, easy debugging, preserve page state undo/redo Ecosystem of add-ons Cons: Complexity is high Very verbose. Basic File Structure actiontypes.js // Action Types are named here and exported. actions.js // Action functions are here, actionTypes imported here. reducer.js // Reducers defined here. Switch cases, actions imported here. store.js // Store is defined here. Import redux lib and createStore from the reducer.js. index.js // All interactions done here. Dispatch and Subscriptions. Functional Programming https://codewithmosh.com/courses/783424/lectures/14780302 Decomposing a program into many smaller functions and then building larger functions. Clojure and Haskell are purely functional programming languages. Functions are First Class Citizens When we can 1. Define function as variable 2. Return function from a function 3. Input function as a variable into another function. // Example 1 function sayHello() {} let fn = sayHello // Not calling function, just refencing it into an object. fn() // Same as below sayHello() //Example 2 function funA(){ return function() { return \"Hello\"; } let fn = funA(); // Returns internal function. let message = fn(); // Calling the defined function. } Higher Order Functions If a function takes a function as argument or return function or both. Below in javascript are higher order functions .map setTimeout() Function Composition let input = \" Hello \"; const trim = str => str.trim(); const wrapInDiv = str => `<div>${str}</div>` const toLowerCase = str => str.toLowerCase() const result = wrapInDiv(toLowerCase(trim(input))); // NOTE above too much wrapping and reading from right to left Composing and Piping yarn add lodash Refer above code import {compose, pipe} from \"lodash/fp\"; let input = \" Hello \"; const trim = str => str.trim(); const wrapInDiv = str => `<div>${str}</div>` const toLowerCase = str => str.toLowerCase() //const transform = compose(wrapInDiv, toLowerCase, trim) // to much wrapping is solved, but still read from right to left const transform = pipe(trim, toLowerCase, wrapInDiv) // This is the best, no wrapping and read left to write. transform(input); Currying https://codewithmosh.com/courses/783424/lectures/14780300 Reducing the number of input parameters variables in a function to single parameter, by making nested functions. Now in the above example, pipe function takes in only functions with no varibales. How to we pass variables? We use currying, where we create function within function and pass 1 variable per function. function add(a){ return function(b){ return a+b } } add(1)(5) // Instead of doing add(1,5), we do (1)(5). Meaning calling function, then inner function then inner.... const add2 = a => b => a+b // instead of (a,b) => a+b, we use this. Our Example: import {compose, pipe} from \"lodash/fp\"; let input = \" Hello \"; const trim = str => str.trim(); //const wrap = (type,str) => `<${type}>${str}</${type}>` // Instead of this const wrap = type => str => `<${type}>${str}</${type}>` // Do this const toLowerCase = str => str.toLowerCase() const transform = pipe(trim, toLowerCase, wrap(\"div\")) // Now we can pass two variables transform(input); Pure Functions and Immutability https://codewithmosh.com/courses/783424/lectures/14780287 If a function takes an argument and always gives the same output, then its pure. We can not mutate parameters in pure functions. Example MATH.random, datetime etc are not pure functions. Pros: Self-documented Easily testable Concurrency Cacheable In javascript const items can not me mutated. But arrays can be mutated by changing values with in. Hence javascript is a multi paradigm language. If we can not mutate a variable once defined, its called immutability and that is a good thing. Why good? Predictability Faster Change Detection Concurrency Cons Performance issue when large number of objects Memory overhead Updating objects https://codewithmosh.com/courses/783424/lectures/14780289 Shallow vs Deep Copy const person = {name: \"Hello\", address: { state: \"Haryana\", city: \"Gurugram\" }} // Shallow copy. Here creating a new object then changing it also changes the parent. const updated = Object.assign(...person, name: \"Bye\") // Deep copy. Now we created a full copy, and this object is independent from parent. const updated = { ...person, // Copy on level address: { ...person.address // copy second level }, name: \"Bye\") // Changing a value } Updating Arrays https://codewithmosh.com/courses/783424/lectures/14780298 Enforcing Immutability Good Libraries Immutable - https://codewithmosh.com/courses/783424/lectures/14780290 Immer - https://codewithmosh.com/courses/783424/lectures/14780301 Mori Immer is preferred. Redux Fundamentals https://codewithmosh.com/courses/783424/lectures/14780381 yarn add redux Three Building Blocks Store (where we store) Action (should be called events) Reducer (a function that handles store and action. Like an event handler) \"Event handler\" name is used in context when we do mutations, but in functional programming, we deal with immutables, hence instead of event handler, a new name was needed, and we called it reducer. Building redux - steps Design Store Define Actions Create Reducers Set up the Store Dispatching Actions and Subscribing Actions Files Needed actiontypes.js // Action Types are named here and exported. actions.js // Action functions are here, actionTypes imported here. reducer.js // Reducers defined here. Switch cases, actions imported here. store.js // Store is defined here. Import redux lib and createStore from the reducer.js. index.js // All interactions done here. Dispatch and Subscriptions. Design Store https://codewithmosh.com/courses/783424/lectures/14780373 [ { id:1, desc: \"\", resolved: false }, {...}, //Object [...], //Or Array [...], ] Define Actions https://codewithmosh.com/courses/783424/lectures/14780377 Add, Mark Resolve, Delete etc etc anything { type: \"bugAdded\", // many people use BUG_ADDED payload: { // The miniman amount of information for the action id: 1, description: \"Something meaningfull\" } } Create Reducer // reducer.js function reducer(state = [], action){ // We use state = [] else, javascript will make it undefined switch (action.type){ case \"bugAdded\": return ........ case \"bugRemoved\": return ........ default: return state } } export default reducer Set up the Store //store.js import { createStore } from 'redux'; import reducer from './reducer'; const store = createStore(reducer); export default store Dispatching and Subscribing Actions https://codewithmosh.com/courses/783424/lectures/14780384 https://codewithmosh.com/courses/783424/lectures/14780375 // index.js import store from './store'; console.log(store) /////////////////// Subscribe // NOTE: Subscribe function returns a function called unsubscribe // Which can be called later to remove subscription. // Pretty Weird! const unsubscribe = store.subscribe(()=>{ console.log(\"Store Changed\", store.getState()) }) /////////////////// Dispatch // We will get notification for the below action bevause we subscribed above store.dispatch({ type: \"bugAdded\", payload: { description: \"Bug1\" } }) unsubscribe() // Calling this will unsubscribe. READ WEIRD NOTE ABOVE! // We will not get notification now for below action store.dispatch({ type: \"bugRemoved\", payload: { id: \"1\" } }) console.log(store.getState()) Action Types //actionTypes.js export const BUG_ADDED = \"bugAdded\" export const BUG_REMOVED = \"bugREMOVED\" //Everywhere in reducer.js and index.js import * as actions from './actionTypes'; //replace \"bugAdded\" with actions.BUG_ADDED //replace \"bugRemoved\" with actions.BUG_REMOVED } Action Creators https://codewithmosh.com/courses/783424/lectures/14780380 // actions.js import * as actions from './actionTypes'; export function bugAdded(desc) { return { type: actions.BUG_ADDED, payload:{ desc: \"Bug1\" } } } Redux Dev Tool https://codewithmosh.com/courses/783424/lectures/14780553 Clean Redux Code Project Structure Recommended https://codewithmosh.com/courses/783424/lectures/14780635 Intuitive src store auth actions.js actionTypes.js reducer.js bugs projects etc Ducks Pattern https://codewithmosh.com/courses/783424/lectures/14780632 Here actions, actionTypes and reducer moved to single FILE as per role. src store auth.js bugs.js projects.js etc etc Redux Toolkit Use this instead of redux. Many helpful functions. Download - https://codewithmosh.com/courses/783424/lectures/14780626 Store https://codewithmosh.com/courses/783424/lectures/14780629 // configureStore.js which was store.js import { configureStore } from \"@reduxjs/toolkit\"; import reducer from './bugs'; export default function() { return configureStore({reducer}); } Actions https://codewithmosh.com/courses/783424/lectures/14780628 // bugs.js import { createAction } from \"@reduxjs/toolkit\"; //Basic example: //const action = createAction(\"bugUpdated\") //console.log(action(payload)) // Payload can be object, variable anything // Action Types - Not Needed anymore, as action.type or action.toString() gives the name // Action Creators const bugAdded = createAction(\"bugAdded\") const bugRemoved = createAction(\"bugRemoved\") const bugResolved = createAction(\"bugresolved\") //Reducer - this is where switch statement for various cases was used. case bugAdded.type: // Instead of case BUG_ADDED case bugRemoved.type: // Instead of case BUG_REMOVED case bugResolved.type: // Instead of case BUG_RESOLVED Reducers https://codewithmosh.com/courses/783424/lectures/14780633 // bugs.js import { createAction, createReducer } from \"@reduxjs/toolkit\"; // Action Creators const bugAdded = createAction(\"bugAdded\") const bugRemoved = createAction(\"bugRemoved\") const bugResolved = createAction(\"bugresolved\") //Reducer - this is where switch statement for various cases was used. export default createReducer([], { bugAdded: (state, action) => { state.push({ STATE_GOES_HERE }) }, // Directly refer the var name [bugRemoved.type]: (state, action) => { state.push({ STATE_GOES_HERE }) }, // Of refer by .type [bugResolved.type]: (state, action) => { state.push({ STATE_GOES_HERE }) } // Both ways allowed, .type preferred; coz we can change creatAction(\"Name\") anytime. }) Slices - FINAL BEST WAY https://codewithmosh.com/courses/783424/lectures/14780630 This is a combination of Actions and Reducers all at once // bugs.js import { createSlice } from \"@reduxjs/toolkit\"; const slice = createSlice({ name: 'bugs', initialState: [], reducers: { bugAdded: (bugs, action) => {bugs.push({ STATE_GOES_HERE })}, bugRemoved: (bugs, action) => {bugs.push({ STATE_GOES_HERE })}, bugResolved: (bugs, action) => {bugs.push({ STATE_GOES_HERE })} } }) export const {bugAdded, bugRemovec, bugResolver} = slice.actions; export default slice.reducer; // Action Creators -- Not Needed Now // Reducers -- Not Needed Now Advance Designing a store Combine Reducers https://codewithmosh.com/courses/783424/lectures/14780682 NOTE: Concept of entities reducer in video, but not written here. What is done is, we make multiple files of conbineReducers, which has similar relating reducers. Then we create a Parent combineReducer to combine them all. This helps in debugging. //reducer.js import { combineReducers } from \"redux\"; import reducerA from \"./A\"; // Made using slices import reducerB from \"./B\"; // here we have many reducers import reducerC from \"./C\"; export default combineReducers({ A: reducerA, B: reducerB, C: reducerC }) //configureStore.js import reducer from \"reducer\"; Normalization https://codewithmosh.com/courses/783424/lectures/14780675 git link - paularmstrong / normalizr Selectors and Memoizing Selectors https://codewithmosh.com/courses/783424/lectures/14780679 yarn add reselect //bugs.js import { createSelector } from \"reselect\"; createSelector ( state => state.entities.bugs, state => state.entities.projects, // Include all reducers here (bugs, projects) => bugs.filter(bug => !bug.resolved) ) Middleware Use? * Calling APIs * Error Reporting * Analytics * Autherization https://codewithmosh.com/courses/783424/lectures/14780721 Basic use Image we making a logger //middleware/logger.js const logger = store => next => action => { // Using currying here. Remember as SNA console.log(\"store\", store); console.log(\"next\", next); console.log(\"action\", action); next(action); }; export default logger; //configureStore.js import logger from \"./middleware/logger\" export default function() { return configureStore({ reducer, middleware: [logger] // Any number of middlewares }) } // We we do not use redux toolkit, then // index.js import { createStore, applyMiddleware } from \"redux\"; import reducer from \"./store/reducer\"; const store = createStore(reducer, applyMiddleware(logger)); //applyMiddleware is called Store Enhancer Parameterizing Middleare https://codewithmosh.com/courses/783424/lectures/14780719 //middleware/logger.js const logger = param => store => next => action => { // Notice param added console.log(\"Logging\", param); // notice param next(action); }; export default logger; // configureStore.js export default function() { return configureStore({ reducer, middleware: [logger(\"console\")] // A change here, now we can give in arguments }) } REDUX THUNK https://codewithmosh.com/courses/783424/lectures/14780722 Something to do with dispatching functions, to handle async, api calls etc. Not sure, and dont have energy to understand it. See it later.","title":"Contents"},{"location":"Certifications-and-Learning/languages/redux/#contents","text":"Intro Basic File Structure Functional Programming Functions are First Class Citizens Higher Order Functions Function Composition Composing and Piping Currying Pure Functions and Immutability Updating objects Updating Arrays Enforcing Immutability Redux Fundamentals Three Building Blocks Building redux - steps Files Needed Design Store Define Actions Create Reducer Set up the Store Dispatching and Subscribing Actions Action Types Action Creators Redux Dev Tool Clean Redux Code Project Structure Recommended Intuitive Ducks Pattern Redux Toolkit Store Actions Reducers Slices - FINAL BEST WAY Advance Designing a store Combine Reducers Normalization Selectors and Memoizing Selectors Middleware Basic use Parameterizing Middleare REDUX THUNK","title":"Contents"},{"location":"Certifications-and-Learning/languages/redux/#intro","text":"Flux by facebook Redux - Inspired by Flux Mobx Single Source of Truth. Central State Management. Strength - How data changed and track UI state change for troubleshooting - Time Travel Debugging - Redux dev tools - Log Rocket tool - for tracking and time travel debugging - Save any state and load later - Preserve and Cache states, to prevent re-download or reload Pros: Predictable state changes, Centralised state, easy debugging, preserve page state undo/redo Ecosystem of add-ons Cons: Complexity is high Very verbose.","title":"Intro"},{"location":"Certifications-and-Learning/languages/redux/#basic-file-structure","text":"actiontypes.js // Action Types are named here and exported. actions.js // Action functions are here, actionTypes imported here. reducer.js // Reducers defined here. Switch cases, actions imported here. store.js // Store is defined here. Import redux lib and createStore from the reducer.js. index.js // All interactions done here. Dispatch and Subscriptions.","title":"Basic File Structure"},{"location":"Certifications-and-Learning/languages/redux/#functional-programming","text":"https://codewithmosh.com/courses/783424/lectures/14780302 Decomposing a program into many smaller functions and then building larger functions. Clojure and Haskell are purely functional programming languages.","title":"Functional Programming"},{"location":"Certifications-and-Learning/languages/redux/#functions-are-first-class-citizens","text":"When we can 1. Define function as variable 2. Return function from a function 3. Input function as a variable into another function. // Example 1 function sayHello() {} let fn = sayHello // Not calling function, just refencing it into an object. fn() // Same as below sayHello() //Example 2 function funA(){ return function() { return \"Hello\"; } let fn = funA(); // Returns internal function. let message = fn(); // Calling the defined function. }","title":"Functions are First Class Citizens"},{"location":"Certifications-and-Learning/languages/redux/#higher-order-functions","text":"If a function takes a function as argument or return function or both. Below in javascript are higher order functions .map setTimeout()","title":"Higher Order Functions"},{"location":"Certifications-and-Learning/languages/redux/#function-composition","text":"let input = \" Hello \"; const trim = str => str.trim(); const wrapInDiv = str => `<div>${str}</div>` const toLowerCase = str => str.toLowerCase() const result = wrapInDiv(toLowerCase(trim(input))); // NOTE above too much wrapping and reading from right to left","title":"Function Composition"},{"location":"Certifications-and-Learning/languages/redux/#composing-and-piping","text":"yarn add lodash Refer above code import {compose, pipe} from \"lodash/fp\"; let input = \" Hello \"; const trim = str => str.trim(); const wrapInDiv = str => `<div>${str}</div>` const toLowerCase = str => str.toLowerCase() //const transform = compose(wrapInDiv, toLowerCase, trim) // to much wrapping is solved, but still read from right to left const transform = pipe(trim, toLowerCase, wrapInDiv) // This is the best, no wrapping and read left to write. transform(input);","title":"Composing and Piping"},{"location":"Certifications-and-Learning/languages/redux/#currying","text":"https://codewithmosh.com/courses/783424/lectures/14780300 Reducing the number of input parameters variables in a function to single parameter, by making nested functions. Now in the above example, pipe function takes in only functions with no varibales. How to we pass variables? We use currying, where we create function within function and pass 1 variable per function. function add(a){ return function(b){ return a+b } } add(1)(5) // Instead of doing add(1,5), we do (1)(5). Meaning calling function, then inner function then inner.... const add2 = a => b => a+b // instead of (a,b) => a+b, we use this. Our Example: import {compose, pipe} from \"lodash/fp\"; let input = \" Hello \"; const trim = str => str.trim(); //const wrap = (type,str) => `<${type}>${str}</${type}>` // Instead of this const wrap = type => str => `<${type}>${str}</${type}>` // Do this const toLowerCase = str => str.toLowerCase() const transform = pipe(trim, toLowerCase, wrap(\"div\")) // Now we can pass two variables transform(input);","title":"Currying"},{"location":"Certifications-and-Learning/languages/redux/#pure-functions-and-immutability","text":"https://codewithmosh.com/courses/783424/lectures/14780287 If a function takes an argument and always gives the same output, then its pure. We can not mutate parameters in pure functions. Example MATH.random, datetime etc are not pure functions. Pros: Self-documented Easily testable Concurrency Cacheable In javascript const items can not me mutated. But arrays can be mutated by changing values with in. Hence javascript is a multi paradigm language. If we can not mutate a variable once defined, its called immutability and that is a good thing. Why good? Predictability Faster Change Detection Concurrency Cons Performance issue when large number of objects Memory overhead","title":"Pure Functions and Immutability"},{"location":"Certifications-and-Learning/languages/redux/#updating-objects","text":"https://codewithmosh.com/courses/783424/lectures/14780289 Shallow vs Deep Copy const person = {name: \"Hello\", address: { state: \"Haryana\", city: \"Gurugram\" }} // Shallow copy. Here creating a new object then changing it also changes the parent. const updated = Object.assign(...person, name: \"Bye\") // Deep copy. Now we created a full copy, and this object is independent from parent. const updated = { ...person, // Copy on level address: { ...person.address // copy second level }, name: \"Bye\") // Changing a value }","title":"Updating objects"},{"location":"Certifications-and-Learning/languages/redux/#updating-arrays","text":"https://codewithmosh.com/courses/783424/lectures/14780298","title":"Updating Arrays"},{"location":"Certifications-and-Learning/languages/redux/#enforcing-immutability","text":"Good Libraries Immutable - https://codewithmosh.com/courses/783424/lectures/14780290 Immer - https://codewithmosh.com/courses/783424/lectures/14780301 Mori Immer is preferred.","title":"Enforcing Immutability"},{"location":"Certifications-and-Learning/languages/redux/#redux-fundamentals","text":"https://codewithmosh.com/courses/783424/lectures/14780381 yarn add redux","title":"Redux Fundamentals"},{"location":"Certifications-and-Learning/languages/redux/#three-building-blocks","text":"Store (where we store) Action (should be called events) Reducer (a function that handles store and action. Like an event handler) \"Event handler\" name is used in context when we do mutations, but in functional programming, we deal with immutables, hence instead of event handler, a new name was needed, and we called it reducer.","title":"Three Building Blocks"},{"location":"Certifications-and-Learning/languages/redux/#building-redux-steps","text":"Design Store Define Actions Create Reducers Set up the Store Dispatching Actions and Subscribing Actions","title":"Building redux - steps"},{"location":"Certifications-and-Learning/languages/redux/#files-needed","text":"actiontypes.js // Action Types are named here and exported. actions.js // Action functions are here, actionTypes imported here. reducer.js // Reducers defined here. Switch cases, actions imported here. store.js // Store is defined here. Import redux lib and createStore from the reducer.js. index.js // All interactions done here. Dispatch and Subscriptions.","title":"Files Needed"},{"location":"Certifications-and-Learning/languages/redux/#design-store","text":"https://codewithmosh.com/courses/783424/lectures/14780373 [ { id:1, desc: \"\", resolved: false }, {...}, //Object [...], //Or Array [...], ]","title":"Design Store"},{"location":"Certifications-and-Learning/languages/redux/#define-actions","text":"https://codewithmosh.com/courses/783424/lectures/14780377 Add, Mark Resolve, Delete etc etc anything { type: \"bugAdded\", // many people use BUG_ADDED payload: { // The miniman amount of information for the action id: 1, description: \"Something meaningfull\" } }","title":"Define Actions"},{"location":"Certifications-and-Learning/languages/redux/#create-reducer","text":"// reducer.js function reducer(state = [], action){ // We use state = [] else, javascript will make it undefined switch (action.type){ case \"bugAdded\": return ........ case \"bugRemoved\": return ........ default: return state } } export default reducer","title":"Create Reducer"},{"location":"Certifications-and-Learning/languages/redux/#set-up-the-store","text":"//store.js import { createStore } from 'redux'; import reducer from './reducer'; const store = createStore(reducer); export default store","title":"Set up the Store"},{"location":"Certifications-and-Learning/languages/redux/#dispatching-and-subscribing-actions","text":"https://codewithmosh.com/courses/783424/lectures/14780384 https://codewithmosh.com/courses/783424/lectures/14780375 // index.js import store from './store'; console.log(store) /////////////////// Subscribe // NOTE: Subscribe function returns a function called unsubscribe // Which can be called later to remove subscription. // Pretty Weird! const unsubscribe = store.subscribe(()=>{ console.log(\"Store Changed\", store.getState()) }) /////////////////// Dispatch // We will get notification for the below action bevause we subscribed above store.dispatch({ type: \"bugAdded\", payload: { description: \"Bug1\" } }) unsubscribe() // Calling this will unsubscribe. READ WEIRD NOTE ABOVE! // We will not get notification now for below action store.dispatch({ type: \"bugRemoved\", payload: { id: \"1\" } }) console.log(store.getState())","title":"Dispatching and Subscribing Actions"},{"location":"Certifications-and-Learning/languages/redux/#action-types","text":"//actionTypes.js export const BUG_ADDED = \"bugAdded\" export const BUG_REMOVED = \"bugREMOVED\" //Everywhere in reducer.js and index.js import * as actions from './actionTypes'; //replace \"bugAdded\" with actions.BUG_ADDED //replace \"bugRemoved\" with actions.BUG_REMOVED }","title":"Action Types"},{"location":"Certifications-and-Learning/languages/redux/#action-creators","text":"https://codewithmosh.com/courses/783424/lectures/14780380 // actions.js import * as actions from './actionTypes'; export function bugAdded(desc) { return { type: actions.BUG_ADDED, payload:{ desc: \"Bug1\" } } }","title":"Action Creators"},{"location":"Certifications-and-Learning/languages/redux/#redux-dev-tool","text":"https://codewithmosh.com/courses/783424/lectures/14780553","title":"Redux Dev Tool"},{"location":"Certifications-and-Learning/languages/redux/#clean-redux-code","text":"","title":"Clean Redux Code"},{"location":"Certifications-and-Learning/languages/redux/#project-structure-recommended","text":"https://codewithmosh.com/courses/783424/lectures/14780635","title":"Project Structure Recommended"},{"location":"Certifications-and-Learning/languages/redux/#intuitive","text":"src store auth actions.js actionTypes.js reducer.js bugs projects etc","title":"Intuitive"},{"location":"Certifications-and-Learning/languages/redux/#ducks-pattern","text":"https://codewithmosh.com/courses/783424/lectures/14780632 Here actions, actionTypes and reducer moved to single FILE as per role. src store auth.js bugs.js projects.js etc etc","title":"Ducks Pattern"},{"location":"Certifications-and-Learning/languages/redux/#redux-toolkit","text":"Use this instead of redux. Many helpful functions. Download - https://codewithmosh.com/courses/783424/lectures/14780626","title":"Redux Toolkit"},{"location":"Certifications-and-Learning/languages/redux/#store","text":"https://codewithmosh.com/courses/783424/lectures/14780629 // configureStore.js which was store.js import { configureStore } from \"@reduxjs/toolkit\"; import reducer from './bugs'; export default function() { return configureStore({reducer}); }","title":"Store"},{"location":"Certifications-and-Learning/languages/redux/#actions","text":"https://codewithmosh.com/courses/783424/lectures/14780628 // bugs.js import { createAction } from \"@reduxjs/toolkit\"; //Basic example: //const action = createAction(\"bugUpdated\") //console.log(action(payload)) // Payload can be object, variable anything // Action Types - Not Needed anymore, as action.type or action.toString() gives the name // Action Creators const bugAdded = createAction(\"bugAdded\") const bugRemoved = createAction(\"bugRemoved\") const bugResolved = createAction(\"bugresolved\") //Reducer - this is where switch statement for various cases was used. case bugAdded.type: // Instead of case BUG_ADDED case bugRemoved.type: // Instead of case BUG_REMOVED case bugResolved.type: // Instead of case BUG_RESOLVED","title":"Actions"},{"location":"Certifications-and-Learning/languages/redux/#reducers","text":"https://codewithmosh.com/courses/783424/lectures/14780633 // bugs.js import { createAction, createReducer } from \"@reduxjs/toolkit\"; // Action Creators const bugAdded = createAction(\"bugAdded\") const bugRemoved = createAction(\"bugRemoved\") const bugResolved = createAction(\"bugresolved\") //Reducer - this is where switch statement for various cases was used. export default createReducer([], { bugAdded: (state, action) => { state.push({ STATE_GOES_HERE }) }, // Directly refer the var name [bugRemoved.type]: (state, action) => { state.push({ STATE_GOES_HERE }) }, // Of refer by .type [bugResolved.type]: (state, action) => { state.push({ STATE_GOES_HERE }) } // Both ways allowed, .type preferred; coz we can change creatAction(\"Name\") anytime. })","title":"Reducers"},{"location":"Certifications-and-Learning/languages/redux/#slices-final-best-way","text":"https://codewithmosh.com/courses/783424/lectures/14780630 This is a combination of Actions and Reducers all at once // bugs.js import { createSlice } from \"@reduxjs/toolkit\"; const slice = createSlice({ name: 'bugs', initialState: [], reducers: { bugAdded: (bugs, action) => {bugs.push({ STATE_GOES_HERE })}, bugRemoved: (bugs, action) => {bugs.push({ STATE_GOES_HERE })}, bugResolved: (bugs, action) => {bugs.push({ STATE_GOES_HERE })} } }) export const {bugAdded, bugRemovec, bugResolver} = slice.actions; export default slice.reducer; // Action Creators -- Not Needed Now // Reducers -- Not Needed Now","title":"Slices - FINAL BEST WAY"},{"location":"Certifications-and-Learning/languages/redux/#advance","text":"","title":"Advance"},{"location":"Certifications-and-Learning/languages/redux/#designing-a-store","text":"","title":"Designing a store"},{"location":"Certifications-and-Learning/languages/redux/#combine-reducers","text":"https://codewithmosh.com/courses/783424/lectures/14780682 NOTE: Concept of entities reducer in video, but not written here. What is done is, we make multiple files of conbineReducers, which has similar relating reducers. Then we create a Parent combineReducer to combine them all. This helps in debugging. //reducer.js import { combineReducers } from \"redux\"; import reducerA from \"./A\"; // Made using slices import reducerB from \"./B\"; // here we have many reducers import reducerC from \"./C\"; export default combineReducers({ A: reducerA, B: reducerB, C: reducerC }) //configureStore.js import reducer from \"reducer\";","title":"Combine Reducers"},{"location":"Certifications-and-Learning/languages/redux/#normalization","text":"https://codewithmosh.com/courses/783424/lectures/14780675 git link - paularmstrong / normalizr","title":"Normalization"},{"location":"Certifications-and-Learning/languages/redux/#selectors-and-memoizing-selectors","text":"https://codewithmosh.com/courses/783424/lectures/14780679 yarn add reselect //bugs.js import { createSelector } from \"reselect\"; createSelector ( state => state.entities.bugs, state => state.entities.projects, // Include all reducers here (bugs, projects) => bugs.filter(bug => !bug.resolved) )","title":"Selectors and Memoizing Selectors"},{"location":"Certifications-and-Learning/languages/redux/#middleware","text":"Use? * Calling APIs * Error Reporting * Analytics * Autherization https://codewithmosh.com/courses/783424/lectures/14780721","title":"Middleware"},{"location":"Certifications-and-Learning/languages/redux/#basic-use","text":"Image we making a logger //middleware/logger.js const logger = store => next => action => { // Using currying here. Remember as SNA console.log(\"store\", store); console.log(\"next\", next); console.log(\"action\", action); next(action); }; export default logger; //configureStore.js import logger from \"./middleware/logger\" export default function() { return configureStore({ reducer, middleware: [logger] // Any number of middlewares }) } // We we do not use redux toolkit, then // index.js import { createStore, applyMiddleware } from \"redux\"; import reducer from \"./store/reducer\"; const store = createStore(reducer, applyMiddleware(logger)); //applyMiddleware is called Store Enhancer","title":"Basic use"},{"location":"Certifications-and-Learning/languages/redux/#parameterizing-middleare","text":"https://codewithmosh.com/courses/783424/lectures/14780719 //middleware/logger.js const logger = param => store => next => action => { // Notice param added console.log(\"Logging\", param); // notice param next(action); }; export default logger; // configureStore.js export default function() { return configureStore({ reducer, middleware: [logger(\"console\")] // A change here, now we can give in arguments }) }","title":"Parameterizing Middleare"},{"location":"Certifications-and-Learning/languages/redux/#redux-thunk","text":"https://codewithmosh.com/courses/783424/lectures/14780722 Something to do with dispatching functions, to handle async, api calls etc. Not sure, and dont have energy to understand it. See it later.","title":"REDUX THUNK"},{"location":"Certifications-and-Learning/languages/sql/","text":"Contents SQL Sections Data Types Column Attributes SQL Missed Out https://www.youtube.com/watch?v=AK7_m-aThfw Window Functions RANK, DENSE_RANK, ROW_NUMBER, LEAD, LAG, CUM_DIST, NTILE, NTH_VALUE, PERCENT_RANK, FIRST_VALUE, LAST_VALUE Using aggregate functions as window functions. Using --> over() SELECT SUM(colName) over() AS col_aggregate FROM table; Synonym vs Views vs Materialised Views?? MERGE statement Difference between function and procedure Pragma Autonomous Transactions Sections Query Joins Insert Update Delete Summarizing Data Complex Queries Essential Functions Views Stored Procedures Triggers and Events Transactions and Concurrency Data-Types Designing-Database Indexing-for-High-Performance Securing Databases Keywords Check it out, not sure what they do NEW OLD Data Types INT() CHAR() VARCHAR() DATE Column Attributes PK - Primary Key NN - Not Null. Can not be empty UQ - Unique Key, confirm, not sure BIN UN ZF AI - Auto Increment. Like PK can be AI as well. G Default/ Expression - If no value given, then what is to be filled. Like NULL.","title":"Contents"},{"location":"Certifications-and-Learning/languages/sql/#contents","text":"SQL Sections Data Types Column Attributes","title":"Contents"},{"location":"Certifications-and-Learning/languages/sql/#sql","text":"","title":"SQL"},{"location":"Certifications-and-Learning/languages/sql/#missed-out","text":"https://www.youtube.com/watch?v=AK7_m-aThfw Window Functions RANK, DENSE_RANK, ROW_NUMBER, LEAD, LAG, CUM_DIST, NTILE, NTH_VALUE, PERCENT_RANK, FIRST_VALUE, LAST_VALUE Using aggregate functions as window functions. Using --> over() SELECT SUM(colName) over() AS col_aggregate FROM table; Synonym vs Views vs Materialised Views?? MERGE statement Difference between function and procedure Pragma Autonomous Transactions","title":"Missed Out"},{"location":"Certifications-and-Learning/languages/sql/#sections","text":"Query Joins Insert Update Delete Summarizing Data Complex Queries Essential Functions Views Stored Procedures Triggers and Events Transactions and Concurrency Data-Types Designing-Database Indexing-for-High-Performance Securing Databases","title":"Sections"},{"location":"Certifications-and-Learning/languages/sql/#keywords","text":"Check it out, not sure what they do NEW OLD","title":"Keywords"},{"location":"Certifications-and-Learning/languages/sql/#data-types","text":"INT() CHAR() VARCHAR() DATE","title":"Data Types"},{"location":"Certifications-and-Learning/languages/sql/#column-attributes","text":"PK - Primary Key NN - Not Null. Can not be empty UQ - Unique Key, confirm, not sure BIN UN ZF AI - Auto Increment. Like PK can be AI as well. G Default/ Expression - If no value given, then what is to be filled. Like NULL.","title":"Column Attributes"},{"location":"Certifications-and-Learning/languages/sql/Complex-Queries/","text":"Contents Complex Queries ALL ANY and SOME Correlated Sub Queries EXISTS Sub Query in SELECT Sub Query in FROM Complex Queries All sections in --> https://codewithmosh.com/courses/525068/lectures/9590240 This part of the tutorial is just to see how very complex queries are written. So not making notes of everything here, only bits that I did not know. Use Joins or Sub Queries. Depend case by case, for better readability. Sub queries in SELECT clause Sub queries in FROM clause Using DISTINCT keyword to select uniques Combo of above and --> IN, ALL, ANY, EXISTS ALL ANY and SOME https://codewithmosh.com/courses/525068/lectures/9590248 SELECT * FROM table WHERE col >= ALL (100,120,90,300) -- return cols with values above all values given in () Hence instead of (100,120...) we can have a subquery as well. https://codewithmosh.com/courses/525068/lectures/9590246 \"= ANY () \" <-- Equivalent to \"IN ()\" SOME Correlated Sub Queries https://codewithmosh.com/courses/525068/lectures/9590242 When same table is used in outer and sub query. Example: SELECT * FROM table1 t1 -- Using table1 as t1 WHERE col > ( SELECT SVG(col) FROM table1 WHERE col2 = t1.col2 -- Note here we using outer table t1's col2 to compare with inner table1's col2 ) EXISTS https://codewithmosh.com/courses/525068/lectures/9590236 Used in a correlated sub query, where outer and inner query share same table. SELECT * FROM table1 t1 WHERE EXISTS (some sub query ...) -- better than below case WHERE col IN (some sub query ...) -- not performant in large table Sub Query in SELECT https://codewithmosh.com/courses/525068/lectures/9590238 SELECT col1, col2, (SELECT AVG(col3) FROM table) AS col_average, col3 - (SELECT col_average) AS difference -- NOTE: we can not use ALIAS defined above here, hence another sub query is used FROM table Sub Query in FROM https://codewithmosh.com/courses/525068/lectures/9590239 We use the above example as subquery and then apply WHERE clause SELECT * FROM ( SELECT col1, col2, (SELECT AVG(col3) FROM table) AS col_average, col3 - (SELECT col_average) AS difference FROM table) AS summaryTable WHERE col3 IS NOT NULL What we did above can be achieved using VIEWS, see that section in the index.","title":"Contents"},{"location":"Certifications-and-Learning/languages/sql/Complex-Queries/#contents","text":"Complex Queries ALL ANY and SOME Correlated Sub Queries EXISTS Sub Query in SELECT Sub Query in FROM","title":"Contents"},{"location":"Certifications-and-Learning/languages/sql/Complex-Queries/#complex-queries","text":"All sections in --> https://codewithmosh.com/courses/525068/lectures/9590240 This part of the tutorial is just to see how very complex queries are written. So not making notes of everything here, only bits that I did not know. Use Joins or Sub Queries. Depend case by case, for better readability. Sub queries in SELECT clause Sub queries in FROM clause Using DISTINCT keyword to select uniques Combo of above and --> IN, ALL, ANY, EXISTS","title":"Complex Queries"},{"location":"Certifications-and-Learning/languages/sql/Complex-Queries/#all-any-and-some","text":"https://codewithmosh.com/courses/525068/lectures/9590248 SELECT * FROM table WHERE col >= ALL (100,120,90,300) -- return cols with values above all values given in () Hence instead of (100,120...) we can have a subquery as well. https://codewithmosh.com/courses/525068/lectures/9590246 \"= ANY () \" <-- Equivalent to \"IN ()\" SOME","title":"ALL ANY and SOME"},{"location":"Certifications-and-Learning/languages/sql/Complex-Queries/#correlated-sub-queries","text":"https://codewithmosh.com/courses/525068/lectures/9590242 When same table is used in outer and sub query. Example: SELECT * FROM table1 t1 -- Using table1 as t1 WHERE col > ( SELECT SVG(col) FROM table1 WHERE col2 = t1.col2 -- Note here we using outer table t1's col2 to compare with inner table1's col2 )","title":"Correlated Sub Queries"},{"location":"Certifications-and-Learning/languages/sql/Complex-Queries/#exists","text":"https://codewithmosh.com/courses/525068/lectures/9590236 Used in a correlated sub query, where outer and inner query share same table. SELECT * FROM table1 t1 WHERE EXISTS (some sub query ...) -- better than below case WHERE col IN (some sub query ...) -- not performant in large table","title":"EXISTS"},{"location":"Certifications-and-Learning/languages/sql/Complex-Queries/#sub-query-in-select","text":"https://codewithmosh.com/courses/525068/lectures/9590238 SELECT col1, col2, (SELECT AVG(col3) FROM table) AS col_average, col3 - (SELECT col_average) AS difference -- NOTE: we can not use ALIAS defined above here, hence another sub query is used FROM table","title":"Sub Query in SELECT"},{"location":"Certifications-and-Learning/languages/sql/Complex-Queries/#sub-query-in-from","text":"https://codewithmosh.com/courses/525068/lectures/9590239 We use the above example as subquery and then apply WHERE clause SELECT * FROM ( SELECT col1, col2, (SELECT AVG(col3) FROM table) AS col_average, col3 - (SELECT col_average) AS difference FROM table) AS summaryTable WHERE col3 IS NOT NULL What we did above can be achieved using VIEWS, see that section in the index.","title":"Sub Query in FROM"},{"location":"Certifications-and-Learning/languages/sql/Essential-Functions/","text":"Contents Essential Functions Numeric STRING Date and Time Usual Formatting Calculations on Data time IFNULL and COALESCE IF and CASE Essential Functions https://www.w3schools.com/sql/sql_ref_sqlserver.asp https://dev.mysql.com/doc/refman/8.0/en/numeric-functions.html Numeric ROUND(5.5523, 3) -- Round to 3 digits TRUNCATE(5.5523, 3) -- Just remove 3 digits CEILING(5.5523) -- Just remove 3 digits FLOOR(5.5523) -- Just remove 3 digits ABS(5.5523) -- Just remove 3 digits RAND() -- random btw 0 and 1 STRING LENGTH UPPER LOWER LTRIM RTRIM TRIM LEFT RIGHT SUBSTRING(\"mANASVASDASD\",2,5) -- Start from 2 and select 5 LOCATE('m','ASDJHASMASD') -- return index of 1st appearance of a substring. Not case sensitive. REPLACE CONCAT Date and Time https://codewithmosh.com/courses/525068/lectures/9590261 Usual NOW CURDATE CURTIME YEAR(NOW()), MONTH DAY HOUR MINUTE SECOND DAYNAME MONTHNAME EXTRACT(DAY FROM NOW()) Formatting DATE_FORMAT(NOW(),'%m %d %Y') -- Google it for full list Calculations on Data time https://codewithmosh.com/courses/525068/lectures/9590267 DATE_ADD(NOW(), INTERVAL 1 DAY) DATE_ADD(NOW(), INTERVAL 1 YEAR) DATE_ADD(NOW(), INTERVAL -1 YEAR) DATE_SUB(NOW(), INTERVAL 1 YEAR) DATE_SUB(NOW(), INTERVAL -1 YEAR) DATEDIFF('2019-01-05','2019-01-01') -- Gives 4, returns days always, even if you give time. TIME_TO_SEC('9:00') - TIME_TO_SEC('9:02') -- Gives -120 seconds IFNULL and COALESCE https://codewithmosh.com/courses/525068/lectures/9590263 USE database SELECT col1, IFNULL(col2, 'Custom Message') AS something -- COALESCE(col2, col3, col4, 'Custom Message') AS something FROM table Note IFNULL replace null with one message COALESCE will 1st check col2 for null, then col3 for null ... and if all null, then give the custom message In case, between various col2, col3 we find value, we fill that in the something col. IF and CASE https://codewithmosh.com/courses/525068/lectures/9590265 IF(expression, ifTrue, ifFalse) https://codewithmosh.com/courses/525068/lectures/9590268 SELECT * CASE WHEN YEAR(date_col) = YEAR(NOW()) THEN 'Active' WHEN YEAR(date_col) = YEAR(NOW()) - 1 THEN 'Last Year' WHEN YEAR(date_col) < YEAR(NOW()) - 1 THEN 'Archive' ELSE 'Future' END AS Category FROM table","title":"Contents"},{"location":"Certifications-and-Learning/languages/sql/Essential-Functions/#contents","text":"Essential Functions Numeric STRING Date and Time Usual Formatting Calculations on Data time IFNULL and COALESCE IF and CASE","title":"Contents"},{"location":"Certifications-and-Learning/languages/sql/Essential-Functions/#essential-functions","text":"https://www.w3schools.com/sql/sql_ref_sqlserver.asp https://dev.mysql.com/doc/refman/8.0/en/numeric-functions.html","title":"Essential Functions"},{"location":"Certifications-and-Learning/languages/sql/Essential-Functions/#numeric","text":"ROUND(5.5523, 3) -- Round to 3 digits TRUNCATE(5.5523, 3) -- Just remove 3 digits CEILING(5.5523) -- Just remove 3 digits FLOOR(5.5523) -- Just remove 3 digits ABS(5.5523) -- Just remove 3 digits RAND() -- random btw 0 and 1","title":"Numeric"},{"location":"Certifications-and-Learning/languages/sql/Essential-Functions/#string","text":"LENGTH UPPER LOWER LTRIM RTRIM TRIM LEFT RIGHT SUBSTRING(\"mANASVASDASD\",2,5) -- Start from 2 and select 5 LOCATE('m','ASDJHASMASD') -- return index of 1st appearance of a substring. Not case sensitive. REPLACE CONCAT","title":"STRING"},{"location":"Certifications-and-Learning/languages/sql/Essential-Functions/#date-and-time","text":"https://codewithmosh.com/courses/525068/lectures/9590261","title":"Date and Time"},{"location":"Certifications-and-Learning/languages/sql/Essential-Functions/#usual","text":"NOW CURDATE CURTIME YEAR(NOW()), MONTH DAY HOUR MINUTE SECOND DAYNAME MONTHNAME EXTRACT(DAY FROM NOW())","title":"Usual"},{"location":"Certifications-and-Learning/languages/sql/Essential-Functions/#formatting","text":"DATE_FORMAT(NOW(),'%m %d %Y') -- Google it for full list","title":"Formatting"},{"location":"Certifications-and-Learning/languages/sql/Essential-Functions/#calculations-on-data-time","text":"https://codewithmosh.com/courses/525068/lectures/9590267 DATE_ADD(NOW(), INTERVAL 1 DAY) DATE_ADD(NOW(), INTERVAL 1 YEAR) DATE_ADD(NOW(), INTERVAL -1 YEAR) DATE_SUB(NOW(), INTERVAL 1 YEAR) DATE_SUB(NOW(), INTERVAL -1 YEAR) DATEDIFF('2019-01-05','2019-01-01') -- Gives 4, returns days always, even if you give time. TIME_TO_SEC('9:00') - TIME_TO_SEC('9:02') -- Gives -120 seconds","title":"Calculations on Data time"},{"location":"Certifications-and-Learning/languages/sql/Essential-Functions/#ifnull-and-coalesce","text":"https://codewithmosh.com/courses/525068/lectures/9590263 USE database SELECT col1, IFNULL(col2, 'Custom Message') AS something -- COALESCE(col2, col3, col4, 'Custom Message') AS something FROM table Note IFNULL replace null with one message COALESCE will 1st check col2 for null, then col3 for null ... and if all null, then give the custom message In case, between various col2, col3 we find value, we fill that in the something col.","title":"IFNULL and COALESCE"},{"location":"Certifications-and-Learning/languages/sql/Essential-Functions/#if-and-case","text":"https://codewithmosh.com/courses/525068/lectures/9590265 IF(expression, ifTrue, ifFalse) https://codewithmosh.com/courses/525068/lectures/9590268 SELECT * CASE WHEN YEAR(date_col) = YEAR(NOW()) THEN 'Active' WHEN YEAR(date_col) = YEAR(NOW()) - 1 THEN 'Last Year' WHEN YEAR(date_col) < YEAR(NOW()) - 1 THEN 'Archive' ELSE 'Future' END AS Category FROM table","title":"IF and CASE"},{"location":"Certifications-and-Learning/languages/sql/Insert-Update-Delete/","text":"Contents Insert Update and Delete Inserting Row/ Rows Inserting into Multiple Tables Creating a Copy of a Table Updating Table Deleting Rows Restoring Database to original state Insert Update and Delete https://codewithmosh.com/courses/525068/lectures/9590180 Inserting Row/ Rows -- Method 1 INSERT INTO table -- No col define, so follow table col sequence below VALUES (DEFAULT, 'A','B', NULL, .....) -- A row of all values. Default in case of AI (Auto Increment) is on. -- Method 2 INSERT INTO table (col2, col1,col5,col6) -- Define cols in any order VALUES ('a','b', 1, .....), -- Supply in above order. ('aa','bb, 3, .....), ('ca','bb, 3, .....), ('ia','bt, 6, .....) Insert any number of values as needed, shown above. Inserting into Multiple Tables https://codewithmosh.com/courses/525068/lectures/9590188 SELECT LAST_INSERT_ID() -- SQL generates this whenever a row is added. INSERT INTO table (col1,col2 ...) VALUES (1,'something'...); INSERT INTO table2 VALUES (LAST_INSERT_ID(), 1, 1, ....) (LAST_INSERT_ID(), 2, 5, ....) (LAST_INSERT_ID(), 3, 4, ....) Creating a Copy of a Table https://codewithmosh.com/courses/525068/lectures/9590187 Concept of Sub Query - Everything in () is executed 1st by SQL -- Create a copy of table CREATE TABLE table_archived AS SELECT * FROM table -- A sub Query -- Insert only specific item based on condition from one table to another INSERT INTO table_archived -- Assume we truncate (delete) data in the table_archive before running this SELECT * FROM table WHERE col1 > 'someValue' Updating Table https://codewithmosh.com/courses/525068/lectures/9590185 UPDATE table SET col1 = 10, col2 = 'something' WHERE someCol = 3 -- Could be any column. 3 is value in someCol. --WHERE someCol in (3,4,5) -- Multiple record update, where 3,4,5 are values in someCol https://codewithmosh.com/courses/525068/lectures/9590186 There could be cases where you do not have an ID in one table, and need to get it from another table. So we take sub queries. WHERE someCol IN -- Say we dont have some col in this table. (SELECT someCol FROM table2 WHERE col3 IN ('a','b')) Above - SQL will first run the code in () Give the result to someCol in WHERE Then UPDATE using SET Deleting Rows https://codewithmosh.com/courses/525068/lectures/9590181 DELETE FROM table WHERE col = 'something' Restoring Database to original state https://codewithmosh.com/courses/525068/lectures/9590184","title":"Contents"},{"location":"Certifications-and-Learning/languages/sql/Insert-Update-Delete/#contents","text":"Insert Update and Delete Inserting Row/ Rows Inserting into Multiple Tables Creating a Copy of a Table Updating Table Deleting Rows Restoring Database to original state","title":"Contents"},{"location":"Certifications-and-Learning/languages/sql/Insert-Update-Delete/#insert-update-and-delete","text":"https://codewithmosh.com/courses/525068/lectures/9590180","title":"Insert Update and Delete"},{"location":"Certifications-and-Learning/languages/sql/Insert-Update-Delete/#inserting-row-rows","text":"-- Method 1 INSERT INTO table -- No col define, so follow table col sequence below VALUES (DEFAULT, 'A','B', NULL, .....) -- A row of all values. Default in case of AI (Auto Increment) is on. -- Method 2 INSERT INTO table (col2, col1,col5,col6) -- Define cols in any order VALUES ('a','b', 1, .....), -- Supply in above order. ('aa','bb, 3, .....), ('ca','bb, 3, .....), ('ia','bt, 6, .....) Insert any number of values as needed, shown above.","title":"Inserting Row/ Rows"},{"location":"Certifications-and-Learning/languages/sql/Insert-Update-Delete/#inserting-into-multiple-tables","text":"https://codewithmosh.com/courses/525068/lectures/9590188 SELECT LAST_INSERT_ID() -- SQL generates this whenever a row is added. INSERT INTO table (col1,col2 ...) VALUES (1,'something'...); INSERT INTO table2 VALUES (LAST_INSERT_ID(), 1, 1, ....) (LAST_INSERT_ID(), 2, 5, ....) (LAST_INSERT_ID(), 3, 4, ....)","title":"Inserting into Multiple Tables"},{"location":"Certifications-and-Learning/languages/sql/Insert-Update-Delete/#creating-a-copy-of-a-table","text":"https://codewithmosh.com/courses/525068/lectures/9590187 Concept of Sub Query - Everything in () is executed 1st by SQL -- Create a copy of table CREATE TABLE table_archived AS SELECT * FROM table -- A sub Query -- Insert only specific item based on condition from one table to another INSERT INTO table_archived -- Assume we truncate (delete) data in the table_archive before running this SELECT * FROM table WHERE col1 > 'someValue'","title":"Creating a Copy of a Table"},{"location":"Certifications-and-Learning/languages/sql/Insert-Update-Delete/#updating-table","text":"https://codewithmosh.com/courses/525068/lectures/9590185 UPDATE table SET col1 = 10, col2 = 'something' WHERE someCol = 3 -- Could be any column. 3 is value in someCol. --WHERE someCol in (3,4,5) -- Multiple record update, where 3,4,5 are values in someCol https://codewithmosh.com/courses/525068/lectures/9590186 There could be cases where you do not have an ID in one table, and need to get it from another table. So we take sub queries. WHERE someCol IN -- Say we dont have some col in this table. (SELECT someCol FROM table2 WHERE col3 IN ('a','b')) Above - SQL will first run the code in () Give the result to someCol in WHERE Then UPDATE using SET","title":"Updating Table"},{"location":"Certifications-and-Learning/languages/sql/Insert-Update-Delete/#deleting-rows","text":"https://codewithmosh.com/courses/525068/lectures/9590181 DELETE FROM table WHERE col = 'something'","title":"Deleting Rows"},{"location":"Certifications-and-Learning/languages/sql/Insert-Update-Delete/#restoring-database-to-original-state","text":"https://codewithmosh.com/courses/525068/lectures/9590184","title":"Restoring Database to original state"},{"location":"Certifications-and-Learning/languages/sql/Joins/","text":"Contents Joins Inner Joins Joining across databases Self Join Multiple table join Compound Join Implicit Join Outer Join USING clause Natural Join Cross Join Union Joins Inner Joins - Only returns matching items to condition Outer Joins - LEFT or RIGHT - returns all from left or right, and matching from other table Inner Joins SELECT * FROM table1 t1 -- using an alias, was not needed, but we can. Note, we did not use 'AS' JOIN table2 t2 ON t1.idKey = t2.idKey -- now here we use alias, else we would have needed table1 table2 etc Joining across databases USE myDataBase; SELECT * FROM table t -- or use myDataBase.table, not sure NEED TO CHECK JOIN otherDatabaseName.tableName ot ON t.idKey = ot.idKey Self Join Imagine a table with people and their employee ID. Then it has a column \"REPORTS TO\" which also contains the eomployee ID. Here self join can be useful. We imagine a single table as two tables here, giving it two aliases, then perform the operation. In theory we can have many aliases hence a single tables imagined as many times as needed. SELECT e.employeeID -- NOTE: Even though we defined alias below, it can be used above e.firstName m.firstName AS manger -- The table output will have the column header name changed to manager FROM table e JOIN table m ON e.employeeID = m.reportsTo Multiple table join Here add multiple JOIN conditions like SELECT * FROM t1 JOIN t2 ON t1.a = t2.a JOIN t3 ON t1.b = t3.b ... as many times as needed Compound Join https://codewithmosh.com/courses/525068/lectures/9590161 There are cases when there are uniquely identifying columns. BUT combination or two columns can have a resulting unique value. Here we use compound join SELECT * FROM table1 t1 JOIN table2 t2 ON t1.col1 = t2.col1 AND t1.col2 = t2.col2 -- USING (col1, col2) <-- Use this instead of ON AND So in above, col1 and col2 combo is used Implicit Join https://codewithmosh.com/courses/525068/lectures/9590158 Similar to Joining using ON, but here we use WHERE instead of ON. Not recommended because if we forget to write WHERE, join becomes a CROSS JOIN, which leads to a very big table. SELECT * FROM table1 t1, table2 t2 WHERE t1.col1 = t2.col1 Outer Join USE aDataBaseOfInterest; SELECT t1.col1, t2.col2, t3.col3 as AliasName <-- What to be shown in result table FROM table1 t1 <-- Base table LEFT JOIN table2 t2 <-- 1st table to join ON t1.col1 = t2.col1 <-- Condition of t1 t2 LEFT JOIN table3 t3 <-- 2nd table to join ON t2.col2 - t3.col2 <-- Condition of t2 t3 ORDER BY t1.col1 <-- Order final result Add as many tables as needed from as many databases as needed. Even self join can be done. Above gives all values from t1 and only the matching from t2. If we use RIGHT JOIN, we get all from t2 and matching from t1 It is suggested to always use LEFT JOIN, mixing right left can make it difficult to visualise. USING clause https://codewithmosh.com/courses/525068/lectures/9590162 Note that using ON and then conditions gets very verbose. Hence we use USING SELECT * FROM table1 t1 JOIN table2 t2 -- ON t1.idKey = t2.idKey USING (idKey) <-- NOTE - idKey is column common in both tables. For compound/ composite join, refer the above section. Basically USING(col1, col2) instead of using ON AND Natural Join NOT RECOMMENDED. This automatically looks out for common column names and join them. As you can see, we might have unexpected results in case column names are not defined properly. SELECT * FROM table1 t1 NATURAL JOIN table2 t2 Cross Join https://codewithmosh.com/courses/525068/lectures/9590160 Image a clothing table (can images two or more tables too) A column with 3 colors Another column with 3 sizes Now we want all combinations of color wrt sizes. Here we use cross join. I think it as Multi Key join in a way. -- Method 1 - Explicit Syntax SELECT t1.color, t2.size -- If in one table, t1.color t2.size. At cross join command we set table1 as t2 FROM table1 t1 CROSS JOIN table2 t2 -- If one table, table1 t2 -- Method 2 - Implicit Syntax SELECT t1.color, t2.size FROM table1 t1, table2 t2 Union https://codewithmosh.com/courses/525068/lectures/9590156 SELECT .. FROM .. UNION SELECT .. FROM ..","title":"Contents"},{"location":"Certifications-and-Learning/languages/sql/Joins/#contents","text":"Joins Inner Joins Joining across databases Self Join Multiple table join Compound Join Implicit Join Outer Join USING clause Natural Join Cross Join Union","title":"Contents"},{"location":"Certifications-and-Learning/languages/sql/Joins/#joins","text":"Inner Joins - Only returns matching items to condition Outer Joins - LEFT or RIGHT - returns all from left or right, and matching from other table","title":"Joins"},{"location":"Certifications-and-Learning/languages/sql/Joins/#inner-joins","text":"SELECT * FROM table1 t1 -- using an alias, was not needed, but we can. Note, we did not use 'AS' JOIN table2 t2 ON t1.idKey = t2.idKey -- now here we use alias, else we would have needed table1 table2 etc","title":"Inner Joins"},{"location":"Certifications-and-Learning/languages/sql/Joins/#joining-across-databases","text":"USE myDataBase; SELECT * FROM table t -- or use myDataBase.table, not sure NEED TO CHECK JOIN otherDatabaseName.tableName ot ON t.idKey = ot.idKey","title":"Joining across databases"},{"location":"Certifications-and-Learning/languages/sql/Joins/#self-join","text":"Imagine a table with people and their employee ID. Then it has a column \"REPORTS TO\" which also contains the eomployee ID. Here self join can be useful. We imagine a single table as two tables here, giving it two aliases, then perform the operation. In theory we can have many aliases hence a single tables imagined as many times as needed. SELECT e.employeeID -- NOTE: Even though we defined alias below, it can be used above e.firstName m.firstName AS manger -- The table output will have the column header name changed to manager FROM table e JOIN table m ON e.employeeID = m.reportsTo","title":"Self Join"},{"location":"Certifications-and-Learning/languages/sql/Joins/#multiple-table-join","text":"Here add multiple JOIN conditions like SELECT * FROM t1 JOIN t2 ON t1.a = t2.a JOIN t3 ON t1.b = t3.b ... as many times as needed","title":"Multiple table join"},{"location":"Certifications-and-Learning/languages/sql/Joins/#compound-join","text":"https://codewithmosh.com/courses/525068/lectures/9590161 There are cases when there are uniquely identifying columns. BUT combination or two columns can have a resulting unique value. Here we use compound join SELECT * FROM table1 t1 JOIN table2 t2 ON t1.col1 = t2.col1 AND t1.col2 = t2.col2 -- USING (col1, col2) <-- Use this instead of ON AND So in above, col1 and col2 combo is used","title":"Compound Join"},{"location":"Certifications-and-Learning/languages/sql/Joins/#implicit-join","text":"https://codewithmosh.com/courses/525068/lectures/9590158 Similar to Joining using ON, but here we use WHERE instead of ON. Not recommended because if we forget to write WHERE, join becomes a CROSS JOIN, which leads to a very big table. SELECT * FROM table1 t1, table2 t2 WHERE t1.col1 = t2.col1","title":"Implicit Join"},{"location":"Certifications-and-Learning/languages/sql/Joins/#outer-join","text":"USE aDataBaseOfInterest; SELECT t1.col1, t2.col2, t3.col3 as AliasName <-- What to be shown in result table FROM table1 t1 <-- Base table LEFT JOIN table2 t2 <-- 1st table to join ON t1.col1 = t2.col1 <-- Condition of t1 t2 LEFT JOIN table3 t3 <-- 2nd table to join ON t2.col2 - t3.col2 <-- Condition of t2 t3 ORDER BY t1.col1 <-- Order final result Add as many tables as needed from as many databases as needed. Even self join can be done. Above gives all values from t1 and only the matching from t2. If we use RIGHT JOIN, we get all from t2 and matching from t1 It is suggested to always use LEFT JOIN, mixing right left can make it difficult to visualise.","title":"Outer Join"},{"location":"Certifications-and-Learning/languages/sql/Joins/#using-clause","text":"https://codewithmosh.com/courses/525068/lectures/9590162 Note that using ON and then conditions gets very verbose. Hence we use USING SELECT * FROM table1 t1 JOIN table2 t2 -- ON t1.idKey = t2.idKey USING (idKey) <-- NOTE - idKey is column common in both tables. For compound/ composite join, refer the above section. Basically USING(col1, col2) instead of using ON AND","title":"USING clause"},{"location":"Certifications-and-Learning/languages/sql/Joins/#natural-join","text":"NOT RECOMMENDED. This automatically looks out for common column names and join them. As you can see, we might have unexpected results in case column names are not defined properly. SELECT * FROM table1 t1 NATURAL JOIN table2 t2","title":"Natural Join"},{"location":"Certifications-and-Learning/languages/sql/Joins/#cross-join","text":"https://codewithmosh.com/courses/525068/lectures/9590160 Image a clothing table (can images two or more tables too) A column with 3 colors Another column with 3 sizes Now we want all combinations of color wrt sizes. Here we use cross join. I think it as Multi Key join in a way. -- Method 1 - Explicit Syntax SELECT t1.color, t2.size -- If in one table, t1.color t2.size. At cross join command we set table1 as t2 FROM table1 t1 CROSS JOIN table2 t2 -- If one table, table1 t2 -- Method 2 - Implicit Syntax SELECT t1.color, t2.size FROM table1 t1, table2 t2","title":"Cross Join"},{"location":"Certifications-and-Learning/languages/sql/Joins/#union","text":"https://codewithmosh.com/courses/525068/lectures/9590156 SELECT .. FROM .. UNION SELECT .. FROM ..","title":"Union"},{"location":"Certifications-and-Learning/languages/sql/Query/","text":"Contents Query Basic Statement Nitty Gritty SELECT WHERE with AND OR NOT IN BETWEEN LIKE REGEXP IS NULL ORDER BY LIMIT Query Basic Statement The order in which these are written matters! USE database; SELECT col1, col2 AS anything, 'comment' as colName, 'onlyComment', col3*45, col4+6 as AddedSix -- SELECT * FROM someTable -- FROM otherDatabase.someTable -- If importing from another database WHERE col1 = 1 -- rows where col1 = 1 ORDER BY col2 LIMIT 4, 2 -- Skip 4 records and give 2 remaining -- This is a comment in SQL Usage of below in sub queries -- meaning everything in between () DISTINCT IN Nitty Gritty SELECT SELECT col1, col2, col2*55 AS col3 FROM table WHERE with AND OR NOT SELECT * FROM table WHERE col > 2 OR col < 5 IN Use IN instead of = whenever we tackle with multiple data points. Instead of using many OR, we can give a set of values to look in a col SELECT * FROM table WHERE col IN ('a','b','c') -- NOT IN can also be used for exclusion BETWEEN Instead of using col>5 AND col<10 we can use BETWEEN SELECT * FROM table WHERE col BETWEEN 5 AND 10 Can be applied for dates as well. LIKE WHERE strCol LIKE 'brush%' OR '%brush' -- like * in bash '_y' <-- Exact match example we have Hello 'H____o' will return Hello 'H%o' will also return Hello NOT LIKE can also be used REGEXP Advance version of LIKE. Instead of a lot of OR statements, we can use regex. Also in bash or python WHERE strCol REGEXP 'something' -- Like %something% WHERE strCol REGEXP '^some' -- Starts with WHERE strCol REGEXP 'thing$' -- Ends With WHERE strCol REGEXP 'oneThing|otherThing' -- Or statement WHERE strCol REGEXP '^something|oneThing|otherThing' -- Combination WHERE strCol REGEXP '[some]thing' -- Specific thing before thing WHERE strCol REGEXP '[a-z]thing' -- from a-z anything before thing IS NULL To find null. WHERE col IS NULL WHERE col IS NOT NULL ORDER BY https://codewithmosh.com/courses/525068/lectures/9590109 SELECT * FROM table ORDER BY anyCol DESC, otherCol -- default is Accending SELECT * FROM table ORDER BY 1, 2 DESC, 3 -- Sorting using column numbers SELECT col1, col2, 23 AS points -- Note we made an alias to 23, naming it points FROM table ORDER BY points, colName -- Notice we can use alias here LIMIT Limit returned number SELECT * FROM table LIMIT 20 -- gives 20 rows only LIMIT 6, 3 -- This means skip first 6 records and then give 3 after them","title":"Contents"},{"location":"Certifications-and-Learning/languages/sql/Query/#contents","text":"Query Basic Statement Nitty Gritty SELECT WHERE with AND OR NOT IN BETWEEN LIKE REGEXP IS NULL ORDER BY LIMIT","title":"Contents"},{"location":"Certifications-and-Learning/languages/sql/Query/#query","text":"","title":"Query"},{"location":"Certifications-and-Learning/languages/sql/Query/#basic-statement","text":"The order in which these are written matters! USE database; SELECT col1, col2 AS anything, 'comment' as colName, 'onlyComment', col3*45, col4+6 as AddedSix -- SELECT * FROM someTable -- FROM otherDatabase.someTable -- If importing from another database WHERE col1 = 1 -- rows where col1 = 1 ORDER BY col2 LIMIT 4, 2 -- Skip 4 records and give 2 remaining -- This is a comment in SQL Usage of below in sub queries -- meaning everything in between () DISTINCT IN","title":"Basic Statement"},{"location":"Certifications-and-Learning/languages/sql/Query/#nitty-gritty","text":"","title":"Nitty Gritty"},{"location":"Certifications-and-Learning/languages/sql/Query/#select","text":"SELECT col1, col2, col2*55 AS col3 FROM table","title":"SELECT"},{"location":"Certifications-and-Learning/languages/sql/Query/#where-with-and-or-not","text":"SELECT * FROM table WHERE col > 2 OR col < 5","title":"WHERE with AND OR NOT"},{"location":"Certifications-and-Learning/languages/sql/Query/#in","text":"Use IN instead of = whenever we tackle with multiple data points. Instead of using many OR, we can give a set of values to look in a col SELECT * FROM table WHERE col IN ('a','b','c') -- NOT IN can also be used for exclusion","title":"IN"},{"location":"Certifications-and-Learning/languages/sql/Query/#between","text":"Instead of using col>5 AND col<10 we can use BETWEEN SELECT * FROM table WHERE col BETWEEN 5 AND 10 Can be applied for dates as well.","title":"BETWEEN"},{"location":"Certifications-and-Learning/languages/sql/Query/#like","text":"WHERE strCol LIKE 'brush%' OR '%brush' -- like * in bash '_y' <-- Exact match example we have Hello 'H____o' will return Hello 'H%o' will also return Hello NOT LIKE can also be used","title":"LIKE"},{"location":"Certifications-and-Learning/languages/sql/Query/#regexp","text":"Advance version of LIKE. Instead of a lot of OR statements, we can use regex. Also in bash or python WHERE strCol REGEXP 'something' -- Like %something% WHERE strCol REGEXP '^some' -- Starts with WHERE strCol REGEXP 'thing$' -- Ends With WHERE strCol REGEXP 'oneThing|otherThing' -- Or statement WHERE strCol REGEXP '^something|oneThing|otherThing' -- Combination WHERE strCol REGEXP '[some]thing' -- Specific thing before thing WHERE strCol REGEXP '[a-z]thing' -- from a-z anything before thing","title":"REGEXP"},{"location":"Certifications-and-Learning/languages/sql/Query/#is-null","text":"To find null. WHERE col IS NULL WHERE col IS NOT NULL","title":"IS NULL"},{"location":"Certifications-and-Learning/languages/sql/Query/#order-by","text":"https://codewithmosh.com/courses/525068/lectures/9590109 SELECT * FROM table ORDER BY anyCol DESC, otherCol -- default is Accending SELECT * FROM table ORDER BY 1, 2 DESC, 3 -- Sorting using column numbers SELECT col1, col2, 23 AS points -- Note we made an alias to 23, naming it points FROM table ORDER BY points, colName -- Notice we can use alias here","title":"ORDER BY"},{"location":"Certifications-and-Learning/languages/sql/Query/#limit","text":"Limit returned number SELECT * FROM table LIMIT 20 -- gives 20 rows only LIMIT 6, 3 -- This means skip first 6 records and then give 3 after them","title":"LIMIT"},{"location":"Certifications-and-Learning/languages/sql/Securing-Databases/","text":"Contents Securing DB Creating Users Viewing Users Dropping Users Change Password Privileges View Privileges Revoking Privileges Securing DB Creating Users CREATE USER name -- simple name CREATE USER name@localhost -- If on local environment CREATE USER name@192.0.0.1 -- by IP address CREATE USER name@domain.com -- By domain, subdomains not allowed CREATE USER name@'%.domain.com' -- Allow subdomains CREATE USER name@'%.domain.com' IDENTIFIED BY 'password' -- Give password (NOT RECOMMENDED AT ALL) Viewing Users SELECT * FROM mysql.user; Dropping Users DROP USER name@localhost Change Password SET PASSWORD FOR name = '1234' -- change for specific person SET PASSWORD = '1234' -- change password for myself, whoever running the query Privileges https://codewithmosh.com/courses/525068/lectures/10108076 MYSQL REFERENCE -- https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html -- Read and Write to table only, no table creations -- Allow table creations too GRANT SELECT, INSERT, UPDATE, DELETE, EXECUTE ON databaseName.* -- All tables in databaseName -- ON databaseName.tableName -- Only specific table in databaseName -- ON *.* -- All database and All tables. No backticks, only for me to see in vimwiki. TO name@localhost Now check by creating new connection with a username View Privileges SHOW GRANTS FOR name; -- For specific user SHOW GRANTS; -- Logged in user Revoking Privileges Assume we give right to create and view GRANT CREATE VIEW ON *.* -- Back ticks, not there; gave so that I can see in vimwiki TO user We revoke by following. Note the FROM user in the end, instead of TO REVOKE CREATE VIEW ON *.* FROM user","title":"Contents"},{"location":"Certifications-and-Learning/languages/sql/Securing-Databases/#contents","text":"Securing DB Creating Users Viewing Users Dropping Users Change Password Privileges View Privileges Revoking Privileges","title":"Contents"},{"location":"Certifications-and-Learning/languages/sql/Securing-Databases/#securing-db","text":"","title":"Securing DB"},{"location":"Certifications-and-Learning/languages/sql/Securing-Databases/#creating-users","text":"CREATE USER name -- simple name CREATE USER name@localhost -- If on local environment CREATE USER name@192.0.0.1 -- by IP address CREATE USER name@domain.com -- By domain, subdomains not allowed CREATE USER name@'%.domain.com' -- Allow subdomains CREATE USER name@'%.domain.com' IDENTIFIED BY 'password' -- Give password (NOT RECOMMENDED AT ALL)","title":"Creating Users"},{"location":"Certifications-and-Learning/languages/sql/Securing-Databases/#viewing-users","text":"SELECT * FROM mysql.user;","title":"Viewing Users"},{"location":"Certifications-and-Learning/languages/sql/Securing-Databases/#dropping-users","text":"DROP USER name@localhost","title":"Dropping Users"},{"location":"Certifications-and-Learning/languages/sql/Securing-Databases/#change-password","text":"SET PASSWORD FOR name = '1234' -- change for specific person SET PASSWORD = '1234' -- change password for myself, whoever running the query","title":"Change Password"},{"location":"Certifications-and-Learning/languages/sql/Securing-Databases/#privileges","text":"https://codewithmosh.com/courses/525068/lectures/10108076 MYSQL REFERENCE -- https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html -- Read and Write to table only, no table creations -- Allow table creations too GRANT SELECT, INSERT, UPDATE, DELETE, EXECUTE ON databaseName.* -- All tables in databaseName -- ON databaseName.tableName -- Only specific table in databaseName -- ON *.* -- All database and All tables. No backticks, only for me to see in vimwiki. TO name@localhost Now check by creating new connection with a username","title":"Privileges"},{"location":"Certifications-and-Learning/languages/sql/Securing-Databases/#view-privileges","text":"SHOW GRANTS FOR name; -- For specific user SHOW GRANTS; -- Logged in user","title":"View Privileges"},{"location":"Certifications-and-Learning/languages/sql/Securing-Databases/#revoking-privileges","text":"Assume we give right to create and view GRANT CREATE VIEW ON *.* -- Back ticks, not there; gave so that I can see in vimwiki TO user We revoke by following. Note the FROM user in the end, instead of TO REVOKE CREATE VIEW ON *.* FROM user","title":"Revoking Privileges"},{"location":"Certifications-and-Learning/languages/sql/Stored-Procedures/","text":"Stored Procedures https://codewithmosh.com/courses/525068/lectures/9590329 When we save sql queries somewhere, then run them, its called stored procedures. Like we can write code in cli, but we save code in files as scripts, similar. Result: Store and Organise SQL Faster Execution Data Security These gets saved in the Stored Procedures section in MySQL Again, best practice is to save Stored Procedures in SQL files and put under GIT for source control. Format https://codewithmosh.com/courses/525068/lectures/9590330 https://codewithmosh.com/courses/525068/lectures/9590337 DROP PROCEDURE IF EXISTS proc_name -- Not compulsory. Ensure we delete proc if already exist. DELIMITER $$ -- \";\" is default. But our procedure will have ; in each line, so for MySQL to know that the whole thing ended, we choose custom delimiter, we can use anything. CREATE PROCEDURE proc_name -- Inputs are not mandetory ( input_a CHAR(2), input_b INT ) BEGIN ... all query here ... ; -- \";\" is needed here, even if one file. END$$ DELIMITER ; Calling a Procedure CALL proc_name(input1, input2 ...) ........INCOMPLETE............ Start from https://codewithmosh.com/courses/525068/lectures/9590334","title":"Stored Procedures"},{"location":"Certifications-and-Learning/languages/sql/Stored-Procedures/#stored-procedures","text":"https://codewithmosh.com/courses/525068/lectures/9590329 When we save sql queries somewhere, then run them, its called stored procedures. Like we can write code in cli, but we save code in files as scripts, similar. Result: Store and Organise SQL Faster Execution Data Security These gets saved in the Stored Procedures section in MySQL Again, best practice is to save Stored Procedures in SQL files and put under GIT for source control.","title":"Stored Procedures"},{"location":"Certifications-and-Learning/languages/sql/Stored-Procedures/#format","text":"https://codewithmosh.com/courses/525068/lectures/9590330 https://codewithmosh.com/courses/525068/lectures/9590337 DROP PROCEDURE IF EXISTS proc_name -- Not compulsory. Ensure we delete proc if already exist. DELIMITER $$ -- \";\" is default. But our procedure will have ; in each line, so for MySQL to know that the whole thing ended, we choose custom delimiter, we can use anything. CREATE PROCEDURE proc_name -- Inputs are not mandetory ( input_a CHAR(2), input_b INT ) BEGIN ... all query here ... ; -- \";\" is needed here, even if one file. END$$ DELIMITER ;","title":"Format"},{"location":"Certifications-and-Learning/languages/sql/Stored-Procedures/#calling-a-procedure","text":"CALL proc_name(input1, input2 ...) ........INCOMPLETE............ Start from https://codewithmosh.com/courses/525068/lectures/9590334","title":"Calling a Procedure"},{"location":"Certifications-and-Learning/languages/sql/Summarizing-Data/","text":"Contents Summarizing Data Aggregate Functions Group By Having ROLLUP - Not part of standard SQL languages Summarizing Data Aggregate Functions https://codewithmosh.com/courses/525068/lectures/9590223 Following gives out single value. MAX() MIN() AVG() SUM() COUNT() SELECT MAX(col1) as alias1, MIN(col2) as alias3, AVG(col3) as alias3, COUNT(col4) as alias4, -- Nulls ignored here COUNT(*) as alias5, -- * used. Null included. COUNT(DISTINCT col4) as alias6 -- Only unique are counted FROM table Group By https://codewithmosh.com/courses/525068/lectures/9590220 To group the aggregates by a col values, we use group by GROUP BY comes after WHERE and before ORDER BY. ORDER BY is always last. SELECT col, SUM(col2) AS total_col2 FROM table WHERE col3 >= 'something' GROUP BY col4 ORDER BY total_col2 DESC Having https://codewithmosh.com/courses/525068/lectures/9590222 Now once we have result from group by, we can not use WHERE to filter out entries. So we use HAVING, which is used after GROUP BY. To filter out GROUP BY output, we use HAVING. NOTE: Unlike WHERE, which can select any column, HAVING can select only those columns, which are provided in the SELECT statement. ROLLUP - Not part of standard SQL languages https://codewithmosh.com/courses/525068/lectures/9590221 This gives total of each element of group by as well. Only works on aggregate functions. Part of MySql and not standard SQL. Format --> GROUP BY anything, another WITH ROLLUP","title":"Contents"},{"location":"Certifications-and-Learning/languages/sql/Summarizing-Data/#contents","text":"Summarizing Data Aggregate Functions Group By Having ROLLUP - Not part of standard SQL languages","title":"Contents"},{"location":"Certifications-and-Learning/languages/sql/Summarizing-Data/#summarizing-data","text":"","title":"Summarizing Data"},{"location":"Certifications-and-Learning/languages/sql/Summarizing-Data/#aggregate-functions","text":"https://codewithmosh.com/courses/525068/lectures/9590223 Following gives out single value. MAX() MIN() AVG() SUM() COUNT() SELECT MAX(col1) as alias1, MIN(col2) as alias3, AVG(col3) as alias3, COUNT(col4) as alias4, -- Nulls ignored here COUNT(*) as alias5, -- * used. Null included. COUNT(DISTINCT col4) as alias6 -- Only unique are counted FROM table","title":"Aggregate Functions"},{"location":"Certifications-and-Learning/languages/sql/Summarizing-Data/#group-by","text":"https://codewithmosh.com/courses/525068/lectures/9590220 To group the aggregates by a col values, we use group by GROUP BY comes after WHERE and before ORDER BY. ORDER BY is always last. SELECT col, SUM(col2) AS total_col2 FROM table WHERE col3 >= 'something' GROUP BY col4 ORDER BY total_col2 DESC","title":"Group By"},{"location":"Certifications-and-Learning/languages/sql/Summarizing-Data/#having","text":"https://codewithmosh.com/courses/525068/lectures/9590222 Now once we have result from group by, we can not use WHERE to filter out entries. So we use HAVING, which is used after GROUP BY. To filter out GROUP BY output, we use HAVING. NOTE: Unlike WHERE, which can select any column, HAVING can select only those columns, which are provided in the SELECT statement.","title":"Having"},{"location":"Certifications-and-Learning/languages/sql/Summarizing-Data/#rollup-not-part-of-standard-sql-languages","text":"https://codewithmosh.com/courses/525068/lectures/9590221 This gives total of each element of group by as well. Only works on aggregate functions. Part of MySql and not standard SQL. Format --> GROUP BY anything, another WITH ROLLUP","title":"ROLLUP - Not part of standard SQL languages"},{"location":"Certifications-and-Learning/languages/sql/Transactions-and-Concurrency/","text":"Contents Transactions ACID properties of transaction Format Concurrency and Locking Transactions https://codewithmosh.com/courses/525068/lectures/9710684 Group of statements in SQL that represent single unit of work. Eg. Order table needs to be updated and inventory number reduced once someone makes a purchase. Updating order and removing from inventory. These two updates form a transaction. We can not have order table undated but inventory table failed update. ACID properties of transaction Atomicity - Every part gets executed in transaction or None. Consistency - Database will always be in consistent state. We will not have links and things missing. Isolation - Two transaction do not interfere. Working on same table, one transaction wait for other to complete. Durability - Once transaction completed and committed, the changed in db are permanent. Format USE databaseName START TRANSACTION; query 1; query 2; .... COMMIT; -- Can use ROLLBACK instead for debugging Concurrency and Locking When two users tr .........incomplete ......","title":"Contents"},{"location":"Certifications-and-Learning/languages/sql/Transactions-and-Concurrency/#contents","text":"Transactions ACID properties of transaction Format Concurrency and Locking","title":"Contents"},{"location":"Certifications-and-Learning/languages/sql/Transactions-and-Concurrency/#transactions","text":"https://codewithmosh.com/courses/525068/lectures/9710684 Group of statements in SQL that represent single unit of work. Eg. Order table needs to be updated and inventory number reduced once someone makes a purchase. Updating order and removing from inventory. These two updates form a transaction. We can not have order table undated but inventory table failed update.","title":"Transactions"},{"location":"Certifications-and-Learning/languages/sql/Transactions-and-Concurrency/#acid-properties-of-transaction","text":"Atomicity - Every part gets executed in transaction or None. Consistency - Database will always be in consistent state. We will not have links and things missing. Isolation - Two transaction do not interfere. Working on same table, one transaction wait for other to complete. Durability - Once transaction completed and committed, the changed in db are permanent.","title":"ACID properties of transaction"},{"location":"Certifications-and-Learning/languages/sql/Transactions-and-Concurrency/#format","text":"USE databaseName START TRANSACTION; query 1; query 2; .... COMMIT; -- Can use ROLLBACK instead for debugging","title":"Format"},{"location":"Certifications-and-Learning/languages/sql/Transactions-and-Concurrency/#concurrency-and-locking","text":"When two users tr .........incomplete ......","title":"Concurrency and Locking"},{"location":"Certifications-and-Learning/languages/sql/Triggers-and-Events/","text":"Contents Triggers and Events Triggers Format Viewing triggers in mysql Dropping Trigger Events Triggers and Events Triggers If a change is made in a table, we can trigger some change in other table. Useful for automation. Useful for auditing. - https://codewithmosh.com/courses/525068/lectures/9707199 Format https://codewithmosh.com/courses/525068/lectures/9707196 DELIMITER $$ CREATE TRIGGER tableName_after_typeOfAction -- typeOfAction is INSERT, UPDATE or DELETE AFTER INSERT ON table_name -- UPDATE or DELETE can be used too FOR EACH ROW BEGIN .....any query or stored procedure for ANOTHER TABLE!!! .... END DELIMITER ; NOTE: The BEGIN END block contains query which DOES NOT include the table based on which trigger was made since it will lead to infinte loop. Viewing triggers in mysql https://codewithmosh.com/courses/525068/lectures/9707200 SHOW TRIGGER SHOW TRIGGER LIKE 'any-search-term%' Dropping Trigger DROP TRIGGER IF EXISTS tableName_after_typeOfAction Events Like cron jobs, running certain things in scheduled manner. We can perform Database maintenance tasks Database backups Report Generation etc SHOW VARIABLES LIKE 'event%'; -- Check if event scheduler is on or off SET GLOBAL event_scheduler = OFF -- turn it on or off DELIMITER $$ CREATE EVENT yearly_delete_tableName_something_rows -- Use ALTER EVENT to change the event ON SCHEDULE -- AT '2019-05-01' EVERY 1 YEAR STARTS '2019-01-01' ENDS '2029-01-01' -- EVERY 2 MONTH DO BEGIN DELETE FROM table WHERE col < NOW() - INTERVAL 1 YEAR; END $$ DELIMITER ; SHOW EVENTS; SHOW EVENTS LIKE 'yearly%'; DROP EVENT IF EXIST eventName; ALTER EVENT eventName DISABLE; -- Later ENABLE... cool","title":"Contents"},{"location":"Certifications-and-Learning/languages/sql/Triggers-and-Events/#contents","text":"Triggers and Events Triggers Format Viewing triggers in mysql Dropping Trigger Events","title":"Contents"},{"location":"Certifications-and-Learning/languages/sql/Triggers-and-Events/#triggers-and-events","text":"","title":"Triggers and Events"},{"location":"Certifications-and-Learning/languages/sql/Triggers-and-Events/#triggers","text":"If a change is made in a table, we can trigger some change in other table. Useful for automation. Useful for auditing. - https://codewithmosh.com/courses/525068/lectures/9707199","title":"Triggers"},{"location":"Certifications-and-Learning/languages/sql/Triggers-and-Events/#format","text":"https://codewithmosh.com/courses/525068/lectures/9707196 DELIMITER $$ CREATE TRIGGER tableName_after_typeOfAction -- typeOfAction is INSERT, UPDATE or DELETE AFTER INSERT ON table_name -- UPDATE or DELETE can be used too FOR EACH ROW BEGIN .....any query or stored procedure for ANOTHER TABLE!!! .... END DELIMITER ; NOTE: The BEGIN END block contains query which DOES NOT include the table based on which trigger was made since it will lead to infinte loop.","title":"Format"},{"location":"Certifications-and-Learning/languages/sql/Triggers-and-Events/#viewing-triggers-in-mysql","text":"https://codewithmosh.com/courses/525068/lectures/9707200 SHOW TRIGGER SHOW TRIGGER LIKE 'any-search-term%'","title":"Viewing triggers in mysql"},{"location":"Certifications-and-Learning/languages/sql/Triggers-and-Events/#dropping-trigger","text":"DROP TRIGGER IF EXISTS tableName_after_typeOfAction","title":"Dropping Trigger"},{"location":"Certifications-and-Learning/languages/sql/Triggers-and-Events/#events","text":"Like cron jobs, running certain things in scheduled manner. We can perform Database maintenance tasks Database backups Report Generation etc SHOW VARIABLES LIKE 'event%'; -- Check if event scheduler is on or off SET GLOBAL event_scheduler = OFF -- turn it on or off DELIMITER $$ CREATE EVENT yearly_delete_tableName_something_rows -- Use ALTER EVENT to change the event ON SCHEDULE -- AT '2019-05-01' EVERY 1 YEAR STARTS '2019-01-01' ENDS '2029-01-01' -- EVERY 2 MONTH DO BEGIN DELETE FROM table WHERE col < NOW() - INTERVAL 1 YEAR; END $$ DELIMITER ; SHOW EVENTS; SHOW EVENTS LIKE 'yearly%'; DROP EVENT IF EXIST eventName; ALTER EVENT eventName DISABLE; -- Later ENABLE... cool","title":"Events"},{"location":"Certifications-and-Learning/languages/sql/Views/","text":"Contents Views Updatable views WITH CHECK OPTION Other benefits of views Views A specific query can be saved for later reference, which is called a view. Any standard opration can be performed on a view as if it was a table. Yes, you can add tables into views too to form a new view. This gets saved in the Views part in the MySql. Good Practice is to save table views in SQL files and put it under git. This way people can see data and track changes. CREATE VIEW viewName AS .....your query here.... DROP VIEW viewName CREATE OR REPLACE VIEW viewName AS -- Good way, no need to drop view every time you update it .....your query here.... Updatable views https://codewithmosh.com/courses/525068/lectures/9590281 If we do not have following in the query, view is updatable -- DISTINCT -- Aggregate Function -- GROUP BY / HAVING -- UNION WITH CHECK OPTION https://codewithmosh.com/courses/525068/lectures/9590283 When we update or delete in Views, rows get removed. But we do not want that behaviour in some cases. Hence we use WITH CHECK OPTION, at very end of query CREATE OR REPLACE VIEW ...... AS .....query.... WITH CHECK OPTION Other benefits of views https://codewithmosh.com/courses/525068/lectures/9590282 Works like an abstraction layer over the original table or db. Simplify Queries Reduce the impact of Change Restrict access to the data","title":"Contents"},{"location":"Certifications-and-Learning/languages/sql/Views/#contents","text":"Views Updatable views WITH CHECK OPTION Other benefits of views","title":"Contents"},{"location":"Certifications-and-Learning/languages/sql/Views/#views","text":"A specific query can be saved for later reference, which is called a view. Any standard opration can be performed on a view as if it was a table. Yes, you can add tables into views too to form a new view. This gets saved in the Views part in the MySql. Good Practice is to save table views in SQL files and put it under git. This way people can see data and track changes. CREATE VIEW viewName AS .....your query here.... DROP VIEW viewName CREATE OR REPLACE VIEW viewName AS -- Good way, no need to drop view every time you update it .....your query here....","title":"Views"},{"location":"Certifications-and-Learning/languages/sql/Views/#updatable-views","text":"https://codewithmosh.com/courses/525068/lectures/9590281 If we do not have following in the query, view is updatable -- DISTINCT -- Aggregate Function -- GROUP BY / HAVING -- UNION","title":"Updatable views"},{"location":"Certifications-and-Learning/languages/sql/Views/#with-check-option","text":"https://codewithmosh.com/courses/525068/lectures/9590283 When we update or delete in Views, rows get removed. But we do not want that behaviour in some cases. Hence we use WITH CHECK OPTION, at very end of query CREATE OR REPLACE VIEW ...... AS .....query.... WITH CHECK OPTION","title":"WITH CHECK OPTION"},{"location":"Certifications-and-Learning/languages/sql/Views/#other-benefits-of-views","text":"https://codewithmosh.com/courses/525068/lectures/9590282 Works like an abstraction layer over the original table or db. Simplify Queries Reduce the impact of Change Restrict access to the data","title":"Other benefits of views"},{"location":"Certifications-and-Learning/languages/threejs/","text":"ThreeJs Here we learn about threejs library for the web, which uses webgl to generate 3d. Components **Basic Needed always **Camera <-- To see, the eyes, the way we see. Lights <-- To make things visible. **Scene <-- The environment, a physical space ** Geometry <-- The shape of any matter Textures <-- Images applied on the geometry, else normal color is applied. ** Material <-- The material of matter, like plastic, metal etc **Mesh <-- Geometry + Material = Mesh, the matter we wanted to make Shadows <-- How mesh interacts with light and cast shadows. **Canvas <-- A place in the HTML file where the 3d will be created **Renderer <-- The final step, that processes and created everything in 3d Shaders <-- This is at core on how webgl creates things Physics <-- To make things interact. External library like cannonjs is used. Interactions <-- Using mouse to interact or orbit around or move in env. Functionalities and techniques Importing Models Time and Tick Realistic Render Tools dat gui To get a gui on browser while development to tweak different setting. yarn add --dev dat.gui # To add controls in the browser import * as dat from \"dat.gui\" const gui = new dat.GUI() gui.add(material, 'metalness').min(0.1).max(0.9).step(0.001) Helpers There are inbuild helpers in three js to control things ref https://threejs-journey.com/lessons/15 ending.","title":"ThreeJs"},{"location":"Certifications-and-Learning/languages/threejs/#threejs","text":"Here we learn about threejs library for the web, which uses webgl to generate 3d.","title":"ThreeJs"},{"location":"Certifications-and-Learning/languages/threejs/#components","text":"**Basic Needed always **Camera <-- To see, the eyes, the way we see. Lights <-- To make things visible. **Scene <-- The environment, a physical space ** Geometry <-- The shape of any matter Textures <-- Images applied on the geometry, else normal color is applied. ** Material <-- The material of matter, like plastic, metal etc **Mesh <-- Geometry + Material = Mesh, the matter we wanted to make Shadows <-- How mesh interacts with light and cast shadows. **Canvas <-- A place in the HTML file where the 3d will be created **Renderer <-- The final step, that processes and created everything in 3d Shaders <-- This is at core on how webgl creates things Physics <-- To make things interact. External library like cannonjs is used. Interactions <-- Using mouse to interact or orbit around or move in env.","title":"Components"},{"location":"Certifications-and-Learning/languages/threejs/#functionalities-and-techniques","text":"Importing Models Time and Tick Realistic Render","title":"Functionalities and techniques"},{"location":"Certifications-and-Learning/languages/threejs/#tools","text":"","title":"Tools"},{"location":"Certifications-and-Learning/languages/threejs/#dat-gui","text":"To get a gui on browser while development to tweak different setting. yarn add --dev dat.gui # To add controls in the browser import * as dat from \"dat.gui\" const gui = new dat.GUI() gui.add(material, 'metalness').min(0.1).max(0.9).step(0.001)","title":"dat gui"},{"location":"Certifications-and-Learning/languages/threejs/#helpers","text":"There are inbuild helpers in three js to control things ref https://threejs-journey.com/lessons/15 ending.","title":"Helpers"},{"location":"Certifications-and-Learning/languages/threejs/#_1","text":"","title":""},{"location":"Certifications-and-Learning/languages/threejs/Geometry/","text":"Geometries THREE.NAME NAMEs: SphereBufferGeometry PlaneBufferGeometry TorusBufferGeometry","title":"Geometries"},{"location":"Certifications-and-Learning/languages/threejs/Geometry/#geometries","text":"THREE.NAME NAMEs: SphereBufferGeometry PlaneBufferGeometry TorusBufferGeometry","title":"Geometries"},{"location":"Certifications-and-Learning/languages/threejs/Importing%20Models/","text":"Importing Models Tutorial --> https://threejs-journey.com/lessons/23# Online editor --> https://threejs.org/editor/ Formats OBJ 3DS GLTF etc Or make your own LOL GLTF Getting popular, pretty light and includes lot of features. Three types Default. Made of following three files .gltf <-- JSON file with all information. .bin <-- Binary file with 3d related information like normals, positions, uv coordinates etc. .png <-- Texture that wraps. Binary <-- Simple binary file .glb <-- Easy to load and work with since only one file; but hard to alter the file. Draco <-- Like default, has multiple files, but much lighter as uses draco algo to compress. Embedded <-- One file like binary, but readable like json, but very heavy. Can be altered. Now when gltf is loaded it has: just console.log(loaded-model) to study the structure. animations asset cameras parser scene children Object 1 children Mesh Camera etc position quaternion rotation scale etc etc Object 2 Object 3 .... scenes userData How to use GLTF Loader Default GLTF loader import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js' const gltfLoader = new GLTFLoader() gltfLoader.load{ './location/of/the/file.gltf', // Locaiton of fille () => {console.log('Hi')}, // Any number of functions () => {}, // Any other like fail loaded etc... // Load a single mesh in the children (gltf) => { scene.add(gltf.scene.children[0]) }, // Load model with many meshes in children (gltf) => { while(gltf.scene.children.length) { scene.add(gltf.scene.children[0]) } }, // BEST WAY --> Load model with many meshes in children (gltf) => { const children = [...gltf.scene.children] // using \"...\" to copy a part of parent into a varibale for(const child of children) { scene.add(child) } // running a for loop simple }, // Easiest and shortest way (gltf) => { gltf.scene.scale.set(x,y,z) // If object too big or small, scale during import. 0-1 scale. scene.add(glft.scene) // Just add the whole scene } } Draco Loader Logic is, since the draco is just compressed version of gltf, we need to set a decoder and then after that load the gltf model. import { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js' const dracoLoader = new DRACOLoader() dracoLoader.setDecoderPath('./draco/') // Folder is in > ./node_modules/three/examples/js/libs/draco const gltfLoader = new GLTFLoader() gltfLoader.setDRACOLoader(dracoLoader) rest is same as default. Handeling scale and Animation Scale (gltf) => { gltf.scene.scale.set(x,y,z) // If object too big or small, scale during import. 0-1 scale. scene.add(glft.scene) // Just add the whole scene } Animation let mixer = null; // Set this outside the loader, globally (gltf) => { mixer = new THREE.AnimationMixer(gltf.scene) //create threejs mixer const action = mixer.clipAction(gltf.animation[0]) // Load the first animation action.play() // Play the animation gltf.scene.scale.set(x,y,z) // If object too big or small, scale during import. 0-1 scale. scene.add(glft.scene) // Just add the whole scene } finally down in the code at const tick = () => { if(mixer !== null) { mixer.update(deltaTime) } // Read more here. }","title":"Importing Models"},{"location":"Certifications-and-Learning/languages/threejs/Importing%20Models/#importing-models","text":"Tutorial --> https://threejs-journey.com/lessons/23# Online editor --> https://threejs.org/editor/","title":"Importing Models"},{"location":"Certifications-and-Learning/languages/threejs/Importing%20Models/#formats","text":"OBJ 3DS GLTF etc Or make your own LOL","title":"Formats"},{"location":"Certifications-and-Learning/languages/threejs/Importing%20Models/#gltf","text":"Getting popular, pretty light and includes lot of features.","title":"GLTF"},{"location":"Certifications-and-Learning/languages/threejs/Importing%20Models/#three-types","text":"Default. Made of following three files .gltf <-- JSON file with all information. .bin <-- Binary file with 3d related information like normals, positions, uv coordinates etc. .png <-- Texture that wraps. Binary <-- Simple binary file .glb <-- Easy to load and work with since only one file; but hard to alter the file. Draco <-- Like default, has multiple files, but much lighter as uses draco algo to compress. Embedded <-- One file like binary, but readable like json, but very heavy. Can be altered. Now when gltf is loaded it has: just console.log(loaded-model) to study the structure. animations asset cameras parser scene children Object 1 children Mesh Camera etc position quaternion rotation scale etc etc Object 2 Object 3 .... scenes userData","title":"Three types"},{"location":"Certifications-and-Learning/languages/threejs/Importing%20Models/#how-to-use-gltf-loader","text":"","title":"How to use GLTF Loader"},{"location":"Certifications-and-Learning/languages/threejs/Importing%20Models/#default-gltf-loader","text":"import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js' const gltfLoader = new GLTFLoader() gltfLoader.load{ './location/of/the/file.gltf', // Locaiton of fille () => {console.log('Hi')}, // Any number of functions () => {}, // Any other like fail loaded etc... // Load a single mesh in the children (gltf) => { scene.add(gltf.scene.children[0]) }, // Load model with many meshes in children (gltf) => { while(gltf.scene.children.length) { scene.add(gltf.scene.children[0]) } }, // BEST WAY --> Load model with many meshes in children (gltf) => { const children = [...gltf.scene.children] // using \"...\" to copy a part of parent into a varibale for(const child of children) { scene.add(child) } // running a for loop simple }, // Easiest and shortest way (gltf) => { gltf.scene.scale.set(x,y,z) // If object too big or small, scale during import. 0-1 scale. scene.add(glft.scene) // Just add the whole scene } }","title":"Default GLTF loader"},{"location":"Certifications-and-Learning/languages/threejs/Importing%20Models/#draco-loader","text":"Logic is, since the draco is just compressed version of gltf, we need to set a decoder and then after that load the gltf model. import { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js' const dracoLoader = new DRACOLoader() dracoLoader.setDecoderPath('./draco/') // Folder is in > ./node_modules/three/examples/js/libs/draco const gltfLoader = new GLTFLoader() gltfLoader.setDRACOLoader(dracoLoader) rest is same as default.","title":"Draco Loader"},{"location":"Certifications-and-Learning/languages/threejs/Importing%20Models/#handeling-scale-and-animation","text":"","title":"Handeling scale and Animation"},{"location":"Certifications-and-Learning/languages/threejs/Importing%20Models/#scale","text":"(gltf) => { gltf.scene.scale.set(x,y,z) // If object too big or small, scale during import. 0-1 scale. scene.add(glft.scene) // Just add the whole scene }","title":"Scale"},{"location":"Certifications-and-Learning/languages/threejs/Importing%20Models/#animation","text":"let mixer = null; // Set this outside the loader, globally (gltf) => { mixer = new THREE.AnimationMixer(gltf.scene) //create threejs mixer const action = mixer.clipAction(gltf.animation[0]) // Load the first animation action.play() // Play the animation gltf.scene.scale.set(x,y,z) // If object too big or small, scale during import. 0-1 scale. scene.add(glft.scene) // Just add the whole scene } finally down in the code at const tick = () => { if(mixer !== null) { mixer.update(deltaTime) } // Read more here. }","title":"Animation"},{"location":"Certifications-and-Learning/languages/threejs/Interactions/","text":"Interactions import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'","title":"Interactions"},{"location":"Certifications-and-Learning/languages/threejs/Interactions/#interactions","text":"import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'","title":"Interactions"},{"location":"Certifications-and-Learning/languages/threejs/Lights/","text":"Lights https://threejs-journey.com/lessons/15 Functions const ambient = new THREE.AmbientLight(color, intensity) <-- Everywhere equal light .DirectionalLight(color, intensity) <-- Comes from direction infinite .HemisphereLight(color1, color2, intensity) <-- Two colors from opposite light .PointLight(color, intensity, x,y,z) <-- Like bulb .RectAreaLight(color, intensity,x,y,z) <-- Like a surface giving light .SpotLight(color, intensity,x,y,z) <-- Like a torch Concept of Baking For good performance, we bake the light into the material, since light calculation is not very perfromant.","title":"Lights"},{"location":"Certifications-and-Learning/languages/threejs/Lights/#lights","text":"https://threejs-journey.com/lessons/15","title":"Lights"},{"location":"Certifications-and-Learning/languages/threejs/Lights/#functions","text":"const ambient = new THREE.AmbientLight(color, intensity) <-- Everywhere equal light .DirectionalLight(color, intensity) <-- Comes from direction infinite .HemisphereLight(color1, color2, intensity) <-- Two colors from opposite light .PointLight(color, intensity, x,y,z) <-- Like bulb .RectAreaLight(color, intensity,x,y,z) <-- Like a surface giving light .SpotLight(color, intensity,x,y,z) <-- Like a torch","title":"Functions"},{"location":"Certifications-and-Learning/languages/threejs/Lights/#concept-of-baking","text":"For good performance, we bake the light into the material, since light calculation is not very perfromant.","title":"Concept of Baking"},{"location":"Certifications-and-Learning/languages/threejs/Material/","text":"Materials LINK --> https://threejs-journey.com/lessons/12 const mat = new THREE.MeshBasicMaterial() const mat = new THREE.MeshNormalMaterial() <-- Allows reflection, refraction etc const mat = new THREE.MeshMatcapMaterial() <-- Use an image/ texture to map colors const mat = new THREE.MeshDepthMaterial() <-- White when near, black when far const mat = new THREE.MeshLamberMaterial() <-- Visible only when light is there, more performant const mat = new THREE.MeshPhongMaterial() <-- Same as Lamber, but better quality, less performant const mat = new THREE.MeshToonMaterial() <-- Same as Lamber, but cartoonish const mat = new THREE.MeshStandardMaterial() <-- Similar to Lamber, PBR (Physically based rendering principles), better at roughness and metelness. mat.map = nameOfTexture mat.color.set('green') OR material.color = THREE.Color('green') mat.wireframe mat.transparent mat.opacity mat.alphaMap mat.side = THREE.DoubleSide const mat = new THREE.MeshNormalMaterial() mat.flatShading = true // In case of MeshNormalMaterial() const mat = new THREE.MeshMatcapMaterial() mat.matcap = matcapTexture const mat = new THREE.MeshToonMaterial() minFilter and magFilter can be used on mesh to control MeshToonMaterial someMaterial.minFilter = THREE.NearestFilter someMaterial.migFilter = THREE.NearestFilter const mat = new THREE.MeshStandardMaterial() mat.metalness = 0.65 mat.roughness = 0.45 mat.aoMap mat.aoMapIntensity displacementMap displacementScale metalnessMap roughnessMap normalMap normalScale alphaMap","title":"Materials"},{"location":"Certifications-and-Learning/languages/threejs/Material/#materials","text":"LINK --> https://threejs-journey.com/lessons/12 const mat = new THREE.MeshBasicMaterial() const mat = new THREE.MeshNormalMaterial() <-- Allows reflection, refraction etc const mat = new THREE.MeshMatcapMaterial() <-- Use an image/ texture to map colors const mat = new THREE.MeshDepthMaterial() <-- White when near, black when far const mat = new THREE.MeshLamberMaterial() <-- Visible only when light is there, more performant const mat = new THREE.MeshPhongMaterial() <-- Same as Lamber, but better quality, less performant const mat = new THREE.MeshToonMaterial() <-- Same as Lamber, but cartoonish const mat = new THREE.MeshStandardMaterial() <-- Similar to Lamber, PBR (Physically based rendering principles), better at roughness and metelness. mat.map = nameOfTexture mat.color.set('green') OR material.color = THREE.Color('green') mat.wireframe mat.transparent mat.opacity mat.alphaMap mat.side = THREE.DoubleSide const mat = new THREE.MeshNormalMaterial() mat.flatShading = true // In case of MeshNormalMaterial() const mat = new THREE.MeshMatcapMaterial() mat.matcap = matcapTexture const mat = new THREE.MeshToonMaterial() minFilter and magFilter can be used on mesh to control MeshToonMaterial someMaterial.minFilter = THREE.NearestFilter someMaterial.migFilter = THREE.NearestFilter const mat = new THREE.MeshStandardMaterial() mat.metalness = 0.65 mat.roughness = 0.45 mat.aoMap mat.aoMapIntensity displacementMap displacementScale metalnessMap roughnessMap normalMap normalScale alphaMap","title":"Materials"},{"location":"Certifications-and-Learning/languages/threejs/Physics/","text":"Contents Physics Basics Overall Idea Parts of physics Libraries Simple Usage Contact Materials Forces CANNON and THREE combo util Performance Events Physics Tutorial --> https://threejs-journey.com/lessons/22 Examples --> https://schteppe.github.io/cannon.js/ Threejs does not have physics inbuilt. It just renders out stuff to a browser. For physics we need another library. In fact the very physics in JavaScript is just a bunch of formulas in functions which can be applied to any other variables, and that acts by the formula. Hence a physics engine is just a bunch of newton formulas, given in a manageable format. Basics Overall Idea What is made in cannon is independent from threejs. Make a world visible to cannon. Add bounding boxes like shapes to the cannon world. Add attributes to shape to create a body. Add Cannon materials to body and define contactMaterial properties. Map out locations and shapes of cannon body to the ThreeJs meshes. Link threejs and cannon by update the threejs world and cannon world with the ticker. Parts of physics World <-- This is where all physics happen. Note: Does not know about Threejs Shape <-- Give a shape, sphere box plane etc, like a bounding box Body <-- Add mass, position etc to shape to get body Material <-- The body can have a specific material Contact Material <-- Relations between materials defined, like friction etc Forces <-- Forces applied to the bodies Events <-- When body collide, sleep, wakeup etc, we can listen to them to run other functions, like playing sounds or doing something else. Constraints <-- Making multiple bodies move and act in respect to each other. Like a door hinge, or gears. Libraries 3d - Ammo.js <-- Mostly used, but complex 3d - Cannon.js <-- Easier and low learning curve 3d - Oimo.js 2d - Matter.js 2d - p2.js 2d - planck.js 2d - box2d.js Simple Usage yarn add cannon or npm install --save cannon // Install package // The skeleton code import CANNON from 'cannon' // Import Lib const world = new CANNON.World() // Create a world instance world.gravity.set(0, -9.82, 0) // Add gravity to it x,y,z const sphereShape = new CANNON.Sphere(0.5) // Make a bounding shape const sphereBody = new CANNON.Body({ // Add physical attr to shape mass: 1, // Like in real world mass position: new CANNON.Vec3(), // The starting location shape: sphereShape, // What shape, give it material: mat1 // Refer contact materials below }) world.addBody(sphereBody) // Finally add body to the world // Finally in the ticker // sphere <-- In threejs scene // sphereBody <-- In cannon world sphere.position.x = sphereBody.position.x sphere.position.y = sphereBody.position.y sphere.position.z = sphereBody.position.z // OR in one line sphere.position.copy(sphereBody.position) Contact Materials NOTE: You can use single material throughout too, for granular example, creating two. NOTE2: Set a default material in the world by using world.defaultContactMaterial = contactMat const mat1 = new CANNON.Material('concrete') const mat2 = new CANNON.Material('plastic') const mat1Mat2ContactMaterial = new CANNON.ContactMaterial({ mat1, mat2, // In case only single, material like mat1 used, this would also be mat1. { friction:0.1, restitution: 0.9, } }) world.addContactMaterial(mat1Mat2ContactMaterial) FINALLY body1.material = mat1 body2.material = mat2 Forces applyForce <-- force from a point applyImpulse <-- force in short duration applyLocalForce <-- like force, but point position is local applyLocalImpulse <-- like impulse, but point position is local format is --> applyForce(fromPoint, toPoint) // Need to confirm. Now we need 3D points, hence we use CANNON.Vec3(x,y,z) Example: anyBody.applyLocalForce(new CANNON.Vec3(10,0,0), new CANNON.Vec3(0,0,0)) CANNON and THREE combo util This section tells how both the libs should be used in sync with each other. // A list to track cannon and threejs combo object const objectsToUpdate = [] // Defining the object combo const createSphere = (radius, position) => { // 1. ThreeJs Mesh // 2. Cannon Body // 3. Save them into a list of objects like objectToUpdate // ThreeJs Mesh const mesh = new THREE.Mesh( new THREE.SphereBufferGeometry(radius,20,20) new THREE.MeshStandardMaterial({ metalness: 0.3, roughness: 0.4, envMap: envMapTexture }) ) mesh.castShadow = true mesh.position.copy(position) scene.add(mesh) // Cannon Body const shape = new CANNON.Sphere(radius) const body = new CANNON.Body({ mass:1, position: new CANNON.Vec3(0,3,0), shape: shape, material: mat1 }) body.position.copy(position) body.addEventListener('collide', playSound) // Refer the [Events](#Events) section on this page. world.addBody(body) // Save them into a list of objects like objectsToUpdate objectsToUpdate.push({ mesh: mesh, body: body }) } // Creating the combo by running the combo function above createSphere(0.5, {x: 0, y: 3, z: 0 }) createSphere(0.7, {x: 0, y: 5, z: 0 }) // Updating the ticker const tick = () => { for(const object of objectsToUpdate){ object.mesh.position.copy(object.body.position) } } // Adding dat gui controls const gui = new dat.GUI() // Create an instance const debugObject = {} // An empty array // Define the function of the dat gui contorller debugObject.createSphere = () => { createSphere(0.5, {x: ,y: ,z: }) // Our combo function is put in here } gui.add(debugObject,'createSphere') // dat gui added to the screen Performance Two Points: 1. Broadphase: By default, when physics is calculated, it is done for each object wrt each other object. This processing is useless since out of, say, 100 objects, only 2 are near each other, then why would you want the physics engine to calculate forces for all 100 items, which is 100! (100 factorial). 2. Sleep: When objects are not interacting, everything is stop, even then calculations are done continuously, so we need to stop calculations on idle. So we use sleep method. 3. Workers: Javascript is single thread language. So all processing done on single thread. To use multi thread in cannon, workers can be used to calculate different things on different threads etc. Detailed tutorial was not provided, explore by yourself. Types of BROADPHASE available. NaiveBroadphase <-- Every body against every body n! This is DEFAULT in CANNON. GridBroadphase <-- Make imaginary cubes, quadrilles the world and then calculates body against those bodies in neighbouring cubes. SAPBroadphase <-- Sweep And Prune - tests bodies on arbitrary axis in multiple steps. Using broadphase --> world.broadphase = new CANNON.SAPBroadphase(world) Using sleep --> world.allowSleep = true Events const someSound = new Audio('./location/to/file.mp3') // Load sound file. const playSound = () => { someSound.play() } // Basic function. // Note: Multiple collisions create robotic multiple sounds, which is very bad to listen and unnatural. // Hence we combine some techniques to control the sound on collition. const playSound = (collision) => { // Advance function. const impactStrength = collision.contact.getImpactVelocityAlongNormal() // Gives us the impact strength if(impactStrength > 1.5){ // Play sound only when strength of imapact above something someSound.volume = Math.random() // Randomly control volume, feels natural and soothing someSound.currentTime = 0 // Reset sound to start, so multiple trr trr does not happen someSound.play() // Play the sound now } } Removing objects using dat gui debugObjects.reset = () => { for(const object in objectsToUpdate) { object.body.removeEventListener('collide', playSound) // Remove sounds event world.removeBody(object.body) // Remove the cannon object scene.remove(object.mesh) // Remove the threejs mesh } objectsToUpdate.splice(0, objectsToUpdate.length) // Update the objectsToUpdate array } Constraints HingeConstraint <-- door hinge type DistanceConstraint <-- force two bodies to maintain distance between each other LockConstraint <-- merges two bodies as if they were one PointToPointConstraint <-- glues bodies to a specific point on the objects Ending Notes Cannon-es Cannon has not been updated for years, but cannon-es is another version which is being updated. You can use cannon-es instead as well Install --> yarn add cannon-es@0.15.1 # Just search and confirm Import --> import CANNON from 'cannon-es' Ammojs Written in C++ More famous maybe; but hard to use More examples on net with threejs Physijs Uses Ammojs in back, but easier to use Here we do not have to created cannon body and threejs mesh separately. They are done combined. Use --> box = new Physijs.BoxMesh( new THREE.CubeGeometry(5,5,5) new THREE.MeshBasicMaterial({color: black}) ) scene.add(box)","title":"Contents"},{"location":"Certifications-and-Learning/languages/threejs/Physics/#contents","text":"Physics Basics Overall Idea Parts of physics Libraries Simple Usage Contact Materials Forces CANNON and THREE combo util Performance Events","title":"Contents"},{"location":"Certifications-and-Learning/languages/threejs/Physics/#physics","text":"Tutorial --> https://threejs-journey.com/lessons/22 Examples --> https://schteppe.github.io/cannon.js/ Threejs does not have physics inbuilt. It just renders out stuff to a browser. For physics we need another library. In fact the very physics in JavaScript is just a bunch of formulas in functions which can be applied to any other variables, and that acts by the formula. Hence a physics engine is just a bunch of newton formulas, given in a manageable format.","title":"Physics"},{"location":"Certifications-and-Learning/languages/threejs/Physics/#basics","text":"","title":"Basics"},{"location":"Certifications-and-Learning/languages/threejs/Physics/#overall-idea","text":"What is made in cannon is independent from threejs. Make a world visible to cannon. Add bounding boxes like shapes to the cannon world. Add attributes to shape to create a body. Add Cannon materials to body and define contactMaterial properties. Map out locations and shapes of cannon body to the ThreeJs meshes. Link threejs and cannon by update the threejs world and cannon world with the ticker.","title":"Overall Idea"},{"location":"Certifications-and-Learning/languages/threejs/Physics/#parts-of-physics","text":"World <-- This is where all physics happen. Note: Does not know about Threejs Shape <-- Give a shape, sphere box plane etc, like a bounding box Body <-- Add mass, position etc to shape to get body Material <-- The body can have a specific material Contact Material <-- Relations between materials defined, like friction etc Forces <-- Forces applied to the bodies Events <-- When body collide, sleep, wakeup etc, we can listen to them to run other functions, like playing sounds or doing something else. Constraints <-- Making multiple bodies move and act in respect to each other. Like a door hinge, or gears.","title":"Parts of physics"},{"location":"Certifications-and-Learning/languages/threejs/Physics/#libraries","text":"3d - Ammo.js <-- Mostly used, but complex 3d - Cannon.js <-- Easier and low learning curve 3d - Oimo.js 2d - Matter.js 2d - p2.js 2d - planck.js 2d - box2d.js","title":"Libraries"},{"location":"Certifications-and-Learning/languages/threejs/Physics/#simple-usage","text":"yarn add cannon or npm install --save cannon // Install package // The skeleton code import CANNON from 'cannon' // Import Lib const world = new CANNON.World() // Create a world instance world.gravity.set(0, -9.82, 0) // Add gravity to it x,y,z const sphereShape = new CANNON.Sphere(0.5) // Make a bounding shape const sphereBody = new CANNON.Body({ // Add physical attr to shape mass: 1, // Like in real world mass position: new CANNON.Vec3(), // The starting location shape: sphereShape, // What shape, give it material: mat1 // Refer contact materials below }) world.addBody(sphereBody) // Finally add body to the world // Finally in the ticker // sphere <-- In threejs scene // sphereBody <-- In cannon world sphere.position.x = sphereBody.position.x sphere.position.y = sphereBody.position.y sphere.position.z = sphereBody.position.z // OR in one line sphere.position.copy(sphereBody.position)","title":"Simple Usage"},{"location":"Certifications-and-Learning/languages/threejs/Physics/#contact-materials","text":"NOTE: You can use single material throughout too, for granular example, creating two. NOTE2: Set a default material in the world by using world.defaultContactMaterial = contactMat const mat1 = new CANNON.Material('concrete') const mat2 = new CANNON.Material('plastic') const mat1Mat2ContactMaterial = new CANNON.ContactMaterial({ mat1, mat2, // In case only single, material like mat1 used, this would also be mat1. { friction:0.1, restitution: 0.9, } }) world.addContactMaterial(mat1Mat2ContactMaterial) FINALLY body1.material = mat1 body2.material = mat2","title":"Contact Materials"},{"location":"Certifications-and-Learning/languages/threejs/Physics/#forces","text":"applyForce <-- force from a point applyImpulse <-- force in short duration applyLocalForce <-- like force, but point position is local applyLocalImpulse <-- like impulse, but point position is local format is --> applyForce(fromPoint, toPoint) // Need to confirm. Now we need 3D points, hence we use CANNON.Vec3(x,y,z) Example: anyBody.applyLocalForce(new CANNON.Vec3(10,0,0), new CANNON.Vec3(0,0,0))","title":"Forces"},{"location":"Certifications-and-Learning/languages/threejs/Physics/#cannon-and-three-combo-util","text":"This section tells how both the libs should be used in sync with each other. // A list to track cannon and threejs combo object const objectsToUpdate = [] // Defining the object combo const createSphere = (radius, position) => { // 1. ThreeJs Mesh // 2. Cannon Body // 3. Save them into a list of objects like objectToUpdate // ThreeJs Mesh const mesh = new THREE.Mesh( new THREE.SphereBufferGeometry(radius,20,20) new THREE.MeshStandardMaterial({ metalness: 0.3, roughness: 0.4, envMap: envMapTexture }) ) mesh.castShadow = true mesh.position.copy(position) scene.add(mesh) // Cannon Body const shape = new CANNON.Sphere(radius) const body = new CANNON.Body({ mass:1, position: new CANNON.Vec3(0,3,0), shape: shape, material: mat1 }) body.position.copy(position) body.addEventListener('collide', playSound) // Refer the [Events](#Events) section on this page. world.addBody(body) // Save them into a list of objects like objectsToUpdate objectsToUpdate.push({ mesh: mesh, body: body }) } // Creating the combo by running the combo function above createSphere(0.5, {x: 0, y: 3, z: 0 }) createSphere(0.7, {x: 0, y: 5, z: 0 }) // Updating the ticker const tick = () => { for(const object of objectsToUpdate){ object.mesh.position.copy(object.body.position) } } // Adding dat gui controls const gui = new dat.GUI() // Create an instance const debugObject = {} // An empty array // Define the function of the dat gui contorller debugObject.createSphere = () => { createSphere(0.5, {x: ,y: ,z: }) // Our combo function is put in here } gui.add(debugObject,'createSphere') // dat gui added to the screen","title":"CANNON and THREE combo util"},{"location":"Certifications-and-Learning/languages/threejs/Physics/#performance","text":"Two Points: 1. Broadphase: By default, when physics is calculated, it is done for each object wrt each other object. This processing is useless since out of, say, 100 objects, only 2 are near each other, then why would you want the physics engine to calculate forces for all 100 items, which is 100! (100 factorial). 2. Sleep: When objects are not interacting, everything is stop, even then calculations are done continuously, so we need to stop calculations on idle. So we use sleep method. 3. Workers: Javascript is single thread language. So all processing done on single thread. To use multi thread in cannon, workers can be used to calculate different things on different threads etc. Detailed tutorial was not provided, explore by yourself. Types of BROADPHASE available. NaiveBroadphase <-- Every body against every body n! This is DEFAULT in CANNON. GridBroadphase <-- Make imaginary cubes, quadrilles the world and then calculates body against those bodies in neighbouring cubes. SAPBroadphase <-- Sweep And Prune - tests bodies on arbitrary axis in multiple steps. Using broadphase --> world.broadphase = new CANNON.SAPBroadphase(world) Using sleep --> world.allowSleep = true","title":"Performance"},{"location":"Certifications-and-Learning/languages/threejs/Physics/#events","text":"const someSound = new Audio('./location/to/file.mp3') // Load sound file. const playSound = () => { someSound.play() } // Basic function. // Note: Multiple collisions create robotic multiple sounds, which is very bad to listen and unnatural. // Hence we combine some techniques to control the sound on collition. const playSound = (collision) => { // Advance function. const impactStrength = collision.contact.getImpactVelocityAlongNormal() // Gives us the impact strength if(impactStrength > 1.5){ // Play sound only when strength of imapact above something someSound.volume = Math.random() // Randomly control volume, feels natural and soothing someSound.currentTime = 0 // Reset sound to start, so multiple trr trr does not happen someSound.play() // Play the sound now } }","title":"Events"},{"location":"Certifications-and-Learning/languages/threejs/Physics/#removing-objects-using-dat-gui","text":"debugObjects.reset = () => { for(const object in objectsToUpdate) { object.body.removeEventListener('collide', playSound) // Remove sounds event world.removeBody(object.body) // Remove the cannon object scene.remove(object.mesh) // Remove the threejs mesh } objectsToUpdate.splice(0, objectsToUpdate.length) // Update the objectsToUpdate array }","title":"Removing objects using dat gui"},{"location":"Certifications-and-Learning/languages/threejs/Physics/#constraints","text":"HingeConstraint <-- door hinge type DistanceConstraint <-- force two bodies to maintain distance between each other LockConstraint <-- merges two bodies as if they were one PointToPointConstraint <-- glues bodies to a specific point on the objects","title":"Constraints"},{"location":"Certifications-and-Learning/languages/threejs/Physics/#ending-notes","text":"","title":"Ending Notes"},{"location":"Certifications-and-Learning/languages/threejs/Physics/#cannon-es","text":"Cannon has not been updated for years, but cannon-es is another version which is being updated. You can use cannon-es instead as well Install --> yarn add cannon-es@0.15.1 # Just search and confirm Import --> import CANNON from 'cannon-es'","title":"Cannon-es"},{"location":"Certifications-and-Learning/languages/threejs/Physics/#ammojs","text":"Written in C++ More famous maybe; but hard to use More examples on net with threejs","title":"Ammojs"},{"location":"Certifications-and-Learning/languages/threejs/Physics/#physijs","text":"Uses Ammojs in back, but easier to use Here we do not have to created cannon body and threejs mesh separately. They are done combined. Use --> box = new Physijs.BoxMesh( new THREE.CubeGeometry(5,5,5) new THREE.MeshBasicMaterial({color: black}) ) scene.add(box)","title":"Physijs"},{"location":"Certifications-and-Learning/languages/threejs/Realistic%20Render/","text":"Realistic Render How to render real","title":"Realistic Render"},{"location":"Certifications-and-Learning/languages/threejs/Realistic%20Render/#realistic-render","text":"How to render real","title":"Realistic Render"},{"location":"Certifications-and-Learning/languages/threejs/Shaders/","text":"Shaders https://threejs-journey.com/lessons/27 Written in a program called GLSL.","title":"Shaders"},{"location":"Certifications-and-Learning/languages/threejs/Shaders/#shaders","text":"https://threejs-journey.com/lessons/27 Written in a program called GLSL.","title":"Shaders"},{"location":"Certifications-and-Learning/languages/threejs/Textures/","text":"Textures LINK --> https://threejs-journey.com/lessons/11 LINK --> https://threejs-journey.com/lessons/12 const textureLoader = new THREE.TextureLoader() <-- Takes a image and apply const textureLoader = new THREE.CubeTextureLoader() <-- Takes 6 images. Used with environmentMap const texture1 = textureLoader.load(\"./location/to/image1.png\") const texture2 = textureLoader.load(\"./location/to/image2.png\") const texture3 = textureLoader.load(\"./location/to/image3.png\") const textureLoader = new THREE.CubeTextureLoader() This takes array of 6 images, like six sides of a cube. When this is used with material.envMap; the item will reflect the environment","title":"Textures"},{"location":"Certifications-and-Learning/languages/threejs/Textures/#textures","text":"LINK --> https://threejs-journey.com/lessons/11 LINK --> https://threejs-journey.com/lessons/12 const textureLoader = new THREE.TextureLoader() <-- Takes a image and apply const textureLoader = new THREE.CubeTextureLoader() <-- Takes 6 images. Used with environmentMap const texture1 = textureLoader.load(\"./location/to/image1.png\") const texture2 = textureLoader.load(\"./location/to/image2.png\") const texture3 = textureLoader.load(\"./location/to/image3.png\") const textureLoader = new THREE.CubeTextureLoader() This takes array of 6 images, like six sides of a cube. When this is used with material.envMap; the item will reflect the environment","title":"Textures"},{"location":"Certifications-and-Learning/languages/threejs/Time%20and%20Tick/","text":"Time and Tick This is needed to render out everyting wrt time. Concepts FrameRate Time Usage const clock = THREE.Clock() let oldElapsedTime = 0 const tick = () => { const elapsedTime = clock.getElapsedTime() const deltaTime = elapsedTime - oldElapsedTime oldElapsedTime = elapsedTime // Update Cannon World using world.step(1/60, deltaTime, 3) // Update ThreeJs world using renderer.render() // Update Controls world using controls.update() sphere.position.x = sphereBody.position.x sphere.position.y = sphereBody.position.y sphere.position.z = sphereBody.position.z }","title":"Time and Tick"},{"location":"Certifications-and-Learning/languages/threejs/Time%20and%20Tick/#time-and-tick","text":"This is needed to render out everyting wrt time.","title":"Time and Tick"},{"location":"Certifications-and-Learning/languages/threejs/Time%20and%20Tick/#concepts","text":"FrameRate Time","title":"Concepts"},{"location":"Certifications-and-Learning/languages/threejs/Time%20and%20Tick/#usage","text":"const clock = THREE.Clock() let oldElapsedTime = 0 const tick = () => { const elapsedTime = clock.getElapsedTime() const deltaTime = elapsedTime - oldElapsedTime oldElapsedTime = elapsedTime // Update Cannon World using world.step(1/60, deltaTime, 3) // Update ThreeJs world using renderer.render() // Update Controls world using controls.update() sphere.position.x = sphereBody.position.x sphere.position.y = sphereBody.position.y sphere.position.z = sphereBody.position.z }","title":"Usage"},{"location":"Certifications-and-Learning/languages/typescript/","text":"Contents Intro Fundamentals Built-in Types Advance Types Generics Modules Integration with Javascript Importing js file in ts file Type Checking JSDoc - Describing Types Declaration Files Third party js libs TypeScript with REACT Calling Backend Intro Made by Microsoft. Static Typing. Meaning, one has to define vars at the point of defining it. Fundamentals Built-in Types number, string, boolean, null, undefined, object any, unknown, never, enum, tuple let sales: number = 123_456_789; let course: string = 'Mana'; let level: any; // Can be changed later let number: number[] = []; // number array let user: [number, string] = [1,'Mohan']; // tuple. user.push(1) is an issue in typescript. // PascalCase enum Size {Small=1, Medium, Large='m'} // Enum const enum Size {Small=1, Medium, Large} // Optemized Enum // Function https://codewithmosh.com/courses/1779784/lectures/40255446 function someThing(income: number, year = 2022): string {} //input is num and output is string // noUnusedLocals, noUnusedParameters, noImplicitReturns // Objects https://codewithmosh.com/courses/1779784/lectures/40255447 // Basic Way let employee: { readonly id: number, // This is read only, can not be modified name?: string, // Made this Optional with ? retire: (date: Date) => void // Defined a method } = {id: 1, name: 'Mohan', retire: (date: Date) => {}}; employee.name = 'Manasvi' employee.id = 22 // Not allowed, since read only Advance Types The above way of defining object is so messy. So we use type aliases. type Employee = { readonly id: number, name: string, retire: (date: Date) => void } let employee: Employee = {.......} Generics Modules // ./shapes/index.ts // Example of re-exporting // We have two files A.ts and B.ts in shapes folder. import { A } from \"./A\"; import { B } from \"./B\"; export { A, B }; // The above and below are same export { A } from \"./A\"; export { B } from \"./B\"; Integration with Javascript Importing js file in ts file Javascript code can not be imported by default in typescript. In tsconfig.js --> \"allowJs\": true Type Checking In tsconfig.js --> \"checkJs\": true We can optionally turn off compiler errors on a file-by-file basis by applying // @ts-nocheck once on top of JavaScript files. JSDoc - Describing Types Above all classes, add these. /** * Describe what function does. * @param {number} something - Something is a variables * @returns {number} */ Declaration Files Similar to JSDoc, but you might not want to add comments in the main file. So we create a file with \"fileName.d.ts\" format. Image we have a module called tax.js. So declaration file will be tax.d.ts Note the \"declare\" keyword below. // tax.d.ts export declare function calculateTax(income: number): number; Third party js libs If normal js modules are installed and used, we will not see typescript compilation details and errors. To solve this, there is a github repo called \"Definitely Typed\". Instead of --> npm i lodash We use --> npm i --save-dev @types/lodash Newer JavaScript libraries come with type definition files. So there\u2019s no need to install type definition files separately. TypeScript with REACT Calling Backend https://codewithmosh.com/courses/1779784/lectures/40256506","title":"Contents"},{"location":"Certifications-and-Learning/languages/typescript/#contents","text":"Intro Fundamentals Built-in Types Advance Types Generics Modules Integration with Javascript Importing js file in ts file Type Checking JSDoc - Describing Types Declaration Files Third party js libs TypeScript with REACT Calling Backend","title":"Contents"},{"location":"Certifications-and-Learning/languages/typescript/#intro","text":"Made by Microsoft. Static Typing. Meaning, one has to define vars at the point of defining it.","title":"Intro"},{"location":"Certifications-and-Learning/languages/typescript/#fundamentals","text":"","title":"Fundamentals"},{"location":"Certifications-and-Learning/languages/typescript/#built-in-types","text":"number, string, boolean, null, undefined, object any, unknown, never, enum, tuple let sales: number = 123_456_789; let course: string = 'Mana'; let level: any; // Can be changed later let number: number[] = []; // number array let user: [number, string] = [1,'Mohan']; // tuple. user.push(1) is an issue in typescript. // PascalCase enum Size {Small=1, Medium, Large='m'} // Enum const enum Size {Small=1, Medium, Large} // Optemized Enum // Function https://codewithmosh.com/courses/1779784/lectures/40255446 function someThing(income: number, year = 2022): string {} //input is num and output is string // noUnusedLocals, noUnusedParameters, noImplicitReturns // Objects https://codewithmosh.com/courses/1779784/lectures/40255447 // Basic Way let employee: { readonly id: number, // This is read only, can not be modified name?: string, // Made this Optional with ? retire: (date: Date) => void // Defined a method } = {id: 1, name: 'Mohan', retire: (date: Date) => {}}; employee.name = 'Manasvi' employee.id = 22 // Not allowed, since read only","title":"Built-in Types"},{"location":"Certifications-and-Learning/languages/typescript/#advance-types","text":"The above way of defining object is so messy. So we use type aliases. type Employee = { readonly id: number, name: string, retire: (date: Date) => void } let employee: Employee = {.......}","title":"Advance Types"},{"location":"Certifications-and-Learning/languages/typescript/#generics","text":"","title":"Generics"},{"location":"Certifications-and-Learning/languages/typescript/#modules","text":"// ./shapes/index.ts // Example of re-exporting // We have two files A.ts and B.ts in shapes folder. import { A } from \"./A\"; import { B } from \"./B\"; export { A, B }; // The above and below are same export { A } from \"./A\"; export { B } from \"./B\";","title":"Modules"},{"location":"Certifications-and-Learning/languages/typescript/#integration-with-javascript","text":"","title":"Integration with Javascript"},{"location":"Certifications-and-Learning/languages/typescript/#importing-js-file-in-ts-file","text":"Javascript code can not be imported by default in typescript. In tsconfig.js --> \"allowJs\": true","title":"Importing js file in ts file"},{"location":"Certifications-and-Learning/languages/typescript/#type-checking","text":"In tsconfig.js --> \"checkJs\": true We can optionally turn off compiler errors on a file-by-file basis by applying // @ts-nocheck once on top of JavaScript files.","title":"Type Checking"},{"location":"Certifications-and-Learning/languages/typescript/#jsdoc-describing-types","text":"Above all classes, add these. /** * Describe what function does. * @param {number} something - Something is a variables * @returns {number} */","title":"JSDoc - Describing Types"},{"location":"Certifications-and-Learning/languages/typescript/#declaration-files","text":"Similar to JSDoc, but you might not want to add comments in the main file. So we create a file with \"fileName.d.ts\" format. Image we have a module called tax.js. So declaration file will be tax.d.ts Note the \"declare\" keyword below. // tax.d.ts export declare function calculateTax(income: number): number;","title":"Declaration Files"},{"location":"Certifications-and-Learning/languages/typescript/#third-party-js-libs","text":"If normal js modules are installed and used, we will not see typescript compilation details and errors. To solve this, there is a github repo called \"Definitely Typed\". Instead of --> npm i lodash We use --> npm i --save-dev @types/lodash Newer JavaScript libraries come with type definition files. So there\u2019s no need to install type definition files separately.","title":"Third party js libs"},{"location":"Certifications-and-Learning/languages/typescript/#typescript-with-react","text":"","title":"TypeScript with REACT"},{"location":"Certifications-and-Learning/languages/typescript/#calling-backend","text":"https://codewithmosh.com/courses/1779784/lectures/40256506","title":"Calling Backend"},{"location":"Certifications-and-Learning/mlai/","text":"Machine Learning and AI - mlai Holt Winter Simpler than ARIMA ARMA SARIMAX And fast and accurate https://www.youtube.com/watch?v=O6cUkdQeLUQ","title":"Machine Learning and AI - mlai"},{"location":"Certifications-and-Learning/mlai/#machine-learning-and-ai-mlai","text":"","title":"Machine Learning and AI - mlai"},{"location":"Certifications-and-Learning/mlai/#holt-winter","text":"Simpler than ARIMA ARMA SARIMAX And fast and accurate https://www.youtube.com/watch?v=O6cUkdQeLUQ","title":"Holt Winter"},{"location":"Certifications-and-Learning/ninja-notes/","text":"Motivation For interviews or to stay sharp on coding practice, I must practice some basic things regularly to ensure I stay sharp. So I will create a ninja file for each language or framework, then practice them regularly, writing the whole file down start to end, so that I reach a stage where I no longer need to refer the original file. Ninja Files Core Foundation - Here the basic syntax, variables, in build functions and basic interview type questions included. OOP specific - OOP concepts, design patterns practice etc Framework Level - Like React, Node, FastAPI, AWS etc Core Foundation Python Javascript C-Sharp OOP Specific Python Javascript Typescript Framework Level Python Javascript","title":"Motivation"},{"location":"Certifications-and-Learning/ninja-notes/#motivation","text":"For interviews or to stay sharp on coding practice, I must practice some basic things regularly to ensure I stay sharp. So I will create a ninja file for each language or framework, then practice them regularly, writing the whole file down start to end, so that I reach a stage where I no longer need to refer the original file.","title":"Motivation"},{"location":"Certifications-and-Learning/ninja-notes/#ninja-files","text":"Core Foundation - Here the basic syntax, variables, in build functions and basic interview type questions included. OOP specific - OOP concepts, design patterns practice etc Framework Level - Like React, Node, FastAPI, AWS etc","title":"Ninja Files"},{"location":"Certifications-and-Learning/ninja-notes/#core-foundation","text":"Python Javascript C-Sharp","title":"Core Foundation"},{"location":"Certifications-and-Learning/ninja-notes/#oop-specific","text":"Python Javascript Typescript","title":"OOP Specific"},{"location":"Certifications-and-Learning/ninja-notes/#framework-level","text":"Python Javascript","title":"Framework Level"},{"location":"Certifications-and-Learning/pmp/","text":"PMP Link --> https://www.youtube.com/watch?v=1gP839Y3sJQ What is project management Application of knoledge, skills, tools and techniques to project activities What is a project A temporary endevour undertaken to create a unique product, service or result. It has beginning and end always! Six Constrains in project magagement Scope Time Cost Quality Risk Resource Project Life Cycle Initiation Planning Execution Monitoring (lot of communication) Closure (what worked, what did not, send resources to other projects etc etc) Project Management Process Map LINK --> https://youtu.be/1gP839Y3sJQ?t=6646 Project Management Process Groups Knowledge Areas Knowledge Areas Project_Integration_Management *_ Project_Scope_Management Project_Time_Management _ Project_Cost_Management _ Project_Quality_Management Project_Human_Resource_Management Project_Communications_Management Project_Risk_Management Project_Procurement_Management Project_Stakeholder_Management Project Management Process Groups Initial Process Group Planning Process Group * Plan_Schedule_Mangement * Define_Activities * Sequenece_Activities * Estimate_Activity_Resources * Estimate_Activity_Durations * Develop_Schedule Executing Process Group Monitoring and Controlling Process Group Control_Schedule Closing Process Group Earned Value Management 2-4 questions In the middle of the project, we need to monitor performance and forecast what will happen, so we used EVM metrics NOTE all Values are in Currency, except for Indexes, which are CPI, SPI and TCPI Simple Explanation - https://youtu.be/0pY4sxQe7sU?list=PLdC3YQR4lNFK6X0Hu8jmcXZo-8UztOPi4&t=317 Detailed Explanation - https://youtu.be/rWo-Aucnozc?list=PLdC3YQR4lNFK6X0Hu8jmcXZo-8UztOPi4&t=146 BAC Budget at completion - Original budget that we thought, let it be $100 PV Planned Value - Gives Cost - At any time, how much % work should have been completed and Multiply it by BAC. Example 10 days to complete, in the 7th day, actual work needed was 7/10. So PV is 0.7*100, ie $70 EV Earned Value - Gives Cost - At any time, actual % work done * BAC. So if actual work done 80%, so EV becomes 0.8*100 ie $80 AC Actual Cost - Cost - Money spent till now. Say it is $60 (Note that in the 7th day, BAC allows to spend $70, common sense, 10 total days, each day $10, so 7th should be $70, but we spent $60; which is cool. Issue is, we must know if we spent $60 and not done work, or $60 done more work. Hence we need to compare it with EV, which is actual work done wrt cost. Hence we move to CV and CPI) Cost Measure 5. CV Cost Variance - EV - AC --> Tells how good we doing, 80-60 = $20 means we saving $20 at that time! CPI Cost Performance Index - EV/AC -> Logical, so 80/60 = 1.3 <-- means we are saving cost! Below 1 is spending more. At 1 is exact. So for every $ spent, we are getting $1.3 worth of work done, which is good. We can also say we are 1.3-1, 0.3 --> 30% under budget (which is good) Time Measure 7. SV Schedule Variance - EV -PV --> 80-70 = $10. CV CPI gave us view in terms of cost, but what about time? Here comes SV. Here $10 tells that our work is ahead of schedule by $10, -ve value means behind the schedule SPI Schedule Performance Index - EV/PV --> 80/70= 1.14. Means we are ahead of schedule! 1 means exactly on schedule and below 1 means LATE! We can say in our case that we are ahead of schedule by 14%, below 1, say 0.9 we will say we are behind schedule by 10% Other Measure 9. EAC Estimate At Completion - BAC/ CPI - 100/1.3 = $ 76.92. This means that considering the current pace and spent, the project will complete in $76.92, which is good as our BAC was $100, so you saving a lot, like $23 which is VAC, which is 23/100 = 23% saving ETC Estimate To Completion - EAC - AC - 76.92-60 = 16.92 --> This means we only need $16.92 more to complete our work. VAC Variance at Completion - BAC - EAC - 100-76.92 = 23 <-- Means we save $23 on our project, we had budget of 100 and our estimates say, if we go by current pace, we will save $23 which is AWESOME! TCPI To-Complete Performance Index - (BAC-EV)/(BAC-AC) - (100-80)/(100-60) = 0.5 <-- This means we only have to put in 50% effort only to finish the project on budget. But if the team starts working at 50%, then we go to on budget. But working at current pace, we are under budget, which will be 76.92, which is EAC. So TCPI should be calculated first! to be sure of how good the team is doing on daily basis. Key Focus Areas Scope - Features, boundaries, budget, deadlines Schedule - Duration, Sequence, Start, End, Sequence Cost - Estimating, allocating, monitoring, action now and later Quality - Process and Activities to meet objectives. Customer and Stakeholder requirement Resource - Carry our task in best manner. People, equipment, funds, facilities, other Stakeholder - Project team, manager, sponsor, customer, users Communication - To decrease probability of risk, among all stakeholders Risk - First identify. Affects project, people, technology, processes, resource, +ve or -ve Procurement - Material and services needed. Need to purchase, rent or contract Critical Success Factors - Scoring based on KPI (learn more, not exact) Deliverables - Has defined scope. Can be one or more. Often items sent externally. Work Breakdown - Divide tasks into smaller components, makes tasks independent and manageble Job roles Project Manager - Owner. Manager of Risk, stakeholder, project communication - 75k 15L salary Senior Project Manager - Planning and coordination of multiple projects - $100k 20L salary Project Lead - Lead the people, motivate people - $80k 12L salary Resource Manager - HR, assigning people - 64k 10L salary Project Management Office Analyst - Analsye data, risks new ways to advance - $100k 4.5L sal Steering Committe Member - Taking feedbacks, providing inputs etc - $68k sal Certifications PMP - Project Management Professional 4 hours ecam and 200 questions $555 fee 3 year validity PMI-ACP - Agile Certfified Practitioner 3 hour 120 questions $495 3 year maintenance CAPM - Certified Associate in Project Management - 3 hour 150 ques $300 3 exam every year CSM - Certified Scrum Master - 60 min 50 question Renew in 2 years Price2 - Projects in Controlled Environments - 60 min + 150 Min 60/68 question $1000 20CPD per year","title":"PMP"},{"location":"Certifications-and-Learning/pmp/#pmp","text":"Link --> https://www.youtube.com/watch?v=1gP839Y3sJQ","title":"PMP"},{"location":"Certifications-and-Learning/pmp/#what-is-project-management","text":"Application of knoledge, skills, tools and techniques to project activities","title":"What is project management"},{"location":"Certifications-and-Learning/pmp/#what-is-a-project","text":"A temporary endevour undertaken to create a unique product, service or result. It has beginning and end always!","title":"What is a project"},{"location":"Certifications-and-Learning/pmp/#six-constrains-in-project-magagement","text":"Scope Time Cost Quality Risk Resource","title":"Six Constrains in project magagement"},{"location":"Certifications-and-Learning/pmp/#project-life-cycle","text":"Initiation Planning Execution Monitoring (lot of communication) Closure (what worked, what did not, send resources to other projects etc etc)","title":"Project Life Cycle"},{"location":"Certifications-and-Learning/pmp/#project-management-process-map","text":"LINK --> https://youtu.be/1gP839Y3sJQ?t=6646 Project Management Process Groups Knowledge Areas","title":"Project Management Process Map"},{"location":"Certifications-and-Learning/pmp/#knowledge-areas","text":"Project_Integration_Management *_ Project_Scope_Management Project_Time_Management _ Project_Cost_Management _ Project_Quality_Management Project_Human_Resource_Management Project_Communications_Management Project_Risk_Management Project_Procurement_Management Project_Stakeholder_Management","title":"Knowledge Areas"},{"location":"Certifications-and-Learning/pmp/#project-management-process-groups","text":"Initial Process Group Planning Process Group * Plan_Schedule_Mangement * Define_Activities * Sequenece_Activities * Estimate_Activity_Resources * Estimate_Activity_Durations * Develop_Schedule Executing Process Group Monitoring and Controlling Process Group Control_Schedule Closing Process Group","title":"Project Management Process Groups"},{"location":"Certifications-and-Learning/pmp/#earned-value-management-2-4-questions","text":"In the middle of the project, we need to monitor performance and forecast what will happen, so we used EVM metrics NOTE all Values are in Currency, except for Indexes, which are CPI, SPI and TCPI Simple Explanation - https://youtu.be/0pY4sxQe7sU?list=PLdC3YQR4lNFK6X0Hu8jmcXZo-8UztOPi4&t=317 Detailed Explanation - https://youtu.be/rWo-Aucnozc?list=PLdC3YQR4lNFK6X0Hu8jmcXZo-8UztOPi4&t=146 BAC Budget at completion - Original budget that we thought, let it be $100 PV Planned Value - Gives Cost - At any time, how much % work should have been completed and Multiply it by BAC. Example 10 days to complete, in the 7th day, actual work needed was 7/10. So PV is 0.7*100, ie $70 EV Earned Value - Gives Cost - At any time, actual % work done * BAC. So if actual work done 80%, so EV becomes 0.8*100 ie $80 AC Actual Cost - Cost - Money spent till now. Say it is $60 (Note that in the 7th day, BAC allows to spend $70, common sense, 10 total days, each day $10, so 7th should be $70, but we spent $60; which is cool. Issue is, we must know if we spent $60 and not done work, or $60 done more work. Hence we need to compare it with EV, which is actual work done wrt cost. Hence we move to CV and CPI) Cost Measure 5. CV Cost Variance - EV - AC --> Tells how good we doing, 80-60 = $20 means we saving $20 at that time! CPI Cost Performance Index - EV/AC -> Logical, so 80/60 = 1.3 <-- means we are saving cost! Below 1 is spending more. At 1 is exact. So for every $ spent, we are getting $1.3 worth of work done, which is good. We can also say we are 1.3-1, 0.3 --> 30% under budget (which is good) Time Measure 7. SV Schedule Variance - EV -PV --> 80-70 = $10. CV CPI gave us view in terms of cost, but what about time? Here comes SV. Here $10 tells that our work is ahead of schedule by $10, -ve value means behind the schedule SPI Schedule Performance Index - EV/PV --> 80/70= 1.14. Means we are ahead of schedule! 1 means exactly on schedule and below 1 means LATE! We can say in our case that we are ahead of schedule by 14%, below 1, say 0.9 we will say we are behind schedule by 10% Other Measure 9. EAC Estimate At Completion - BAC/ CPI - 100/1.3 = $ 76.92. This means that considering the current pace and spent, the project will complete in $76.92, which is good as our BAC was $100, so you saving a lot, like $23 which is VAC, which is 23/100 = 23% saving ETC Estimate To Completion - EAC - AC - 76.92-60 = 16.92 --> This means we only need $16.92 more to complete our work. VAC Variance at Completion - BAC - EAC - 100-76.92 = 23 <-- Means we save $23 on our project, we had budget of 100 and our estimates say, if we go by current pace, we will save $23 which is AWESOME! TCPI To-Complete Performance Index - (BAC-EV)/(BAC-AC) - (100-80)/(100-60) = 0.5 <-- This means we only have to put in 50% effort only to finish the project on budget. But if the team starts working at 50%, then we go to on budget. But working at current pace, we are under budget, which will be 76.92, which is EAC. So TCPI should be calculated first! to be sure of how good the team is doing on daily basis.","title":"Earned Value Management 2-4 questions"},{"location":"Certifications-and-Learning/pmp/#key-focus-areas","text":"Scope - Features, boundaries, budget, deadlines Schedule - Duration, Sequence, Start, End, Sequence Cost - Estimating, allocating, monitoring, action now and later Quality - Process and Activities to meet objectives. Customer and Stakeholder requirement Resource - Carry our task in best manner. People, equipment, funds, facilities, other Stakeholder - Project team, manager, sponsor, customer, users Communication - To decrease probability of risk, among all stakeholders Risk - First identify. Affects project, people, technology, processes, resource, +ve or -ve Procurement - Material and services needed. Need to purchase, rent or contract Critical Success Factors - Scoring based on KPI (learn more, not exact) Deliverables - Has defined scope. Can be one or more. Often items sent externally. Work Breakdown - Divide tasks into smaller components, makes tasks independent and manageble","title":"Key Focus Areas"},{"location":"Certifications-and-Learning/pmp/#job-roles","text":"Project Manager - Owner. Manager of Risk, stakeholder, project communication - 75k 15L salary Senior Project Manager - Planning and coordination of multiple projects - $100k 20L salary Project Lead - Lead the people, motivate people - $80k 12L salary Resource Manager - HR, assigning people - 64k 10L salary Project Management Office Analyst - Analsye data, risks new ways to advance - $100k 4.5L sal Steering Committe Member - Taking feedbacks, providing inputs etc - $68k sal","title":"Job roles"},{"location":"Certifications-and-Learning/pmp/#certifications","text":"PMP - Project Management Professional 4 hours ecam and 200 questions $555 fee 3 year validity PMI-ACP - Agile Certfified Practitioner 3 hour 120 questions $495 3 year maintenance CAPM - Certified Associate in Project Management - 3 hour 150 ques $300 3 exam every year CSM - Certified Scrum Master - 60 min 50 question Renew in 2 years Price2 - Projects in Controlled Environments - 60 min + 150 Min 60/68 question $1000 20CPD per year","title":"Certifications"},{"location":"Certifications-and-Learning/pmp/Control_Schedule/","text":"Control Schedule LINK --> https://youtu.be/1gP839Y3sJQ?t=6368 Process of monitoring the status of project activities to update project progress and manage changes to the schedule baseline to achieve the plan. Inputs Project calendar Work performance data Project management plan Organizational process assets Project schedule schedule data Tools and Techniques Performance reviews Resource Optimization techniques Modeling techniques Schedule compression Leads and Lags Scheduling tool Project management software Output Work Performance information Schedule forecasts Organisational process assets updates change requests Project management plan updates project documents updates","title":"Control Schedule"},{"location":"Certifications-and-Learning/pmp/Control_Schedule/#control-schedule","text":"LINK --> https://youtu.be/1gP839Y3sJQ?t=6368 Process of monitoring the status of project activities to update project progress and manage changes to the schedule baseline to achieve the plan.","title":"Control Schedule"},{"location":"Certifications-and-Learning/pmp/Control_Schedule/#inputs","text":"Project calendar Work performance data Project management plan Organizational process assets Project schedule schedule data","title":"Inputs"},{"location":"Certifications-and-Learning/pmp/Control_Schedule/#tools-and-techniques","text":"Performance reviews Resource Optimization techniques Modeling techniques Schedule compression Leads and Lags Scheduling tool Project management software","title":"Tools and Techniques"},{"location":"Certifications-and-Learning/pmp/Control_Schedule/#output","text":"Work Performance information Schedule forecasts Organisational process assets updates change requests Project management plan updates project documents updates","title":"Output"},{"location":"Certifications-and-Learning/pmp/Critical_Path_Method/","text":"Critical Path Method https://youtu.be/1gP839Y3sJQ?t=5951 Critical path is the longest duration path through a network diagram, which determines the shortest time to complete the project. Float, also called as slack is calculated in a network diagram. Three types of floats/ slack The amount of time that a scheduled activity can be delayed or extended Total Float - without delaying project finish date or schedule constrains Free Float - without delaying any successor start date activity Independent Float - All predecessors finish latest and All successors started earliest. Calculation of Float https://youtu.be/1gP839Y3sJQ?t=6019 Identify the critical path of the network Follow the forward pass to find early start and early finish for each activity Calculate late finish and late start using backward pass method Forward Pass ES - Early Start EF - Early Finish Backward Pass LF - Late Finish LS - Late Start Total Float = LS - ES or Total Flaot = LF - EF Example of critical path --> https://youtu.be/1gP839Y3sJQ?t=6119 Schedule Compression Link - https://youtu.be/1gP839Y3sJQ?t=6211 Techniques and impacts Fast Track - Adds risk, increase management time Crash - Adds costs, increase management time Reduce Scope - Saves time and cost, increase customer dissatisfaction Cut quality - Saves cost and resources, increase risk Resource Reallocation - Does not add cost or increase risk Impact of Schedule Compression LINK - https://youtu.be/1gP839Y3sJQ?t=6261","title":"Critical Path Method"},{"location":"Certifications-and-Learning/pmp/Critical_Path_Method/#critical-path-method","text":"https://youtu.be/1gP839Y3sJQ?t=5951 Critical path is the longest duration path through a network diagram, which determines the shortest time to complete the project. Float, also called as slack is calculated in a network diagram. Three types of floats/ slack The amount of time that a scheduled activity can be delayed or extended Total Float - without delaying project finish date or schedule constrains Free Float - without delaying any successor start date activity Independent Float - All predecessors finish latest and All successors started earliest.","title":"Critical Path Method"},{"location":"Certifications-and-Learning/pmp/Critical_Path_Method/#calculation-of-float","text":"https://youtu.be/1gP839Y3sJQ?t=6019 Identify the critical path of the network Follow the forward pass to find early start and early finish for each activity Calculate late finish and late start using backward pass method","title":"Calculation of Float"},{"location":"Certifications-and-Learning/pmp/Critical_Path_Method/#forward-pass","text":"ES - Early Start EF - Early Finish","title":"Forward Pass"},{"location":"Certifications-and-Learning/pmp/Critical_Path_Method/#backward-pass","text":"LF - Late Finish LS - Late Start Total Float = LS - ES or Total Flaot = LF - EF Example of critical path --> https://youtu.be/1gP839Y3sJQ?t=6119","title":"Backward Pass"},{"location":"Certifications-and-Learning/pmp/Critical_Path_Method/#schedule-compression","text":"Link - https://youtu.be/1gP839Y3sJQ?t=6211","title":"Schedule Compression"},{"location":"Certifications-and-Learning/pmp/Critical_Path_Method/#techniques-and-impacts","text":"Fast Track - Adds risk, increase management time Crash - Adds costs, increase management time Reduce Scope - Saves time and cost, increase customer dissatisfaction Cut quality - Saves cost and resources, increase risk Resource Reallocation - Does not add cost or increase risk","title":"Techniques and impacts"},{"location":"Certifications-and-Learning/pmp/Critical_Path_Method/#impact-of-schedule-compression","text":"LINK - https://youtu.be/1gP839Y3sJQ?t=6261","title":"Impact of Schedule Compression"},{"location":"Certifications-and-Learning/pmp/Define_Activities/","text":"Define Activities https://youtu.be/1gP839Y3sJQ?t=4768 Process of identifying and documenting the specific actions to be perfromed to produice the project deliverables. Inputs Schedule Mangement Plan Scope Baseline Enterprice Environmental factors Organisational process assets Tools and techniques Decomposition Rolling wave planning Export Judgement Outputs Activity List Activity Attributes Milestone List","title":"Define Activities"},{"location":"Certifications-and-Learning/pmp/Define_Activities/#define-activities","text":"https://youtu.be/1gP839Y3sJQ?t=4768 Process of identifying and documenting the specific actions to be perfromed to produice the project deliverables.","title":"Define Activities"},{"location":"Certifications-and-Learning/pmp/Define_Activities/#inputs","text":"Schedule Mangement Plan Scope Baseline Enterprice Environmental factors Organisational process assets","title":"Inputs"},{"location":"Certifications-and-Learning/pmp/Define_Activities/#tools-and-techniques","text":"Decomposition Rolling wave planning Export Judgement","title":"Tools and techniques"},{"location":"Certifications-and-Learning/pmp/Define_Activities/#outputs","text":"Activity List Activity Attributes Milestone List","title":"Outputs"},{"location":"Certifications-and-Learning/pmp/Develop_Schedule/","text":"Develop Schedule https://youtu.be/1gP839Y3sJQ?t=5506 Process of analyzing the activity sequence, duration, resource requirements ad schedule constraints to create the project schedule model. Inputs Risk Register Project Scope Statement Project Staff Assignments Resource Calendars Organisational Process Assets Enterprise Environmental factors Schedule management plan activity list activity attributes project schedule diagrams activity resource requirements resource breakdown structure activity duration estimates Tools and techniques Schedule Network Analysis Critical Path Method Critical Chain methods Modeling Techniques Resource Optimisation Techniques Leads and Lags Schedule compression Scheduling tool Outputs Project Schedule Schedule Baseline Schedule data Project calendars Project management plan updates Project documents updates","title":"Develop Schedule"},{"location":"Certifications-and-Learning/pmp/Develop_Schedule/#develop-schedule","text":"https://youtu.be/1gP839Y3sJQ?t=5506 Process of analyzing the activity sequence, duration, resource requirements ad schedule constraints to create the project schedule model.","title":"Develop Schedule"},{"location":"Certifications-and-Learning/pmp/Develop_Schedule/#inputs","text":"Risk Register Project Scope Statement Project Staff Assignments Resource Calendars Organisational Process Assets Enterprise Environmental factors Schedule management plan activity list activity attributes project schedule diagrams activity resource requirements resource breakdown structure activity duration estimates","title":"Inputs"},{"location":"Certifications-and-Learning/pmp/Develop_Schedule/#tools-and-techniques","text":"Schedule Network Analysis Critical Path Method Critical Chain methods Modeling Techniques Resource Optimisation Techniques Leads and Lags Schedule compression Scheduling tool","title":"Tools and techniques"},{"location":"Certifications-and-Learning/pmp/Develop_Schedule/#outputs","text":"Project Schedule Schedule Baseline Schedule data Project calendars Project management plan updates Project documents updates","title":"Outputs"},{"location":"Certifications-and-Learning/pmp/Estimate_Activity_Durations/","text":"Estimate Activity Duration https://youtu.be/1gP839Y3sJQ?t=5286 Process of estimating the number of work periods needed to complete individual activities with estimated resources. Key benefit is that it provides the amount of time each activity ill take to complete, which is a major input to the develop schedule process. Inputs Schedule Management plan Activity list activity attributes Resource Breakdown Structure Activity resource requirements Resource calendars Risk Register Project Scope statement Enterprise Environmental factors Organizational Process assets Tools and techniques Expert Judgment Three-point estimating (Program Evaluation and Reviewing Technique) Reserve Analysis (Provides buffer to complete activities) Analogous estimating Parametric estimating Outputs Activity duration estimates Project documents updates","title":"Estimate Activity Duration"},{"location":"Certifications-and-Learning/pmp/Estimate_Activity_Durations/#estimate-activity-duration","text":"https://youtu.be/1gP839Y3sJQ?t=5286 Process of estimating the number of work periods needed to complete individual activities with estimated resources. Key benefit is that it provides the amount of time each activity ill take to complete, which is a major input to the develop schedule process.","title":"Estimate Activity Duration"},{"location":"Certifications-and-Learning/pmp/Estimate_Activity_Durations/#inputs","text":"Schedule Management plan Activity list activity attributes Resource Breakdown Structure Activity resource requirements Resource calendars Risk Register Project Scope statement Enterprise Environmental factors Organizational Process assets","title":"Inputs"},{"location":"Certifications-and-Learning/pmp/Estimate_Activity_Durations/#tools-and-techniques","text":"Expert Judgment Three-point estimating (Program Evaluation and Reviewing Technique) Reserve Analysis (Provides buffer to complete activities) Analogous estimating Parametric estimating","title":"Tools and techniques"},{"location":"Certifications-and-Learning/pmp/Estimate_Activity_Durations/#outputs","text":"Activity duration estimates Project documents updates","title":"Outputs"},{"location":"Certifications-and-Learning/pmp/Estimate_Activity_Resources/","text":"Estimating Activity Resources https://youtu.be/1gP839Y3sJQ?t=4969 Process of esitmating the type and quantities of material, human resource, equipment or suplies required to perform each activity. Inputs Schedule management plan Activity List Activity Attributes Risk Register Activity Cost Estimates Resource Calendars Enterprise Environmental Factors Organisational Process Assets Tools and techniques Expert Judegement Alternative Analysis Published estimating data Bottom-up estimating Project Mangement Software Outputs Activity Resource Requirements Resource Breakdown Structure Projects Documents Update","title":"Estimating Activity Resources"},{"location":"Certifications-and-Learning/pmp/Estimate_Activity_Resources/#estimating-activity-resources","text":"https://youtu.be/1gP839Y3sJQ?t=4969 Process of esitmating the type and quantities of material, human resource, equipment or suplies required to perform each activity.","title":"Estimating Activity Resources"},{"location":"Certifications-and-Learning/pmp/Estimate_Activity_Resources/#inputs","text":"Schedule management plan Activity List Activity Attributes Risk Register Activity Cost Estimates Resource Calendars Enterprise Environmental Factors Organisational Process Assets","title":"Inputs"},{"location":"Certifications-and-Learning/pmp/Estimate_Activity_Resources/#tools-and-techniques","text":"Expert Judegement Alternative Analysis Published estimating data Bottom-up estimating Project Mangement Software","title":"Tools and techniques"},{"location":"Certifications-and-Learning/pmp/Estimate_Activity_Resources/#outputs","text":"Activity Resource Requirements Resource Breakdown Structure Projects Documents Update","title":"Outputs"},{"location":"Certifications-and-Learning/pmp/Plan_Schedule_Mangement/","text":"Project Schedule Mangement https://youtu.be/1gP839Y3sJQ?t=4659 Process of establishing the policies, procedures and documentation for planning, developing, managing, executing and controlling the project schedule. Inputs Project management plan Project Charter Enterprise environmental factors Organizational process assets Tools and techniques Expert judgement Meetings Analytic techniques Rolling Wave plan What if scenarios Leveling, Fast tracking and crashing Outputs Schedule management plan","title":"Project Schedule Mangement"},{"location":"Certifications-and-Learning/pmp/Plan_Schedule_Mangement/#project-schedule-mangement","text":"https://youtu.be/1gP839Y3sJQ?t=4659 Process of establishing the policies, procedures and documentation for planning, developing, managing, executing and controlling the project schedule.","title":"Project Schedule Mangement"},{"location":"Certifications-and-Learning/pmp/Plan_Schedule_Mangement/#inputs","text":"Project management plan Project Charter Enterprise environmental factors Organizational process assets","title":"Inputs"},{"location":"Certifications-and-Learning/pmp/Plan_Schedule_Mangement/#tools-and-techniques","text":"Expert judgement Meetings Analytic techniques Rolling Wave plan What if scenarios Leveling, Fast tracking and crashing","title":"Tools and techniques"},{"location":"Certifications-and-Learning/pmp/Plan_Schedule_Mangement/#outputs","text":"Schedule management plan","title":"Outputs"},{"location":"Certifications-and-Learning/pmp/Planning/","text":"Project Planning Summary Link --> https://youtu.be/1gP839Y3sJQ?t=6586 Define Objectives Explaining the scope Scheduling Tasks Generating Progress Reports Fundamentals Determine scope, cost and resources Identifications of Problems Stakeholder's Identification Define project objectives Why Reduce cost and time Increase employee satisfaction Improve quality assurance Reduce project risks Tools Gantt Charts CPM - Critical Path Method PERT Chart WBS - Work Breakdown Structure Project Documentation Steps in project planning Identify and meet stakeholder Define Scope Set and Prioritize objectives Determine Deliverables Create Project Schedule Risk Analysis Set progress reporting guidelines PMBOK - Project Management Book of Knowledge What How Who When Excel Project Reviw Template Budget Template Sprint Project Tracker Project Tracker Project Schedule Tracker Project Status Report Milestone Tracker Project Planner Project Time Management Also Schedule Management Plan Key activities Identify Activities Estimating Time and Resources Sequencing Activities Key Terms Leads and Lags Rolling Wave Planning - near goals are detailed, far goals have high level view only Analogous Estimating - estimations based on previous projects or activities Parametric Estimating - Mathematical model to calculate projected times Effort - Total amount of work required to complete activity Duration - Time required to complete an activity Project Schedule Duration, start and end Microsoft Project used most often Gantt Chart Network Diagram https://youtu.be/1gP839Y3sJQ?t=4310 PDM - Precedence Diagramming Model OR AON - Activity on Node Box are activities, arrow dependencies, four types of relationships ADM - Arrow Diagramming Model or AOA Activity on Arrow Arrows are activities, direction indicate relation and sequence, only 1 relationship Example of network diagram - https://youtu.be/1gP839Y3sJQ?t=4374 Schedule Network Analysis https://youtu.be/1gP839Y3sJQ?t=5717 Critical Path Method Critical Chain Method What-if Scenario Analysis Resource Optimization Techniques Monte Carlo Analysis PERT --> Program Evaluation and Review Technique https://youtu.be/1gP839Y3sJQ?t=5797 Uses three point estimate for the duration an activity will take P - Pessimistic - worst case scenario M - Most Likely - realistic scenario O - Optimistic - best case scenario Expect concept based questions, hence note the FORMULA, see the link above An example of PERT --> https://youtu.be/1gP839Y3sJQ?t=5879","title":"Project Planning"},{"location":"Certifications-and-Learning/pmp/Planning/#project-planning","text":"Summary Link --> https://youtu.be/1gP839Y3sJQ?t=6586 Define Objectives Explaining the scope Scheduling Tasks Generating Progress Reports","title":"Project Planning"},{"location":"Certifications-and-Learning/pmp/Planning/#fundamentals","text":"Determine scope, cost and resources Identifications of Problems Stakeholder's Identification Define project objectives","title":"Fundamentals"},{"location":"Certifications-and-Learning/pmp/Planning/#why","text":"Reduce cost and time Increase employee satisfaction Improve quality assurance Reduce project risks","title":"Why"},{"location":"Certifications-and-Learning/pmp/Planning/#tools","text":"Gantt Charts CPM - Critical Path Method PERT Chart WBS - Work Breakdown Structure Project Documentation","title":"Tools"},{"location":"Certifications-and-Learning/pmp/Planning/#steps-in-project-planning","text":"Identify and meet stakeholder Define Scope Set and Prioritize objectives Determine Deliverables Create Project Schedule Risk Analysis Set progress reporting guidelines","title":"Steps in project planning"},{"location":"Certifications-and-Learning/pmp/Planning/#pmbok-project-management-book-of-knowledge","text":"What How Who When","title":"PMBOK - Project Management Book of Knowledge"},{"location":"Certifications-and-Learning/pmp/Planning/#excel","text":"Project Reviw Template Budget Template Sprint Project Tracker Project Tracker Project Schedule Tracker Project Status Report Milestone Tracker Project Planner","title":"Excel"},{"location":"Certifications-and-Learning/pmp/Planning/#project-time-management","text":"Also Schedule Management Plan","title":"Project Time Management"},{"location":"Certifications-and-Learning/pmp/Planning/#key-activities","text":"Identify Activities Estimating Time and Resources Sequencing Activities","title":"Key activities"},{"location":"Certifications-and-Learning/pmp/Planning/#key-terms","text":"Leads and Lags Rolling Wave Planning - near goals are detailed, far goals have high level view only Analogous Estimating - estimations based on previous projects or activities Parametric Estimating - Mathematical model to calculate projected times Effort - Total amount of work required to complete activity Duration - Time required to complete an activity","title":"Key Terms"},{"location":"Certifications-and-Learning/pmp/Planning/#project-schedule","text":"Duration, start and end Microsoft Project used most often Gantt Chart Network Diagram https://youtu.be/1gP839Y3sJQ?t=4310 PDM - Precedence Diagramming Model OR AON - Activity on Node Box are activities, arrow dependencies, four types of relationships ADM - Arrow Diagramming Model or AOA Activity on Arrow Arrows are activities, direction indicate relation and sequence, only 1 relationship Example of network diagram - https://youtu.be/1gP839Y3sJQ?t=4374","title":"Project Schedule"},{"location":"Certifications-and-Learning/pmp/Planning/#schedule-network-analysis","text":"https://youtu.be/1gP839Y3sJQ?t=5717 Critical Path Method Critical Chain Method What-if Scenario Analysis Resource Optimization Techniques Monte Carlo Analysis","title":"Schedule Network Analysis"},{"location":"Certifications-and-Learning/pmp/Planning/#pert-program-evaluation-and-review-technique","text":"https://youtu.be/1gP839Y3sJQ?t=5797 Uses three point estimate for the duration an activity will take P - Pessimistic - worst case scenario M - Most Likely - realistic scenario O - Optimistic - best case scenario Expect concept based questions, hence note the FORMULA, see the link above An example of PERT --> https://youtu.be/1gP839Y3sJQ?t=5879","title":"PERT --&gt; Program Evaluation and Review Technique"},{"location":"Certifications-and-Learning/pmp/Project_Cost_Management/","text":"Project Cost Management LINK - https://youtu.be/1gP839Y3sJQ?t=6663 Concepts Cost Management Plan Control Account Processes Link - https://youtu.be/1gP839Y3sJQ?t=6802 Plan Cost Management Expert Judgement Data analysis Meetings Estimate Costs Expert Judgment Analogous Estimating Parametric Estimating Bottom-Up Estimating Three-Point Estimating Data Analysis PMIS - Project Management Information System Decision Making Determine Budget Expert Judgment Historical Information Review Data Analysis Cost Aggregation Funding Limit Reconciliation Financing Control Costs Expert Judgement Data Analysis TCPI To-Complete Performance Index PMIS - Project Management Information System Types of costs https://youtu.be/vzqDTSZOTic?t=21160 Fixed Cost Variable Cost Direct Cost Indirect Cost Sunk Cost","title":"Project Cost Management"},{"location":"Certifications-and-Learning/pmp/Project_Cost_Management/#project-cost-management","text":"LINK - https://youtu.be/1gP839Y3sJQ?t=6663","title":"Project Cost Management"},{"location":"Certifications-and-Learning/pmp/Project_Cost_Management/#concepts","text":"Cost Management Plan Control Account","title":"Concepts"},{"location":"Certifications-and-Learning/pmp/Project_Cost_Management/#processes","text":"Link - https://youtu.be/1gP839Y3sJQ?t=6802 Plan Cost Management Expert Judgement Data analysis Meetings Estimate Costs Expert Judgment Analogous Estimating Parametric Estimating Bottom-Up Estimating Three-Point Estimating Data Analysis PMIS - Project Management Information System Decision Making Determine Budget Expert Judgment Historical Information Review Data Analysis Cost Aggregation Funding Limit Reconciliation Financing Control Costs Expert Judgement Data Analysis TCPI To-Complete Performance Index PMIS - Project Management Information System","title":"Processes"},{"location":"Certifications-and-Learning/pmp/Project_Cost_Management/#types-of-costs","text":"https://youtu.be/vzqDTSZOTic?t=21160 Fixed Cost Variable Cost Direct Cost Indirect Cost Sunk Cost","title":"Types of costs"},{"location":"Certifications-and-Learning/pmp/Project_Quality_Management/","text":"Project Quality Management https://youtu.be/vzqDTSZOTic?t=21972","title":"Project Quality Management"},{"location":"Certifications-and-Learning/pmp/Project_Quality_Management/#project-quality-management","text":"https://youtu.be/vzqDTSZOTic?t=21972","title":"Project Quality Management"},{"location":"Certifications-and-Learning/pmp/Project_Scope_Management/","text":"Project Scope Management https://youtu.be/vzqDTSZOTic?t=16226 Scope Management Product Scope Project Scope Tailoring considerations Knowledge and Requirement Management Validation and Control Development Approach Stability of Requirements Governance Product Scope Project Scope Scope Management Process Plan Scope Management <-- We Get Scope Management Plan, Requirement Management Plan A Project Charter B Project Management Plan C Organizational Process Assets D Enterprise Environmental Factor Collect Requirements <-- we get Requirements Documentation, Requirement Traceability Matrix A, B, D E Project Documents F Business Documents G Agreements H Organizational Process Assets Define Scope <-- Project Scope Statement, Project Documents Updates A B E D H Create WBS (here decomposition technique used) <-- B E D H Validate Scope Control Scope","title":"Project Scope Management"},{"location":"Certifications-and-Learning/pmp/Project_Scope_Management/#project-scope-management","text":"https://youtu.be/vzqDTSZOTic?t=16226","title":"Project Scope Management"},{"location":"Certifications-and-Learning/pmp/Project_Scope_Management/#scope-management","text":"Product Scope Project Scope","title":"Scope Management"},{"location":"Certifications-and-Learning/pmp/Project_Scope_Management/#tailoring-considerations","text":"Knowledge and Requirement Management Validation and Control Development Approach Stability of Requirements Governance","title":"Tailoring considerations"},{"location":"Certifications-and-Learning/pmp/Project_Scope_Management/#product-scope","text":"","title":"Product Scope"},{"location":"Certifications-and-Learning/pmp/Project_Scope_Management/#project-scope","text":"","title":"Project Scope"},{"location":"Certifications-and-Learning/pmp/Project_Scope_Management/#scope-management-process","text":"Plan Scope Management <-- We Get Scope Management Plan, Requirement Management Plan A Project Charter B Project Management Plan C Organizational Process Assets D Enterprise Environmental Factor Collect Requirements <-- we get Requirements Documentation, Requirement Traceability Matrix A, B, D E Project Documents F Business Documents G Agreements H Organizational Process Assets Define Scope <-- Project Scope Statement, Project Documents Updates A B E D H Create WBS (here decomposition technique used) <-- B E D H Validate Scope Control Scope","title":"Scope Management Process"},{"location":"Certifications-and-Learning/pmp/Sequenece_Activities/","text":"Sequence Activities https://youtu.be/1gP839Y3sJQ?t=4870 Process of identifying and documenting relationship among project activities. Inputs Activiy List Activity Attributes Milestone List Schedule Mangement Plan Project Scope Statement Organisational Process Asset Enterprise Environmental Factors Tools and techniques PDM - Precedence Diagramming Method Dependency Determination Leads and Lags Outputs Project Documents updates","title":"Sequence Activities"},{"location":"Certifications-and-Learning/pmp/Sequenece_Activities/#sequence-activities","text":"https://youtu.be/1gP839Y3sJQ?t=4870 Process of identifying and documenting relationship among project activities.","title":"Sequence Activities"},{"location":"Certifications-and-Learning/pmp/Sequenece_Activities/#inputs","text":"Activiy List Activity Attributes Milestone List Schedule Mangement Plan Project Scope Statement Organisational Process Asset Enterprise Environmental Factors","title":"Inputs"},{"location":"Certifications-and-Learning/pmp/Sequenece_Activities/#tools-and-techniques","text":"PDM - Precedence Diagramming Method Dependency Determination Leads and Lags","title":"Tools and techniques"},{"location":"Certifications-and-Learning/pmp/Sequenece_Activities/#outputs","text":"Project Documents updates","title":"Outputs"},{"location":"Certifications-and-Learning/pmp/asdasads/","text":"_PMP Link_-->_https://www.youtube.com/watch?v=1gP839Y3sJQ _What_is_project_management Application_of_knoledge,_skills,_tools_and_techniques_to_project_activities _What_is_a_project A_temporary_endevour_undertaken_to_create_a_unique_product,_service_or_result._It_has_beginning_and_end_always! _Six_Constrains_in_project_magagement Scope Time Cost Quality Risk_ Resource _Project_Life_Cycle Initiation Planning Execution Monitoring_(lot_of_communication) Closure_(what_worked,_what_did_not,_send_resources_to_other_projects_etc_etc) _Project_Management_Process_Map LINK_-->_https://youtu.be/1gP839Y3sJQ?t=6646 1._Project_Management_Process_Groups 2._Knowledge_Areas _Knowledge_Areas _Project_Integration_Management Project_Scope_Management _Project_Time_Management Project_Cost_Management _ Project_Quality_Management _Project_Human_Resource_Management _Project_Communications_Management _Project_Risk_Management _Project_Procurement_Management _Project_Stakeholder_Management _Project_Management_Process_Groups Initial_Process_Group Planning_Process_Group _ Plan_Schedule_Mangement Define_Activities _ Sequenece_Activities Estimate_Activity_Resources _ Estimate_Activity_Durations _ Develop_Schedule Executing_Process_Group Monitoring_and_Controlling_Process_Group ____ Control_Schedule Closing_Process_Group _Earned_Value_Management_2-4_questions In_the_middle_of_the_project,_we_need_to_monitor_performance_and_forecast_what_will_happen,_so_we_used_EVM_metrics NOTE_all_Values_are_in_Currency,_except_for_Indexes,_which_are_CPI,_SPI_and_TCPI Simple_Explanation_- https://youtu.be/0pY4sxQe7sU?list=PLdC3YQR4lNFK6X0Hu8jmcXZo-8UztOPi4&t=317 Detailed_Explanation -_https://youtu.be/rWo-Aucnozc?list=PLdC3YQR4lNFK6X0Hu8jmcXZo-8UztOPi4&t=146 1. BAC_Budget_at_completion - Original_budget_that_we_thought,_let_it_be $100 2. PV_Planned_Value - Gives_Cost - At_any_time,_how_much % work_should_have_been_completed_and_Multiply_it_by_BAC._Example_10_days_to_complete,_in_the_7th_day,_actual_work_needed_was_7/10._So_PV_is_0.7*100,_ie $70 3. EV_Earned_Value - Gives_Cost - At_any_time,_actual % work_done _BAC._So_if_actual_work_done_80%,_so_EV_becomes_0.8 100_ie_$80 4. AC_Actual_Cost - Cost - Money_spent_till_now._Say_it_is $60_(Note_that_in_the_7th_day, BAC_allows_to_spend $70, common_sense,_10_total_days,_each_day $10, so_7th_should_be $70, but_we_spent $60; which_is_cool._Issue_is,_we_must_know_if_we_spent $60_and_not_done_work, or $60_done_more_work._Hence_we_need_to_compare_it_with_EV,_which_is_actual_work_done_wrt_cost._Hence_we_move_to_CV_and_CPI) Cost_Measure 5. CV_Cost_Variance - EV - AC --> Tells_how_good_we_doing,_80-60 = $20_means_we_saving $20_at_that_time! 6. CPI_Cost_Performance_Index - EV/AC -> Logical,_so_80/60 = 1.3 <-- means_we_are_saving_cost!_Below_1_is_spending_more._At_1_is_exact._So_for_every $ spent,_we_are_getting $1.3_worth_of_work_done, which_is_good._We_can_also_say_we_are_1.3-1,_0.3 --> 30%_under_budget (which_is_good) Time_Measure 7. SV_Schedule_Variance - EV -PV_--> 80-70 = $10._CV_CPI_gave_us_view_in_terms_of_cost,_but_what_about_time?_Here_comes_SV._Here $10_tells_that_our_work_is_ahead_of_schedule_by_$10,_-ve_value_means_behind_the_schedule 8. SPI_Schedule_Performance_Index - EV/PV -->_80/70=_1.14._Means_we_are_ahead_of_schedule!_1_means_exactly_on_schedule_and_below_1_means_LATE!_We_can_say_in_our_case_that_we_are_ahead_of_schedule_by_14%,_below_1,_say_0.9_we_will_say_we_are_behind_schedule_by_10% Other_Measure 9. EAC_Estimate_At_Completion - BAC/_CPI - 100/1.3 = $_76.92._This_means_that_considering_the_current_pace_and_spent,_the_project_will_complete_in $76.92, which_is_good_as_our_BAC_was $100, so_you_saving_a_lot,_like $23_which_is_VAC, which_is_23/100 = 23%_saving 10. ETC_Estimate_To_Completion - EAC - AC - 76.92-60 = 16.92 --> This_means_we_only_need $16.92_more_to_complete_our_work. 11. VAC_Variance_at_Completion - BAC - EAC - 100-76.92 = 23 <-- Means_we_save $23_on_our_project, we_had_budget_of_100_and_our_estimates_say,_if_we_go_by_current_pace,_we_will_save $23_which_is_AWESOME! 12. TCPI_To-Complete_Performance_Index - (BAC-EV)/(BAC-AC) - (100-80)/(100-60) = 0.5 <--_This_means_we_only_have_to_put_in_50%_effort_only_to_finish_the_project_on_budget._But_if_the_team_starts_working_at_50%,_then_we_go_to_on_budget._But_working_at_current_pace,_we_are_under_budget,_which_will_be_76.92,_which_is_EAC._So_TCPI_should_be_calculated_first!_to_be_sure_of_how_good_the_team_is_doing_on_daily_basis. _Key_Focus_Areas Scope_- Features,_boundaries,_budget,_deadlines Schedule - Duration,_Sequence,_Start,_End,_Sequence Cost - Estimating,_allocating,_monitoring,_action_now_and_later Quality - Process_and_Activities_to_meet_objectives._Customer_and_Stakeholder_requirement Resource_- Carry_our_task_in_best_manner._People,_equipment,_funds,_facilities,_other Stakeholder - Project_team,_manager,_sponsor,_customer,_users Communication - To_decrease_probability_of_risk,_among_all_stakeholders Risk - First_identify._Affects_project,_people,_technology,_processes,_resource, +ve_or_-ve Procurement_- Material_and_services_needed._Need_to_purchase,_rent_or_contract Critical_Success_Factors - Scoring_based_on_KPI (learn_more, not_exact) Deliverables - Has_defined_scope._Can_be_one_or_more._Often_items_sent_externally. Work_Breakdown -_Divide_tasks_into_smaller_components,_makes_tasks_independent_and_manageble _Job_roles Project_Manager_- Owner._Manager_of_Risk,_stakeholder,_project_communication - 75k_15L_salary Senior_Project_Manager - Planning_and_coordination_of_multiple_projects - $100k_20L_salary Project_Lead - Lead_the_people,_motivate_people - $80k_12L_salary Resource_Manager - HR,_assigning_people - 64k_10L_salary Project_Management_Office_Analyst - Analsye_data,_risks_new_ways_to_advance - $100k_4.5L_sal Steering_Committe_Member - Taking_feedbacks,_providing_inputs_etc -_$68k_sal _Certifications PMP_- Project_Management_Professional_4_hours_ecam_and_200_questions $555_fee_3_year_validity PMI-ACP_- Agile_Certfified_Practitioner_3_hour_120_questions $495_3_year_maintenance CAPM_- Certified_Associate_in_Project_Management - 3_hour_150_ques $300_3_exam_every_year CSM_- Certified_Scrum_Master - 60_min_50_question_Renew_in_2_years Price2 - Projects_in_Controlled_Environments - 60_min + 150_Min_60/68_question $1000_20CPD_per_year","title":"Index"},{"location":"Certifications-and-Learning/pmp/asdasads/#_pmp","text":"Link_-->_https://www.youtube.com/watch?v=1gP839Y3sJQ","title":"_PMP"},{"location":"Certifications-and-Learning/pmp/asdasads/#_what_is_project_management","text":"Application_of_knoledge,_skills,_tools_and_techniques_to_project_activities","title":"_What_is_project_management"},{"location":"Certifications-and-Learning/pmp/asdasads/#_what_is_a_project","text":"A_temporary_endevour_undertaken_to_create_a_unique_product,_service_or_result._It_has_beginning_and_end_always!","title":"_What_is_a_project"},{"location":"Certifications-and-Learning/pmp/asdasads/#_six_constrains_in_project_magagement","text":"Scope Time Cost Quality Risk_ Resource","title":"_Six_Constrains_in_project_magagement"},{"location":"Certifications-and-Learning/pmp/asdasads/#_project_life_cycle","text":"Initiation Planning Execution Monitoring_(lot_of_communication) Closure_(what_worked,_what_did_not,_send_resources_to_other_projects_etc_etc)","title":"_Project_Life_Cycle"},{"location":"Certifications-and-Learning/pmp/asdasads/#_project_management_process_map","text":"LINK_-->_https://youtu.be/1gP839Y3sJQ?t=6646 1._Project_Management_Process_Groups 2._Knowledge_Areas","title":"_Project_Management_Process_Map"},{"location":"Certifications-and-Learning/pmp/asdasads/#_knowledge_areas","text":"_Project_Integration_Management Project_Scope_Management _Project_Time_Management Project_Cost_Management _ Project_Quality_Management _Project_Human_Resource_Management _Project_Communications_Management _Project_Risk_Management _Project_Procurement_Management _Project_Stakeholder_Management","title":"_Knowledge_Areas"},{"location":"Certifications-and-Learning/pmp/asdasads/#_project_management_process_groups","text":"Initial_Process_Group Planning_Process_Group _ Plan_Schedule_Mangement Define_Activities _ Sequenece_Activities Estimate_Activity_Resources _ Estimate_Activity_Durations _ Develop_Schedule Executing_Process_Group Monitoring_and_Controlling_Process_Group ____ Control_Schedule Closing_Process_Group","title":"_Project_Management_Process_Groups"},{"location":"Certifications-and-Learning/pmp/asdasads/#_earned_value_management_2-4_questions","text":"In_the_middle_of_the_project,_we_need_to_monitor_performance_and_forecast_what_will_happen,_so_we_used_EVM_metrics NOTE_all_Values_are_in_Currency,_except_for_Indexes,_which_are_CPI,_SPI_and_TCPI Simple_Explanation_- https://youtu.be/0pY4sxQe7sU?list=PLdC3YQR4lNFK6X0Hu8jmcXZo-8UztOPi4&t=317 Detailed_Explanation -_https://youtu.be/rWo-Aucnozc?list=PLdC3YQR4lNFK6X0Hu8jmcXZo-8UztOPi4&t=146 1. BAC_Budget_at_completion - Original_budget_that_we_thought,_let_it_be $100 2. PV_Planned_Value - Gives_Cost - At_any_time,_how_much % work_should_have_been_completed_and_Multiply_it_by_BAC._Example_10_days_to_complete,_in_the_7th_day,_actual_work_needed_was_7/10._So_PV_is_0.7*100,_ie $70 3. EV_Earned_Value - Gives_Cost - At_any_time,_actual % work_done _BAC._So_if_actual_work_done_80%,_so_EV_becomes_0.8 100_ie_$80 4. AC_Actual_Cost - Cost - Money_spent_till_now._Say_it_is $60_(Note_that_in_the_7th_day, BAC_allows_to_spend $70, common_sense,_10_total_days,_each_day $10, so_7th_should_be $70, but_we_spent $60; which_is_cool._Issue_is,_we_must_know_if_we_spent $60_and_not_done_work, or $60_done_more_work._Hence_we_need_to_compare_it_with_EV,_which_is_actual_work_done_wrt_cost._Hence_we_move_to_CV_and_CPI) Cost_Measure 5. CV_Cost_Variance - EV - AC --> Tells_how_good_we_doing,_80-60 = $20_means_we_saving $20_at_that_time! 6. CPI_Cost_Performance_Index - EV/AC -> Logical,_so_80/60 = 1.3 <-- means_we_are_saving_cost!_Below_1_is_spending_more._At_1_is_exact._So_for_every $ spent,_we_are_getting $1.3_worth_of_work_done, which_is_good._We_can_also_say_we_are_1.3-1,_0.3 --> 30%_under_budget (which_is_good) Time_Measure 7. SV_Schedule_Variance - EV -PV_--> 80-70 = $10._CV_CPI_gave_us_view_in_terms_of_cost,_but_what_about_time?_Here_comes_SV._Here $10_tells_that_our_work_is_ahead_of_schedule_by_$10,_-ve_value_means_behind_the_schedule 8. SPI_Schedule_Performance_Index - EV/PV -->_80/70=_1.14._Means_we_are_ahead_of_schedule!_1_means_exactly_on_schedule_and_below_1_means_LATE!_We_can_say_in_our_case_that_we_are_ahead_of_schedule_by_14%,_below_1,_say_0.9_we_will_say_we_are_behind_schedule_by_10% Other_Measure 9. EAC_Estimate_At_Completion - BAC/_CPI - 100/1.3 = $_76.92._This_means_that_considering_the_current_pace_and_spent,_the_project_will_complete_in $76.92, which_is_good_as_our_BAC_was $100, so_you_saving_a_lot,_like $23_which_is_VAC, which_is_23/100 = 23%_saving 10. ETC_Estimate_To_Completion - EAC - AC - 76.92-60 = 16.92 --> This_means_we_only_need $16.92_more_to_complete_our_work. 11. VAC_Variance_at_Completion - BAC - EAC - 100-76.92 = 23 <-- Means_we_save $23_on_our_project, we_had_budget_of_100_and_our_estimates_say,_if_we_go_by_current_pace,_we_will_save $23_which_is_AWESOME! 12. TCPI_To-Complete_Performance_Index - (BAC-EV)/(BAC-AC) - (100-80)/(100-60) = 0.5 <--_This_means_we_only_have_to_put_in_50%_effort_only_to_finish_the_project_on_budget._But_if_the_team_starts_working_at_50%,_then_we_go_to_on_budget._But_working_at_current_pace,_we_are_under_budget,_which_will_be_76.92,_which_is_EAC._So_TCPI_should_be_calculated_first!_to_be_sure_of_how_good_the_team_is_doing_on_daily_basis.","title":"_Earned_Value_Management_2-4_questions"},{"location":"Certifications-and-Learning/pmp/asdasads/#_key_focus_areas","text":"Scope_- Features,_boundaries,_budget,_deadlines Schedule - Duration,_Sequence,_Start,_End,_Sequence Cost - Estimating,_allocating,_monitoring,_action_now_and_later Quality - Process_and_Activities_to_meet_objectives._Customer_and_Stakeholder_requirement Resource_- Carry_our_task_in_best_manner._People,_equipment,_funds,_facilities,_other Stakeholder - Project_team,_manager,_sponsor,_customer,_users Communication - To_decrease_probability_of_risk,_among_all_stakeholders Risk - First_identify._Affects_project,_people,_technology,_processes,_resource, +ve_or_-ve Procurement_- Material_and_services_needed._Need_to_purchase,_rent_or_contract Critical_Success_Factors - Scoring_based_on_KPI (learn_more, not_exact) Deliverables - Has_defined_scope._Can_be_one_or_more._Often_items_sent_externally. Work_Breakdown -_Divide_tasks_into_smaller_components,_makes_tasks_independent_and_manageble","title":"_Key_Focus_Areas"},{"location":"Certifications-and-Learning/pmp/asdasads/#_job_roles","text":"Project_Manager_- Owner._Manager_of_Risk,_stakeholder,_project_communication - 75k_15L_salary Senior_Project_Manager - Planning_and_coordination_of_multiple_projects - $100k_20L_salary Project_Lead - Lead_the_people,_motivate_people - $80k_12L_salary Resource_Manager - HR,_assigning_people - 64k_10L_salary Project_Management_Office_Analyst - Analsye_data,_risks_new_ways_to_advance - $100k_4.5L_sal Steering_Committe_Member - Taking_feedbacks,_providing_inputs_etc -_$68k_sal","title":"_Job_roles"},{"location":"Certifications-and-Learning/pmp/asdasads/#_certifications","text":"PMP_- Project_Management_Professional_4_hours_ecam_and_200_questions $555_fee_3_year_validity PMI-ACP_- Agile_Certfified_Practitioner_3_hour_120_questions $495_3_year_maintenance CAPM_- Certified_Associate_in_Project_Management - 3_hour_150_ques $300_3_exam_every_year CSM_- Certified_Scrum_Master - 60_min_50_question_Renew_in_2_years Price2 - Projects_in_Controlled_Environments - 60_min + 150_Min_60/68_question $1000_20CPD_per_year","title":"_Certifications"},{"location":"Certifications-and-Learning/pmp/asdasads/Control_Schedule/","text":"_Control_Schedule LINK_-->_https://youtu.be/1gP839Y3sJQ?t=6368 Process_of_monitoring_the_status_of_project_activities_to_update_project_progress_and_manage_changes_to_the_schedule_baseline_to_achieve_the_plan. _Inputs Project_calendar Work_performance_data Project_management_plan Organizational_process_assets Project_schedule schedule_data _Tools_and_Techniques Performance_reviews Resource_Optimization_techniques Modeling_techniques Schedule_compression Leads_and_Lags Scheduling_tool Project_management_software _Output Work_Performance_information Schedule_forecasts Organisational_process_assets_updates change_requests Project_management_plan_updates project_documents_updates","title":"Control Schedule"},{"location":"Certifications-and-Learning/pmp/asdasads/Control_Schedule/#_control_schedule","text":"LINK_-->_https://youtu.be/1gP839Y3sJQ?t=6368 Process_of_monitoring_the_status_of_project_activities_to_update_project_progress_and_manage_changes_to_the_schedule_baseline_to_achieve_the_plan.","title":"_Control_Schedule"},{"location":"Certifications-and-Learning/pmp/asdasads/Control_Schedule/#_inputs","text":"Project_calendar Work_performance_data Project_management_plan Organizational_process_assets Project_schedule schedule_data","title":"_Inputs"},{"location":"Certifications-and-Learning/pmp/asdasads/Control_Schedule/#_tools_and_techniques","text":"Performance_reviews Resource_Optimization_techniques Modeling_techniques Schedule_compression Leads_and_Lags Scheduling_tool Project_management_software","title":"_Tools_and_Techniques"},{"location":"Certifications-and-Learning/pmp/asdasads/Control_Schedule/#_output","text":"Work_Performance_information Schedule_forecasts Organisational_process_assets_updates change_requests Project_management_plan_updates project_documents_updates","title":"_Output"},{"location":"Certifications-and-Learning/pmp/asdasads/Critical_Path_Method/","text":"_Critical_Path_Method https://youtu.be/1gP839Y3sJQ?t=5951 Critical_path_is_the_longest_duration_path_through_a_network_diagram,_which_determines_the_shortest_time_to_complete_the_project. Float,_also_called_as_slack_is_calculated_in_a_network_diagram. Three_types_of_floats/_slack The_amount_of_time_that_a_scheduled_activity_can_be_delayed_or_extended 1. Total_Float - without_delaying_project_finish_date_or_schedule_constrains 2._Free_Float - without_delaying_any_successor_start_date_activity 3._Independent_Float -_All_predecessors_finish_latest_and_All_successors_started_earliest. _Calculation_of_Float https://youtu.be/1gP839Y3sJQ?t=6019 Identify_the_critical_path_of_the_network Follow_the_forward_pass_to_find_early_start_and_early_finish_for_each_activity Calculate_late_finish_and_late_start_using_backward_pass_method _Forward_Pass ES_- Early_Start EF -_Early_Finish _Backward_Pass LF_- Late_Finish LS -_Late_Start Total_Float_= LS - ES_or_Total_Flaot = LF -_EF Example_of_critical_path_-->_https://youtu.be/1gP839Y3sJQ?t=6119 _Schedule_Compression Link_-_https://youtu.be/1gP839Y3sJQ?t=6211 _Techniques_and_impacts Fast_Track_- Adds_risk,_increase_management_time Crash - Adds_costs,_increase_management_time Reduce_Scope - Saves_time_and_cost,_increase_customer_dissatisfaction Cut_quality - Saves_cost_and_resources,_increase_risk Resource_Reallocation -_Does_not_add_cost_or_increase_risk _Impact_of_Schedule_Compression LINK_-_https://youtu.be/1gP839Y3sJQ?t=6261","title":"Critical Path Method"},{"location":"Certifications-and-Learning/pmp/asdasads/Critical_Path_Method/#_critical_path_method","text":"https://youtu.be/1gP839Y3sJQ?t=5951 Critical_path_is_the_longest_duration_path_through_a_network_diagram,_which_determines_the_shortest_time_to_complete_the_project. Float,_also_called_as_slack_is_calculated_in_a_network_diagram. Three_types_of_floats/_slack The_amount_of_time_that_a_scheduled_activity_can_be_delayed_or_extended 1. Total_Float - without_delaying_project_finish_date_or_schedule_constrains 2._Free_Float - without_delaying_any_successor_start_date_activity 3._Independent_Float -_All_predecessors_finish_latest_and_All_successors_started_earliest.","title":"_Critical_Path_Method"},{"location":"Certifications-and-Learning/pmp/asdasads/Critical_Path_Method/#_calculation_of_float","text":"https://youtu.be/1gP839Y3sJQ?t=6019 Identify_the_critical_path_of_the_network Follow_the_forward_pass_to_find_early_start_and_early_finish_for_each_activity Calculate_late_finish_and_late_start_using_backward_pass_method","title":"_Calculation_of_Float"},{"location":"Certifications-and-Learning/pmp/asdasads/Critical_Path_Method/#_forward_pass","text":"ES_- Early_Start EF -_Early_Finish","title":"_Forward_Pass"},{"location":"Certifications-and-Learning/pmp/asdasads/Critical_Path_Method/#_backward_pass","text":"LF_- Late_Finish LS -_Late_Start Total_Float_= LS - ES_or_Total_Flaot = LF -_EF Example_of_critical_path_-->_https://youtu.be/1gP839Y3sJQ?t=6119","title":"_Backward_Pass"},{"location":"Certifications-and-Learning/pmp/asdasads/Critical_Path_Method/#_schedule_compression","text":"Link_-_https://youtu.be/1gP839Y3sJQ?t=6211","title":"_Schedule_Compression"},{"location":"Certifications-and-Learning/pmp/asdasads/Critical_Path_Method/#_techniques_and_impacts","text":"Fast_Track_- Adds_risk,_increase_management_time Crash - Adds_costs,_increase_management_time Reduce_Scope - Saves_time_and_cost,_increase_customer_dissatisfaction Cut_quality - Saves_cost_and_resources,_increase_risk Resource_Reallocation -_Does_not_add_cost_or_increase_risk","title":"_Techniques_and_impacts"},{"location":"Certifications-and-Learning/pmp/asdasads/Critical_Path_Method/#_impact_of_schedule_compression","text":"LINK_-_https://youtu.be/1gP839Y3sJQ?t=6261","title":"_Impact_of_Schedule_Compression"},{"location":"Certifications-and-Learning/pmp/asdasads/Define_Activities/","text":"_Define_Activities https://youtu.be/1gP839Y3sJQ?t=4768 Process_of_identifying_and_documenting_the_specific_actions_to_be_perfromed_to_produice_the_project_deliverables. _Inputs Schedule_Mangement_Plan Scope_Baseline Enterprice_Environmental_factors Organisational_process_assets _Tools_and_techniques Decomposition Rolling_wave_planning Export_Judgement _Outputs Activity_List Activity_Attributes Milestone_List","title":"Define Activities"},{"location":"Certifications-and-Learning/pmp/asdasads/Define_Activities/#_define_activities","text":"https://youtu.be/1gP839Y3sJQ?t=4768 Process_of_identifying_and_documenting_the_specific_actions_to_be_perfromed_to_produice_the_project_deliverables.","title":"_Define_Activities"},{"location":"Certifications-and-Learning/pmp/asdasads/Define_Activities/#_inputs","text":"Schedule_Mangement_Plan Scope_Baseline Enterprice_Environmental_factors Organisational_process_assets","title":"_Inputs"},{"location":"Certifications-and-Learning/pmp/asdasads/Define_Activities/#_tools_and_techniques","text":"Decomposition Rolling_wave_planning Export_Judgement","title":"_Tools_and_techniques"},{"location":"Certifications-and-Learning/pmp/asdasads/Define_Activities/#_outputs","text":"Activity_List Activity_Attributes Milestone_List","title":"_Outputs"},{"location":"Certifications-and-Learning/pmp/asdasads/Develop_Schedule/","text":"_Develop_Schedule https://youtu.be/1gP839Y3sJQ?t=5506 Process_of_analyzing_the_activity_sequence,_duration,_resource_requirements_ad_schedule_constraints_to_create_the_project_schedule_model. _Inputs Risk_Register Project_Scope_Statement Project_Staff_Assignments Resource_Calendars Organisational_Process_Assets Enterprise_Environmental_factors Schedule_management_plan activity_list activity_attributes project_schedule_diagrams activity_resource_requirements resource_breakdown_structure activity_duration_estimates _Tools_and_techniques Schedule_Network_Analysis Critical_Path_Method Critical_Chain_methods Modeling_Techniques Resource_Optimisation_Techniques Leads_and_Lags Schedule_compression Scheduling_tool _Outputs Project_Schedule Schedule_Baseline Schedule_data Project_calendars Project_management_plan_updates Project_documents_updates","title":"Develop Schedule"},{"location":"Certifications-and-Learning/pmp/asdasads/Develop_Schedule/#_develop_schedule","text":"https://youtu.be/1gP839Y3sJQ?t=5506 Process_of_analyzing_the_activity_sequence,_duration,_resource_requirements_ad_schedule_constraints_to_create_the_project_schedule_model.","title":"_Develop_Schedule"},{"location":"Certifications-and-Learning/pmp/asdasads/Develop_Schedule/#_inputs","text":"Risk_Register Project_Scope_Statement Project_Staff_Assignments Resource_Calendars Organisational_Process_Assets Enterprise_Environmental_factors Schedule_management_plan activity_list activity_attributes project_schedule_diagrams activity_resource_requirements resource_breakdown_structure activity_duration_estimates","title":"_Inputs"},{"location":"Certifications-and-Learning/pmp/asdasads/Develop_Schedule/#_tools_and_techniques","text":"Schedule_Network_Analysis Critical_Path_Method Critical_Chain_methods Modeling_Techniques Resource_Optimisation_Techniques Leads_and_Lags Schedule_compression Scheduling_tool","title":"_Tools_and_techniques"},{"location":"Certifications-and-Learning/pmp/asdasads/Develop_Schedule/#_outputs","text":"Project_Schedule Schedule_Baseline Schedule_data Project_calendars Project_management_plan_updates Project_documents_updates","title":"_Outputs"},{"location":"Certifications-and-Learning/pmp/asdasads/Estimate_Activity_Durations/","text":"_Estimate_Activity_Duration https://youtu.be/1gP839Y3sJQ?t=5286 Process_of_estimating_the_number_of_work_periods_needed_to_complete_individual_activities_with_estimated_resources._ Key_benefit_is_that_it_provides_the_amount_of_time_each_activity_ill_take_to_complete,_which_is_a_major_input_to_the_develop_schedule_process. _Inputs Schedule_Management_plan Activity_list activity_attributes Resource_Breakdown_Structure Activity_resource_requirements Resource_calendars Risk_Register Project_Scope_statement Enterprise_Environmental_factors Organizational_Process_assets _Tools_and_techniques Expert_Judgment Three-point_estimating_(Program_Evaluation_and_Reviewing_Technique) Reserve_Analysis_(Provides_buffer_to_complete_activities) Analogous_estimating Parametric_estimating _Outputs Activity_duration_estimates Project_documents_updates","title":"Estimate Activity Durations"},{"location":"Certifications-and-Learning/pmp/asdasads/Estimate_Activity_Durations/#_estimate_activity_duration","text":"https://youtu.be/1gP839Y3sJQ?t=5286 Process_of_estimating_the_number_of_work_periods_needed_to_complete_individual_activities_with_estimated_resources._ Key_benefit_is_that_it_provides_the_amount_of_time_each_activity_ill_take_to_complete,_which_is_a_major_input_to_the_develop_schedule_process.","title":"_Estimate_Activity_Duration"},{"location":"Certifications-and-Learning/pmp/asdasads/Estimate_Activity_Durations/#_inputs","text":"Schedule_Management_plan Activity_list activity_attributes Resource_Breakdown_Structure Activity_resource_requirements Resource_calendars Risk_Register Project_Scope_statement Enterprise_Environmental_factors Organizational_Process_assets","title":"_Inputs"},{"location":"Certifications-and-Learning/pmp/asdasads/Estimate_Activity_Durations/#_tools_and_techniques","text":"Expert_Judgment Three-point_estimating_(Program_Evaluation_and_Reviewing_Technique) Reserve_Analysis_(Provides_buffer_to_complete_activities) Analogous_estimating Parametric_estimating","title":"_Tools_and_techniques"},{"location":"Certifications-and-Learning/pmp/asdasads/Estimate_Activity_Durations/#_outputs","text":"Activity_duration_estimates Project_documents_updates","title":"_Outputs"},{"location":"Certifications-and-Learning/pmp/asdasads/Estimate_Activity_Resources/","text":"_Estimating_Activity_Resources https://youtu.be/1gP839Y3sJQ?t=4969 Process_of_esitmating_the_type_and_quantities_of_material,_human_resource,_equipment_or_suplies_required_to_perform_each_activity. _Inputs Schedule_management_plan Activity_List Activity_Attributes Risk_Register Activity_Cost_Estimates Resource_Calendars Enterprise_Environmental_Factors Organisational_Process_Assets _Tools_and_techniques Expert_Judegement Alternative_Analysis Published_estimating_data Bottom-up_estimating Project_Mangement_Software _Outputs Activity_Resource_Requirements Resource_Breakdown_Structure Projects_Documents_Update","title":"Estimate Activity Resources"},{"location":"Certifications-and-Learning/pmp/asdasads/Estimate_Activity_Resources/#_estimating_activity_resources","text":"https://youtu.be/1gP839Y3sJQ?t=4969 Process_of_esitmating_the_type_and_quantities_of_material,_human_resource,_equipment_or_suplies_required_to_perform_each_activity.","title":"_Estimating_Activity_Resources"},{"location":"Certifications-and-Learning/pmp/asdasads/Estimate_Activity_Resources/#_inputs","text":"Schedule_management_plan Activity_List Activity_Attributes Risk_Register Activity_Cost_Estimates Resource_Calendars Enterprise_Environmental_Factors Organisational_Process_Assets","title":"_Inputs"},{"location":"Certifications-and-Learning/pmp/asdasads/Estimate_Activity_Resources/#_tools_and_techniques","text":"Expert_Judegement Alternative_Analysis Published_estimating_data Bottom-up_estimating Project_Mangement_Software","title":"_Tools_and_techniques"},{"location":"Certifications-and-Learning/pmp/asdasads/Estimate_Activity_Resources/#_outputs","text":"Activity_Resource_Requirements Resource_Breakdown_Structure Projects_Documents_Update","title":"_Outputs"},{"location":"Certifications-and-Learning/pmp/asdasads/Plan_Schedule_Mangement/","text":"_Project_Schedule_Mangement https://youtu.be/1gP839Y3sJQ?t=4659 Process_of_establishing_the_policies,_procedures_and_documentation_for_planning,_developing,_managing,_executing_and_controlling_the_project_schedule. _Inputs Project_management_plan Project_Charter Enterprise_environmental_factors Organizational_process_assets _Tools_and_techniques Expert_judgement Meetings Analytic_techniques _Rolling Wave_plan __What_if_scenarios ____Leveling,_Fast_tracking_and_crashing _Outputs Schedule_management_plan","title":"Plan Schedule Mangement"},{"location":"Certifications-and-Learning/pmp/asdasads/Plan_Schedule_Mangement/#_project_schedule_mangement","text":"https://youtu.be/1gP839Y3sJQ?t=4659 Process_of_establishing_the_policies,_procedures_and_documentation_for_planning,_developing,_managing,_executing_and_controlling_the_project_schedule.","title":"_Project_Schedule_Mangement"},{"location":"Certifications-and-Learning/pmp/asdasads/Plan_Schedule_Mangement/#_inputs","text":"Project_management_plan Project_Charter Enterprise_environmental_factors Organizational_process_assets","title":"_Inputs"},{"location":"Certifications-and-Learning/pmp/asdasads/Plan_Schedule_Mangement/#_tools_and_techniques","text":"Expert_judgement Meetings Analytic_techniques _Rolling Wave_plan __What_if_scenarios ____Leveling,_Fast_tracking_and_crashing","title":"_Tools_and_techniques"},{"location":"Certifications-and-Learning/pmp/asdasads/Plan_Schedule_Mangement/#_outputs","text":"Schedule_management_plan","title":"_Outputs"},{"location":"Certifications-and-Learning/pmp/asdasads/Planning/","text":"_Project_Planning Summary_Link_-->_https://youtu.be/1gP839Y3sJQ?t=6586 Define_Objectives Explaining_the_scope Scheduling_Tasks Generating_Progress_Reports _Fundamentals Determine_scope,_cost_and_resources Identifications_of_Problems Stakeholder's_Identification Define_project_objectives _Why Reduce_cost_and_time Increase_employee_satisfaction Improve_quality_assurance Reduce_project_risks _Tools Gantt_Charts CPM_- Critical_Path_Method PERT_Chart WBS -_Work_Breakdown_Structure Project_Documentation _Steps_in_project_planning Identify_and_meet_stakeholder Define_Scope Set_and_Prioritize_objectives Determine_Deliverables Create_Project_Schedule Risk_Analysis Set_progress_reporting_guidelines PMBOK -_Project_Management_Book_of_Knowledge What How Who When _Excel Project_Reviw_Template Budget_Template Sprint_Project_Tracker Project_Tracker Project_Schedule_Tracker Project_Status_Report Milestone_Tracker Project_Planner _Project_Time_Management Also_Schedule_Management_Plan _Key_activities Identify_Activities Estimating_Time_and_Resources Sequencing_Activities _Key_Terms Leads_and_Lags Rolling_Wave_Planning_- near_goals_are_detailed,_far_goals_have_high_level_view_only Analogous_Estimating - estimations_based_on_previous_projects_or_activities Parametric_Estimating - Mathematical_model_to_calculate_projected_times Effort - Total_amount_of_work_required_to_complete_activity Duration -_Time_required_to_complete_an_activity _Project_Schedule Duration,_start_and_end Microsoft_Project_used_most_often Gantt_Chart Network_Diagram_https://youtu.be/1gP839Y3sJQ?t=4310 _PDM - Precedence_Diagramming_Model_OR_AON -_Activity_on_Node _ _Box_are_activities,_arrow_dependencies,_four_types_of_relationships __ADM_-_Arrow_Diagramming_Model_or_AOA_Activity_on_Arrow _ _Arrows_are_activities,_direction_indicate_relation_and_sequence,_only_1_relationship Example_of_network_diagram_-_https://youtu.be/1gP839Y3sJQ?t=4374 _Schedule_Network_Analysis https://youtu.be/1gP839Y3sJQ?t=5717 Critical_Path_Method Critical_Chain_Method What-if_Scenario_Analysis Resource_Optimization_Techniques Monte_Carlo_Analysis PERT -->_Program_Evaluation_and_Review_Technique https://youtu.be/1gP839Y3sJQ?t=5797 Uses_three_point_estimate_for_the_duration_an_activity_will_take P_- Pessimistic - worst_case_scenario M - Most_Likely - realistic_scenario O - Optimistic__-_best_case_scenario Expect_concept_based_questions,_hence_note_the_FORMULA,_see_the_link_above An_example_of_PERT_-->_https://youtu.be/1gP839Y3sJQ?t=5879","title":"Planning"},{"location":"Certifications-and-Learning/pmp/asdasads/Planning/#_project_planning","text":"Summary_Link_-->_https://youtu.be/1gP839Y3sJQ?t=6586 Define_Objectives Explaining_the_scope Scheduling_Tasks Generating_Progress_Reports","title":"_Project_Planning"},{"location":"Certifications-and-Learning/pmp/asdasads/Planning/#_fundamentals","text":"Determine_scope,_cost_and_resources Identifications_of_Problems Stakeholder's_Identification Define_project_objectives","title":"_Fundamentals"},{"location":"Certifications-and-Learning/pmp/asdasads/Planning/#_why","text":"Reduce_cost_and_time Increase_employee_satisfaction Improve_quality_assurance Reduce_project_risks","title":"_Why"},{"location":"Certifications-and-Learning/pmp/asdasads/Planning/#_tools","text":"Gantt_Charts CPM_- Critical_Path_Method PERT_Chart WBS -_Work_Breakdown_Structure Project_Documentation","title":"_Tools"},{"location":"Certifications-and-Learning/pmp/asdasads/Planning/#_steps_in_project_planning","text":"Identify_and_meet_stakeholder Define_Scope Set_and_Prioritize_objectives Determine_Deliverables Create_Project_Schedule Risk_Analysis Set_progress_reporting_guidelines","title":"_Steps_in_project_planning"},{"location":"Certifications-and-Learning/pmp/asdasads/Planning/#pmbok-_project_management_book_of_knowledge","text":"What How Who When","title":"PMBOK-_Project_Management_Book_of_Knowledge"},{"location":"Certifications-and-Learning/pmp/asdasads/Planning/#_excel","text":"Project_Reviw_Template Budget_Template Sprint_Project_Tracker Project_Tracker Project_Schedule_Tracker Project_Status_Report Milestone_Tracker Project_Planner","title":"_Excel"},{"location":"Certifications-and-Learning/pmp/asdasads/Planning/#_project_time_management","text":"Also_Schedule_Management_Plan","title":"_Project_Time_Management"},{"location":"Certifications-and-Learning/pmp/asdasads/Planning/#_key_activities","text":"Identify_Activities Estimating_Time_and_Resources Sequencing_Activities","title":"_Key_activities"},{"location":"Certifications-and-Learning/pmp/asdasads/Planning/#_key_terms","text":"Leads_and_Lags Rolling_Wave_Planning_- near_goals_are_detailed,_far_goals_have_high_level_view_only Analogous_Estimating - estimations_based_on_previous_projects_or_activities Parametric_Estimating - Mathematical_model_to_calculate_projected_times Effort - Total_amount_of_work_required_to_complete_activity Duration -_Time_required_to_complete_an_activity","title":"_Key_Terms"},{"location":"Certifications-and-Learning/pmp/asdasads/Planning/#_project_schedule","text":"Duration,_start_and_end Microsoft_Project_used_most_often Gantt_Chart Network_Diagram_https://youtu.be/1gP839Y3sJQ?t=4310 _PDM - Precedence_Diagramming_Model_OR_AON -_Activity_on_Node _ _Box_are_activities,_arrow_dependencies,_four_types_of_relationships __ADM_-_Arrow_Diagramming_Model_or_AOA_Activity_on_Arrow _ _Arrows_are_activities,_direction_indicate_relation_and_sequence,_only_1_relationship Example_of_network_diagram_-_https://youtu.be/1gP839Y3sJQ?t=4374","title":"_Project_Schedule"},{"location":"Certifications-and-Learning/pmp/asdasads/Planning/#_schedule_network_analysis","text":"https://youtu.be/1gP839Y3sJQ?t=5717 Critical_Path_Method Critical_Chain_Method What-if_Scenario_Analysis Resource_Optimization_Techniques Monte_Carlo_Analysis","title":"_Schedule_Network_Analysis"},{"location":"Certifications-and-Learning/pmp/asdasads/Planning/#pert-_program_evaluation_and_review_technique","text":"https://youtu.be/1gP839Y3sJQ?t=5797 Uses_three_point_estimate_for_the_duration_an_activity_will_take P_- Pessimistic - worst_case_scenario M - Most_Likely - realistic_scenario O - Optimistic__-_best_case_scenario Expect_concept_based_questions,_hence_note_the_FORMULA,_see_the_link_above An_example_of_PERT_-->_https://youtu.be/1gP839Y3sJQ?t=5879","title":"PERT--&gt;_Program_Evaluation_and_Review_Technique"},{"location":"Certifications-and-Learning/pmp/asdasads/Project_Cost_Management/","text":"_Project_Cost_Management LINK_-_https://youtu.be/1gP839Y3sJQ?t=6663 _Concepts Cost_Management_Plan Control_Account _Processes Link_-_https://youtu.be/1gP839Y3sJQ?t=6802 Plan_Cost_Management _Expert Judgement __Data_analysis ____Meetings Estimate_Costs_ _Expert Judgment __Analogous_Estimating _Parametric Estimating __Bottom-Up_Estimating _Three-Point Estimating __Data_Analysis _PMIS -_Project_Management_Information_System __Decision_Making Determine_Budget _Expert Judgment __Historical_Information_Review _Data Analysis __Cost_Aggregation _Funding Limit_Reconciliation __Financing Control_Costs _Expert Judgement __Data_Analysis _TCPI To-Complete_Performance_Index __PMIS_-_Project_Management_Information_System _Types_of_costs https://youtu.be/vzqDTSZOTic?t=21160 Fixed_Cost Variable_Cost Direct_Cost Indirect_Cost Sunk_Cost_","title":"Project Cost Management"},{"location":"Certifications-and-Learning/pmp/asdasads/Project_Cost_Management/#_project_cost_management","text":"LINK_-_https://youtu.be/1gP839Y3sJQ?t=6663","title":"_Project_Cost_Management"},{"location":"Certifications-and-Learning/pmp/asdasads/Project_Cost_Management/#_concepts","text":"Cost_Management_Plan Control_Account","title":"_Concepts"},{"location":"Certifications-and-Learning/pmp/asdasads/Project_Cost_Management/#_processes","text":"Link_-_https://youtu.be/1gP839Y3sJQ?t=6802 Plan_Cost_Management _Expert Judgement __Data_analysis ____Meetings Estimate_Costs_ _Expert Judgment __Analogous_Estimating _Parametric Estimating __Bottom-Up_Estimating _Three-Point Estimating __Data_Analysis _PMIS -_Project_Management_Information_System __Decision_Making Determine_Budget _Expert Judgment __Historical_Information_Review _Data Analysis __Cost_Aggregation _Funding Limit_Reconciliation __Financing Control_Costs _Expert Judgement __Data_Analysis _TCPI To-Complete_Performance_Index __PMIS_-_Project_Management_Information_System","title":"_Processes"},{"location":"Certifications-and-Learning/pmp/asdasads/Project_Cost_Management/#_types_of_costs","text":"https://youtu.be/vzqDTSZOTic?t=21160 Fixed_Cost Variable_Cost Direct_Cost Indirect_Cost Sunk_Cost_","title":"_Types_of_costs"},{"location":"Certifications-and-Learning/pmp/asdasads/Project_Quality_Management/","text":"_Project_Quality_Management https://youtu.be/vzqDTSZOTic?t=21972","title":"Project Quality Management"},{"location":"Certifications-and-Learning/pmp/asdasads/Project_Quality_Management/#_project_quality_management","text":"https://youtu.be/vzqDTSZOTic?t=21972","title":"_Project_Quality_Management"},{"location":"Certifications-and-Learning/pmp/asdasads/Project_Scope_Management/","text":"_Project_Scope_Management https://youtu.be/vzqDTSZOTic?t=16226 _Scope_Management Product_Scope Project_Scope _Tailoring_considerations Knowledge_and_Requirement_Management Validation_and_Control Development_Approach Stability_of_Requirements Governance _Product_Scope _Project_Scope _Scope_Management_Process Plan_Scope_Management_<--_We_Get_Scope_Management_Plan,_Requirement_Management_Plan _A Project_Charter __B_Project_Management_Plan _C Organizational_Process_Assets __D_Enterprise_Environmental_Factor Collect_Requirements_<-- we_get_Requirements_Documentation,_Requirement_Traceability_Matrix ____A,_B,_D ____E_Project_Documents ____F_Business_Documents ____G_Agreements ____H_Organizational_Process_Assets Define_Scope_<--_Project_Scope_Statement,_Project_Documents_Updates ____A_B_E_D_H Create_WBS_(here_decomposition_technique_used) <-- ____B_E_D_H Validate_Scope Control_Scope","title":"Project Scope Management"},{"location":"Certifications-and-Learning/pmp/asdasads/Project_Scope_Management/#_project_scope_management","text":"https://youtu.be/vzqDTSZOTic?t=16226","title":"_Project_Scope_Management"},{"location":"Certifications-and-Learning/pmp/asdasads/Project_Scope_Management/#_scope_management","text":"Product_Scope Project_Scope","title":"_Scope_Management"},{"location":"Certifications-and-Learning/pmp/asdasads/Project_Scope_Management/#_tailoring_considerations","text":"Knowledge_and_Requirement_Management Validation_and_Control Development_Approach Stability_of_Requirements Governance","title":"_Tailoring_considerations"},{"location":"Certifications-and-Learning/pmp/asdasads/Project_Scope_Management/#_product_scope","text":"","title":"_Product_Scope"},{"location":"Certifications-and-Learning/pmp/asdasads/Project_Scope_Management/#_project_scope","text":"","title":"_Project_Scope"},{"location":"Certifications-and-Learning/pmp/asdasads/Project_Scope_Management/#_scope_management_process","text":"Plan_Scope_Management_<--_We_Get_Scope_Management_Plan,_Requirement_Management_Plan _A Project_Charter __B_Project_Management_Plan _C Organizational_Process_Assets __D_Enterprise_Environmental_Factor Collect_Requirements_<-- we_get_Requirements_Documentation,_Requirement_Traceability_Matrix ____A,_B,_D ____E_Project_Documents ____F_Business_Documents ____G_Agreements ____H_Organizational_Process_Assets Define_Scope_<--_Project_Scope_Statement,_Project_Documents_Updates ____A_B_E_D_H Create_WBS_(here_decomposition_technique_used) <-- ____B_E_D_H Validate_Scope Control_Scope","title":"_Scope_Management_Process"},{"location":"Certifications-and-Learning/pmp/asdasads/Sequenece_Activities/","text":"_Sequence_Activities https://youtu.be/1gP839Y3sJQ?t=4870 Process_of_identifying_and_documenting_relationship_among_project_activities. _Inputs Activiy_List Activity_Attributes Milestone_List Schedule_Mangement_Plan Project_Scope_Statement Organisational_Process_Asset Enterprise_Environmental_Factors _Tools_and_techniques PDM_-_Precedence_Diagramming_Method Dependency_Determination Leads_and_Lags _Outputs Project_Documents_updates","title":"Sequenece Activities"},{"location":"Certifications-and-Learning/pmp/asdasads/Sequenece_Activities/#_sequence_activities","text":"https://youtu.be/1gP839Y3sJQ?t=4870 Process_of_identifying_and_documenting_relationship_among_project_activities.","title":"_Sequence_Activities"},{"location":"Certifications-and-Learning/pmp/asdasads/Sequenece_Activities/#_inputs","text":"Activiy_List Activity_Attributes Milestone_List Schedule_Mangement_Plan Project_Scope_Statement Organisational_Process_Asset Enterprise_Environmental_Factors","title":"_Inputs"},{"location":"Certifications-and-Learning/pmp/asdasads/Sequenece_Activities/#_tools_and_techniques","text":"PDM_-_Precedence_Diagramming_Method Dependency_Determination Leads_and_Lags","title":"_Tools_and_techniques"},{"location":"Certifications-and-Learning/pmp/asdasads/Sequenece_Activities/#_outputs","text":"Project_Documents_updates","title":"_Outputs"},{"location":"Certifications-and-Learning/system-design/","text":"System Design Its all about performance, scaling and security Reference from --> https://www.algoexpert.io/systems/fundamentals Overall Picture for reference --> Cheat Sheet --> https://vahid.blog/post/2022-05-05-system-design-interview-cheat-sheet/ Info Graphic --> Software Design Architecture - https://martinfowler.com/architecture/ Good Playlist - https://www.youtube.com/watch?v=gxfERVP18-g&list=PL4JxLacgYgqTgS8qQPC17fM-NWMTr5GW6&index=2 Rajdeep Saha Udemy Course This guy is an experienced and practical person, learn about AWS and HLD from him. CourseLink Rajdeep Saha System Design AWS - My Notes Fundamentals https://www.youtube.com/watch?v=REB_eGHK_P4 Load Balancing - Distribute to different servers. Nginx or simple DNS load balancing, round robin etc Caching - Loading data from db. Most requested data is cached in memory, like memcache, redis, cassandra. CDN - Loading most requested data like images, files etc FAST. Use CDN near to the taffic. Pool technique, like amazon s3. Replication - Create copy of master db, to create multiple slaves, then read from slaves, but write to master. (read from master too sometimes) Database Sharding - When db writes are high, like twitter. Split db to multiple master db: Vertical Sharding - Different tables in different db. Horizontal Sharding - Single table split into multiple db machines NoSql Db - like Key Value, graph, document. They have Natural Scaling. MongoDb, Amazon DynamoDb and Firebase FireStore API design Most important DB choosing - https://www.youtube.com/watch?v=cODCpXtPHbQ Image storage Search and query (client side and for within other services like ML modelling logging etc) Monitoring system, logging and addressing Notifications API design for communications within system and outside(like payment) Mock General method https://www.youtube.com/watch?v=2BWr0fsDSs0 If small team objective of MVP delivery with monolithic arch, but with extensible architect to later decouple with diff repo for easy debug and coding, collaborative but building in a say that it can be decoupled later, into micro services Front end Back end Search and qeury in db, RDBMS as data dump, source of truth Elastic search for indexing, text search engine A service to add into rdms, emit event for store in elastic search, so user can see result in instant Monitoring Failed events, like payment, can have notifications for teams, like on slack, or email or sms or some ticket management system like JIRA Misses in queries. Health check kind of service, which runs in cron 200 ok, if misses two heartbeats, we see services can be down. A script to re-start service OR ping an engineer with notification Keeping the log of all these Metric system can pull data in cron Or errors and misses can be pushed to metric system OR a kafka like service and create pub sub, When system is big, clear pathway to issues should be trackable, hence kafka like logs can help metric system could be like total request How many down Bug related Miss related Then for each above, checking 2-3 heartbeats before making a decision Image Storage S3 bucket for start, the link goes into database CDN based on location or file system DB can have another table, with product ID as foreign key and then many images against it, with links","title":"System Design"},{"location":"Certifications-and-Learning/system-design/#system-design","text":"Its all about performance, scaling and security Reference from --> https://www.algoexpert.io/systems/fundamentals Overall Picture for reference --> Cheat Sheet --> https://vahid.blog/post/2022-05-05-system-design-interview-cheat-sheet/ Info Graphic --> Software Design Architecture - https://martinfowler.com/architecture/ Good Playlist - https://www.youtube.com/watch?v=gxfERVP18-g&list=PL4JxLacgYgqTgS8qQPC17fM-NWMTr5GW6&index=2","title":"System Design"},{"location":"Certifications-and-Learning/system-design/#rajdeep-saha-udemy-course","text":"This guy is an experienced and practical person, learn about AWS and HLD from him. CourseLink Rajdeep Saha System Design AWS - My Notes","title":"Rajdeep Saha Udemy Course"},{"location":"Certifications-and-Learning/system-design/#fundamentals","text":"https://www.youtube.com/watch?v=REB_eGHK_P4 Load Balancing - Distribute to different servers. Nginx or simple DNS load balancing, round robin etc Caching - Loading data from db. Most requested data is cached in memory, like memcache, redis, cassandra. CDN - Loading most requested data like images, files etc FAST. Use CDN near to the taffic. Pool technique, like amazon s3. Replication - Create copy of master db, to create multiple slaves, then read from slaves, but write to master. (read from master too sometimes) Database Sharding - When db writes are high, like twitter. Split db to multiple master db: Vertical Sharding - Different tables in different db. Horizontal Sharding - Single table split into multiple db machines NoSql Db - like Key Value, graph, document. They have Natural Scaling. MongoDb, Amazon DynamoDb and Firebase FireStore API design","title":"Fundamentals"},{"location":"Certifications-and-Learning/system-design/#most-important","text":"DB choosing - https://www.youtube.com/watch?v=cODCpXtPHbQ Image storage Search and query (client side and for within other services like ML modelling logging etc) Monitoring system, logging and addressing Notifications API design for communications within system and outside(like payment)","title":"Most important"},{"location":"Certifications-and-Learning/system-design/#mock-general-method","text":"https://www.youtube.com/watch?v=2BWr0fsDSs0 If small team objective of MVP delivery with monolithic arch, but with extensible architect to later decouple with diff repo for easy debug and coding, collaborative but building in a say that it can be decoupled later, into micro services Front end Back end Search and qeury in db, RDBMS as data dump, source of truth Elastic search for indexing, text search engine A service to add into rdms, emit event for store in elastic search, so user can see result in instant Monitoring Failed events, like payment, can have notifications for teams, like on slack, or email or sms or some ticket management system like JIRA Misses in queries. Health check kind of service, which runs in cron 200 ok, if misses two heartbeats, we see services can be down. A script to re-start service OR ping an engineer with notification Keeping the log of all these Metric system can pull data in cron Or errors and misses can be pushed to metric system OR a kafka like service and create pub sub, When system is big, clear pathway to issues should be trackable, hence kafka like logs can help metric system could be like total request How many down Bug related Miss related Then for each above, checking 2-3 heartbeats before making a decision Image Storage S3 bucket for start, the link goes into database CDN based on location or file system DB can have another table, with product ID as foreign key and then many images against it, with links","title":"Mock General method"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/","text":"Contents Rocking System Design AWS Terms Load Balancing VM and storage Scaling Alternate to EC2 Other Queue PubSub Messaging and Streaming Database Caching Monolith vs Micro Services Monolith Micro Service AWS Micro Service ALB vs NLB API and API Gateway Load balancer VS API GAteway Scaling - Horizontal vs Vertical Scaling Types Interview Question EC2 Lambda - Server less scaling Kubernetes - Container Scaling Synchronous vs Event Driven Architecture Queues VS PubSub Streaming VS Messaging SQL vs NoSQL vs Aurora vs DynamoDB Websockets for Server to Client Communication - Chatbot Caching Redis memcached and caching strategy Lazy Loading Write-Through High Availability VS Fault Tolerance High Availability Fault Tolerance Distributed Computing Hashing Challenges Consistent hashing Database Sharding also called Horizontal Partitioning Disaster recovery (DR) - RPO vs RTO RPO RTO Strategy CAP Theorem - NoSQL follows this Rocking System Design AWS Terms API Gateway Load Balancing ELB - Elastic Load Balancer ALB - Application LB - HTTP - OSI Layer 7 - Application Layer - https://www.forcepoint.com/cyber-edu/osi-model NLB - Network LB - Any protocol - OSI Layer 4 ALB Ingress for Kubernetes VM and storage EC2 - VM S3 - Storage - CloudFront for caching Scaling ASG - Auto Scaling Group - for EC2 HPA - Horizontal Pod AutoScaler - Here, the PODS in the EC2 gets scaled up CA - Cluster Auto Scaling - for Kubernetes PODS in EC2 - The EC2 in which POD running gets scaled up AWS Fargate - Kubernetes Auto Scaling - For kubernetes but in lambda fasion RS - Replica Set for Pods AMI - Amazon Machine Image - For high traffic days, AMI size should be small IEM - Infrastructure Event Management - To manage high traffic day RDS Proxy for scaling database, managing connections properly Alternate to EC2 Lambda - Serverless EKS - Elastic Kubernetes - Its inside EC2 ECS - Elastic Container - Its inside EC2 Security AWS WAF - Web Application Firewall Queue PubSub Messaging and Streaming -Queue - Pull Based in pipe SQS - Simple Queue Service - Messaging Amazon MQ - Message Queue -PubSub - Push Based to topics SNS - Simple Notification Service - Push Based EventBridge - Push Based - Messaging KINESIS Stream - Streaming - Live Data Analysis MSK - Managed Service for Kafka - Streaming Database AZ - Availability Zone HA - High Availability -SQL Amazon RDS - Relation Database Service Aurura -NoSQL DynamoDB - Has DAX Dynamo Accelerator for cache DocumentDB - Like Mongodb MCS - Managed Cassandra Caching TTL - Time To Leave ElastiCache ElastiCache for redis and memcache DAX for DynamoDB CloudFront for S3 Monolith vs Micro Services Monolith Resource efficient in small scale. Scaling is challenge API can be used get/post/delete --> API gateway/ load balancer --> Amazon EC2 (M5.12xlarge) --> Database Entire Monolith to be scaled. Micro Service get --> API gateway/ load balancer --> Amazon EC2 (t3.large) --> Database1 post --> API gateway/ load balancer --> Amazon EC2 (t3.medium) --> Database2 delete --> API gateway/ load balancer --> Amazon EC2 (t3.micro) --> Database3 Polyglot - write in service in different langauge Independent Scaling Governance Deployment Testing Functionality AWS Micro Service Amazon EC2 in Auto Scaling Group with Different scaling criteria EC2 scaling Elastic Load Balancing + Amazon API Gateway --> get --> EC2 m5.large - ASG - Auto Scaling Group --> post --> EC2 t3.micro - ASG - Auto Scaling Group --> delete --> EC2 m4.2xlarge - ASG - Auto Scaling Group AWS lambda scaling Elastic Load Balancing + Amazon API Gateway --> get --> AWS Lambda --> post --> AWS lambda --> delete --> AWS lambda - scaled automatically Container/ Kubernetes Scaling Elastic Load Balancing + Amazon API Gateway --> get --> Amason Elastic Kubernetes Service --> post --> Amazon Eleastic Container Service --> delete --> same above Kubernetes Ingress ALB (Application load Balancer) --> Service a,b,c --> pod1, pod2, pod3 Any above combo can be used to, service 1 in ec2, service 2 in aws lambda etc ALB vs NLB Amazon Elastic Load Balancing - Integrates with SSL - exposes a DNS/ address ALB - Application Load Balancer Operates on OSI Layer 7 - Routes traffic based on Path, like get post delete - Validate and Terminate SSL NLB - Network Load Balancer Operates on OSI Layer 4 - Routes traffic based on protocol and port, udp, tcp etc - SSL pass API and API Gateway Amazon API gateway Load balancer VS API Gateway Both integrate with AWS WAF for protection API Gateway - Implement rate limit, static endpoint not possible, accepts only HTTPS, request validation possible, can handle spiky traffic, integrate different region and even aws accounts Able to export import API using swagger, OPEN API Able to cache response Timeout is 30 seconds Integrates with almost all AWS service No Health Check pay per use Application Load Balancer - Static endpoint possible, HTTP too, ALB is regional service, delay in spiky traffic, pre-allocate LCU availbale but at extra cost No direct method to export import rules for cross platforms Cant cache Timeour is 4000 Seconds EC2, Lambda and IP address as backend Health check available pay for idle too Scaling - Horizontal vs Vertical Vertical Scaling - Bigger server Horizontal Scaling - Many server with copy Scaling Types Lambda Scales only horizontally Kubernetes Container in POD and POD in EC2 which is Virtual Machine Multiple PODs made in EC2 --> Cluster Auto-Scaler -- NOTE: Container in POD does not increase Amazon Fargate -- has no underlying EC2 Lambda type -- PODs keep on increasing in Fargate Interview Question https://www.udemy.com/course/rocking-system-design/learn/lecture/28472274#overview Handle festival traffic which is very high EC2 Using Elastic Load Balancing ELB traffic to EC2, which put in ASG ELB --> Pre Warm Load Balancer ASG --> Add Scheduled Scaling EC2 --> Lightweight AMI in EC2 AMI --> Ensure Amazon Machine Image is light Database Connection --> Use database proxy eg RDS proxy High traffic means many open unused connections with db, which can be controlled by RDS proxy On top off all --> Run IEM (Infrastructre Event Management) to handle high traffic Increase Account Limits There is limit to EC2 instance per account, that needs to be increased by request Utilise different Account + Region Combo Lambda - Server less scaling client --> API Gateway --> AWS Lambda API gateway - Enable API caching, use HTTP API instead of Rest API faster and cheaper AWS Lambda - Provisioned Concurrency - Scheduled Optemize Lambda code using X-ray Optemize Lambda Configuration using CloudWatch Insights Use RDS proxy for database Increase Account Limits Utilize different Account + region combo Kubernetes - Container Scaling USE ALB (application load balancer) ingress HPA - Horizontal Pod AutoScaler RS - Replica Set CA - Cluster Auto Scaler Use replica set to run multiple copies of pod Use cluster over provisioner to provision nodes Pre Warm ALB RDS proxy in between PODS and DataBase Account limit and Account/region combo Synchronous vs Event Driven Architecture In Sync Each component scales up with Same factor Same time In Async, components can be scaled up independently Scale UP API gateway ---> Amazon Simple Queue Service SQS (messages saved) Async is more cost effective Combinations can be used. In ordering system, order insert is async, status retrieve is sync Queues VS PubSub Queue - Pull Model: A --> Pipe --> B (SQS (Simple Queue Service) and Amazon MQ) PubSub - Push Model: A --> Topic --> Many Bs (SNS Simple Notification Service and Amazon EventBridge) No Message ordering in PubSub Streaming VS Messaging Message - SQS and EventBridge - data gets deleted after its processed Stream - KINESIS STREAM and MSK (Message Service for Kafka)- Enables SQL on stream, perform analytics etc. Data does not get deleted in stream SQL vs NoSQL vs Aurora vs DynamoDB https://www.udemy.com/course/rocking-system-design/learn/lecture/26100196#overview SQL or RDBMS - csv type Predefined Schema Holds Structured Data Good for joins and complex queries ACID - Atomicity, Consistency, Isolation and Durability Generally Scales vertically Example - Oracle, DB2, MS SQL, AWS RDS and AWS Aurora NoSQL - Json type Schemeless Hold structured and unstructured data Not good for complex queries Brewers CAP theorem - Consistency, Availability, Partition Tolerance Scales Horizontally and DynamoDB scales automatically Exmaple - MongoDB, Cassandra AWS DynamoDB, DocumentDB (MongoDB compatible), MCS - Amazon Managed Apache Cassandra Service Aurora MySQL (5x) and PostgresSQL (3x) compatible - 1/10 cost (5x means 5 times faster than MySQL) Multi-Master support for MySql - during failure, it allows read/write with zero downtime Cross region Active-Passive replication - Global database - during fail, 1 minute it replicates Multi-AZ and Read Replicas for high availability (AZ is Availability Zone) Serverless Aurora scales automatically, but not very scalable Has integrated caches, cant be adjusted Enable backups, snapshot for DR DynamoDb Key-value dcument database, single digit millisecond performance at any scale Multi- Master Cross region Active-Active replication - Global Tables Inherently replicates aross three AZs-HA and Durable (HA is High Availability) Inherently scalable. 10 Trillion request/day OR peak 20 million request/second Provides adjustable in-memory caching via DAX - Dynamo Accelarator inherently durable, Point In Time backups can be enabled Websockets for Server to Client Communication - Chatbot Connection stays open in websocket Load Balancer and API Gateway both can use it Caching Purpose is to get data faster. Its like another database. A subset of data made from db First cache is checked then db Time to Live (TTL) - Cache gets deleted after specific time Cache entries can be updated with backend code CACHE IS NOT RESTRICTED TO BACKEND ONLY Use managed service cache, like if API gateways provides it, use it. Dont create your own If cache service not given, then cache using Amazon ElastiCache Amazon Elasticache for Redis Amazon Elasticache for Memcached Amazon API Gateway - Enable API Cache DynamoDB - Enable Dynamo Cache (DAX accelarator) - extra cost to be considered Amazon Simple Storage Service S3 - for Static Website - Use Amazon CloudFront (CDN service) Amazon ElastiCache --> Amazon Elastic Kubernetes Service EKS <--> Amazon RDS EKS sits between ELB and RDS and ElastiCache is connected to EKS Redis memcached and caching strategy Lazy Loading User calls EC2 EC2 calls Elasticache. Elasticache returns - Cache Hit OR Cache Miss If Hit, the view to given to viewer If Miss, EC2 calls Aurora (any db) gets the data, writes to ElastiCache and present view to user Posibility of stale data Miss case, we get slower Write-Through User calls EC2 EC2 write/ update db like aurora and ALSO write/update cache like elasticache at the same time Data never stale Writing penalty in terms of time High Availability VS Fault Tolerance https://www.udemy.com/course/rocking-system-design/learn/lecture/26100210#notes Ask in interview what to use, high avai.. or fault tol.. AZ - Availability Zone HA - High Availability High Availability Even if some parts fail, even then system keeps working Identify Single Point of Failure ELB --> EC2 (even with ASG it is not high available) We put EC2 in ASG and then each EC2 in different Availability Zones, like zone 1 zone 2 Use AWS lambda - High Availability Kubernetes? - No, Pod works in EC2 hence not high available We can put in kubernetes pod in different availability zones. Also use ASG Cluster AutoScaler In interview, do not emphasise on COST bcoz, high availability is more important Fault Tolerance Assume ELB has 100 TPS (transaction per second) EC2 can handle 50. So you create 2 EC2 instance, in 2 AZ When 1 EC2 fails, then what? Problem, till the time next EC2 is spin up in ASG, we miss transactions Hence we create 3 EC2 in 3 AZ OR we can also create 2 EC2 in one AZ and 2 EC2 in another AZ Fault Tolerance is expensive. Like a backup EC2 in advance, adding tolerance to TPS Distributed Computing https://www.udemy.com/course/rocking-system-design/learn/lecture/26341612#notes Hashing Say we create an entry in DB with primary key as \"Manasvi\" Hash is applied to \"Manasvi\" ---> We get a digest. Based on the digest, the entry is saved in one of the partition of DB. We can have 20 partitions, and digest based formulation can be done to save in one of the partition. When user searches for \"Manasvi\", again hashing is done, then we get digest The digest points to partition and help locate the entry very fast. Challenges 4 partitions db entry = 1 digest = 10 Calculation is 10%4 (gives number between 0 and 3) Based on calulcation output, we save entry to partition. BUT if, one partition db goes down, then calculation becomes 10%3 (0 to 2). PROBLEM Now we can not access our data the way we want.... Consistent hashing https://www.udemy.com/course/rocking-system-design/learn/lecture/29166364#notes concept of HASH RING We hash input We also hash server names Then we map input hash to server hash Now if a server goes down, all input hash goes to next server Database Sharding also called Horizontal Partitioning Can be done on both SQL and NoSQL dbs A big table has 100 rows We can create 10 shards, meaning 10 smaller db hence now we have 10 db, 1st db has first 10 entry, 2nd db has next 10 entry etc.... HOWEVER - We use hashing to assign the specific shard Scales Horizontaly and support distributed computing Faster query response times More reliable, only certain part of db fail in outage, rest is ok. Unbalanced shards can happen Resharding is painful Implementing sharding logic is an overhead Disaster recovery (DR) - RPO vs RTO RPO Recovery Point Objective - Amount of DATA allowed to be lost during disaster measurement in time Eg we backup every 1 hr, so 1hr is RPO Real Time RPO? Yes, Replication at another storage at DR region RTO Recovery Time Objective - Amount of TIME application can be down during disaster Strategy https://www.udemy.com/course/rocking-system-design/learn/lecture/29200292#notes Backup and Restore - Only Storage copy Pilot Light - Amazon Route 53 is used in all below Warm Standby - Complete Copy, but less instances on Multi-site active/active - Complete Copy, duplicated into two CAP Theorem - NoSQL follows this https://www.udemy.com/course/rocking-system-design/learn/lecture/31586070#notes Consistency - Get data or error Get the right data always, or no data Availability - Always get data, no error BUT data recent write not guarenteed Get some data always, could be old data Partition Tolerance - System continues despite messages being dropped. DB always work You can have only 2 at a time. CA, CP, AP","title":"Contents"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#contents","text":"Rocking System Design AWS Terms Load Balancing VM and storage Scaling Alternate to EC2 Other Queue PubSub Messaging and Streaming Database Caching Monolith vs Micro Services Monolith Micro Service AWS Micro Service ALB vs NLB API and API Gateway Load balancer VS API GAteway Scaling - Horizontal vs Vertical Scaling Types Interview Question EC2 Lambda - Server less scaling Kubernetes - Container Scaling Synchronous vs Event Driven Architecture Queues VS PubSub Streaming VS Messaging SQL vs NoSQL vs Aurora vs DynamoDB Websockets for Server to Client Communication - Chatbot Caching Redis memcached and caching strategy Lazy Loading Write-Through High Availability VS Fault Tolerance High Availability Fault Tolerance Distributed Computing Hashing Challenges Consistent hashing Database Sharding also called Horizontal Partitioning Disaster recovery (DR) - RPO vs RTO RPO RTO Strategy CAP Theorem - NoSQL follows this","title":"Contents"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#rocking-system-design","text":"","title":"Rocking System Design"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#aws-terms","text":"","title":"AWS Terms"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#api-gateway","text":"","title":"API Gateway"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#load-balancing","text":"ELB - Elastic Load Balancer ALB - Application LB - HTTP - OSI Layer 7 - Application Layer - https://www.forcepoint.com/cyber-edu/osi-model NLB - Network LB - Any protocol - OSI Layer 4 ALB Ingress for Kubernetes","title":"Load Balancing"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#vm-and-storage","text":"EC2 - VM S3 - Storage - CloudFront for caching","title":"VM and storage"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#scaling","text":"ASG - Auto Scaling Group - for EC2 HPA - Horizontal Pod AutoScaler - Here, the PODS in the EC2 gets scaled up CA - Cluster Auto Scaling - for Kubernetes PODS in EC2 - The EC2 in which POD running gets scaled up AWS Fargate - Kubernetes Auto Scaling - For kubernetes but in lambda fasion RS - Replica Set for Pods AMI - Amazon Machine Image - For high traffic days, AMI size should be small IEM - Infrastructure Event Management - To manage high traffic day RDS Proxy for scaling database, managing connections properly","title":"Scaling"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#alternate-to-ec2","text":"Lambda - Serverless EKS - Elastic Kubernetes - Its inside EC2 ECS - Elastic Container - Its inside EC2","title":"Alternate to EC2"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#security","text":"AWS WAF - Web Application Firewall","title":"Security"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#queue-pubsub-messaging-and-streaming","text":"-Queue - Pull Based in pipe SQS - Simple Queue Service - Messaging Amazon MQ - Message Queue -PubSub - Push Based to topics SNS - Simple Notification Service - Push Based EventBridge - Push Based - Messaging KINESIS Stream - Streaming - Live Data Analysis MSK - Managed Service for Kafka - Streaming","title":"Queue PubSub Messaging and Streaming"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#database","text":"AZ - Availability Zone HA - High Availability -SQL Amazon RDS - Relation Database Service Aurura -NoSQL DynamoDB - Has DAX Dynamo Accelerator for cache DocumentDB - Like Mongodb MCS - Managed Cassandra","title":"Database"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#caching","text":"TTL - Time To Leave ElastiCache ElastiCache for redis and memcache DAX for DynamoDB CloudFront for S3","title":"Caching"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#monolith-vs-micro-services","text":"","title":"Monolith vs Micro Services"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#monolith","text":"Resource efficient in small scale. Scaling is challenge API can be used get/post/delete --> API gateway/ load balancer --> Amazon EC2 (M5.12xlarge) --> Database Entire Monolith to be scaled.","title":"Monolith"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#micro-service","text":"get --> API gateway/ load balancer --> Amazon EC2 (t3.large) --> Database1 post --> API gateway/ load balancer --> Amazon EC2 (t3.medium) --> Database2 delete --> API gateway/ load balancer --> Amazon EC2 (t3.micro) --> Database3 Polyglot - write in service in different langauge Independent Scaling Governance Deployment Testing Functionality","title":"Micro Service"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#aws-micro-service","text":"Amazon EC2 in Auto Scaling Group with Different scaling criteria EC2 scaling Elastic Load Balancing + Amazon API Gateway --> get --> EC2 m5.large - ASG - Auto Scaling Group --> post --> EC2 t3.micro - ASG - Auto Scaling Group --> delete --> EC2 m4.2xlarge - ASG - Auto Scaling Group AWS lambda scaling Elastic Load Balancing + Amazon API Gateway --> get --> AWS Lambda --> post --> AWS lambda --> delete --> AWS lambda - scaled automatically Container/ Kubernetes Scaling Elastic Load Balancing + Amazon API Gateway --> get --> Amason Elastic Kubernetes Service --> post --> Amazon Eleastic Container Service --> delete --> same above Kubernetes Ingress ALB (Application load Balancer) --> Service a,b,c --> pod1, pod2, pod3 Any above combo can be used to, service 1 in ec2, service 2 in aws lambda etc","title":"AWS Micro Service"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#alb-vs-nlb","text":"Amazon Elastic Load Balancing - Integrates with SSL - exposes a DNS/ address ALB - Application Load Balancer Operates on OSI Layer 7 - Routes traffic based on Path, like get post delete - Validate and Terminate SSL NLB - Network Load Balancer Operates on OSI Layer 4 - Routes traffic based on protocol and port, udp, tcp etc - SSL pass","title":"ALB vs NLB"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#api-and-api-gateway","text":"Amazon API gateway","title":"API and API Gateway"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#load-balancer-vs-api-gateway","text":"Both integrate with AWS WAF for protection API Gateway - Implement rate limit, static endpoint not possible, accepts only HTTPS, request validation possible, can handle spiky traffic, integrate different region and even aws accounts Able to export import API using swagger, OPEN API Able to cache response Timeout is 30 seconds Integrates with almost all AWS service No Health Check pay per use Application Load Balancer - Static endpoint possible, HTTP too, ALB is regional service, delay in spiky traffic, pre-allocate LCU availbale but at extra cost No direct method to export import rules for cross platforms Cant cache Timeour is 4000 Seconds EC2, Lambda and IP address as backend Health check available pay for idle too","title":"Load balancer VS API Gateway"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#scaling-horizontal-vs-vertical","text":"Vertical Scaling - Bigger server Horizontal Scaling - Many server with copy","title":"Scaling - Horizontal vs Vertical"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#scaling-types","text":"Lambda Scales only horizontally Kubernetes Container in POD and POD in EC2 which is Virtual Machine Multiple PODs made in EC2 --> Cluster Auto-Scaler -- NOTE: Container in POD does not increase Amazon Fargate -- has no underlying EC2 Lambda type -- PODs keep on increasing in Fargate","title":"Scaling Types"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#interview-question","text":"https://www.udemy.com/course/rocking-system-design/learn/lecture/28472274#overview Handle festival traffic which is very high","title":"Interview Question"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#ec2","text":"Using Elastic Load Balancing ELB traffic to EC2, which put in ASG ELB --> Pre Warm Load Balancer ASG --> Add Scheduled Scaling EC2 --> Lightweight AMI in EC2 AMI --> Ensure Amazon Machine Image is light Database Connection --> Use database proxy eg RDS proxy High traffic means many open unused connections with db, which can be controlled by RDS proxy On top off all --> Run IEM (Infrastructre Event Management) to handle high traffic Increase Account Limits There is limit to EC2 instance per account, that needs to be increased by request Utilise different Account + Region Combo","title":"EC2"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#lambda-server-less-scaling","text":"client --> API Gateway --> AWS Lambda API gateway - Enable API caching, use HTTP API instead of Rest API faster and cheaper AWS Lambda - Provisioned Concurrency - Scheduled Optemize Lambda code using X-ray Optemize Lambda Configuration using CloudWatch Insights Use RDS proxy for database Increase Account Limits Utilize different Account + region combo","title":"Lambda - Server less scaling"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#kubernetes-container-scaling","text":"USE ALB (application load balancer) ingress HPA - Horizontal Pod AutoScaler RS - Replica Set CA - Cluster Auto Scaler Use replica set to run multiple copies of pod Use cluster over provisioner to provision nodes Pre Warm ALB RDS proxy in between PODS and DataBase Account limit and Account/region combo","title":"Kubernetes - Container Scaling"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#synchronous-vs-event-driven-architecture","text":"In Sync Each component scales up with Same factor Same time In Async, components can be scaled up independently Scale UP API gateway ---> Amazon Simple Queue Service SQS (messages saved) Async is more cost effective Combinations can be used. In ordering system, order insert is async, status retrieve is sync","title":"Synchronous vs Event Driven Architecture"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#queues-vs-pubsub","text":"Queue - Pull Model: A --> Pipe --> B (SQS (Simple Queue Service) and Amazon MQ) PubSub - Push Model: A --> Topic --> Many Bs (SNS Simple Notification Service and Amazon EventBridge) No Message ordering in PubSub","title":"Queues VS PubSub"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#streaming-vs-messaging","text":"Message - SQS and EventBridge - data gets deleted after its processed Stream - KINESIS STREAM and MSK (Message Service for Kafka)- Enables SQL on stream, perform analytics etc. Data does not get deleted in stream","title":"Streaming VS Messaging"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#sql-vs-nosql-vs-aurora-vs-dynamodb","text":"https://www.udemy.com/course/rocking-system-design/learn/lecture/26100196#overview SQL or RDBMS - csv type Predefined Schema Holds Structured Data Good for joins and complex queries ACID - Atomicity, Consistency, Isolation and Durability Generally Scales vertically Example - Oracle, DB2, MS SQL, AWS RDS and AWS Aurora NoSQL - Json type Schemeless Hold structured and unstructured data Not good for complex queries Brewers CAP theorem - Consistency, Availability, Partition Tolerance Scales Horizontally and DynamoDB scales automatically Exmaple - MongoDB, Cassandra AWS DynamoDB, DocumentDB (MongoDB compatible), MCS - Amazon Managed Apache Cassandra Service Aurora MySQL (5x) and PostgresSQL (3x) compatible - 1/10 cost (5x means 5 times faster than MySQL) Multi-Master support for MySql - during failure, it allows read/write with zero downtime Cross region Active-Passive replication - Global database - during fail, 1 minute it replicates Multi-AZ and Read Replicas for high availability (AZ is Availability Zone) Serverless Aurora scales automatically, but not very scalable Has integrated caches, cant be adjusted Enable backups, snapshot for DR DynamoDb Key-value dcument database, single digit millisecond performance at any scale Multi- Master Cross region Active-Active replication - Global Tables Inherently replicates aross three AZs-HA and Durable (HA is High Availability) Inherently scalable. 10 Trillion request/day OR peak 20 million request/second Provides adjustable in-memory caching via DAX - Dynamo Accelarator inherently durable, Point In Time backups can be enabled","title":"SQL vs NoSQL vs Aurora vs DynamoDB"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#websockets-for-server-to-client-communication-chatbot","text":"Connection stays open in websocket Load Balancer and API Gateway both can use it","title":"Websockets for Server to Client Communication - Chatbot"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#caching_1","text":"Purpose is to get data faster. Its like another database. A subset of data made from db First cache is checked then db Time to Live (TTL) - Cache gets deleted after specific time Cache entries can be updated with backend code CACHE IS NOT RESTRICTED TO BACKEND ONLY Use managed service cache, like if API gateways provides it, use it. Dont create your own If cache service not given, then cache using Amazon ElastiCache Amazon Elasticache for Redis Amazon Elasticache for Memcached Amazon API Gateway - Enable API Cache DynamoDB - Enable Dynamo Cache (DAX accelarator) - extra cost to be considered Amazon Simple Storage Service S3 - for Static Website - Use Amazon CloudFront (CDN service) Amazon ElastiCache --> Amazon Elastic Kubernetes Service EKS <--> Amazon RDS EKS sits between ELB and RDS and ElastiCache is connected to EKS","title":"Caching"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#redis-memcached-and-caching-strategy","text":"","title":"Redis memcached and caching strategy"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#lazy-loading","text":"User calls EC2 EC2 calls Elasticache. Elasticache returns - Cache Hit OR Cache Miss If Hit, the view to given to viewer If Miss, EC2 calls Aurora (any db) gets the data, writes to ElastiCache and present view to user Posibility of stale data Miss case, we get slower","title":"Lazy Loading"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#write-through","text":"User calls EC2 EC2 write/ update db like aurora and ALSO write/update cache like elasticache at the same time Data never stale Writing penalty in terms of time","title":"Write-Through"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#high-availability-vs-fault-tolerance","text":"https://www.udemy.com/course/rocking-system-design/learn/lecture/26100210#notes Ask in interview what to use, high avai.. or fault tol.. AZ - Availability Zone HA - High Availability","title":"High Availability VS Fault Tolerance"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#high-availability","text":"Even if some parts fail, even then system keeps working Identify Single Point of Failure ELB --> EC2 (even with ASG it is not high available) We put EC2 in ASG and then each EC2 in different Availability Zones, like zone 1 zone 2 Use AWS lambda - High Availability Kubernetes? - No, Pod works in EC2 hence not high available We can put in kubernetes pod in different availability zones. Also use ASG Cluster AutoScaler In interview, do not emphasise on COST bcoz, high availability is more important","title":"High Availability"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#fault-tolerance","text":"Assume ELB has 100 TPS (transaction per second) EC2 can handle 50. So you create 2 EC2 instance, in 2 AZ When 1 EC2 fails, then what? Problem, till the time next EC2 is spin up in ASG, we miss transactions Hence we create 3 EC2 in 3 AZ OR we can also create 2 EC2 in one AZ and 2 EC2 in another AZ Fault Tolerance is expensive. Like a backup EC2 in advance, adding tolerance to TPS","title":"Fault Tolerance"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#distributed-computing","text":"https://www.udemy.com/course/rocking-system-design/learn/lecture/26341612#notes","title":"Distributed Computing"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#hashing","text":"Say we create an entry in DB with primary key as \"Manasvi\" Hash is applied to \"Manasvi\" ---> We get a digest. Based on the digest, the entry is saved in one of the partition of DB. We can have 20 partitions, and digest based formulation can be done to save in one of the partition. When user searches for \"Manasvi\", again hashing is done, then we get digest The digest points to partition and help locate the entry very fast.","title":"Hashing"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#challenges","text":"4 partitions db entry = 1 digest = 10 Calculation is 10%4 (gives number between 0 and 3) Based on calulcation output, we save entry to partition. BUT if, one partition db goes down, then calculation becomes 10%3 (0 to 2). PROBLEM Now we can not access our data the way we want....","title":"Challenges"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#consistent-hashing","text":"https://www.udemy.com/course/rocking-system-design/learn/lecture/29166364#notes concept of HASH RING We hash input We also hash server names Then we map input hash to server hash Now if a server goes down, all input hash goes to next server","title":"Consistent hashing"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#database-sharding-also-called-horizontal-partitioning","text":"Can be done on both SQL and NoSQL dbs A big table has 100 rows We can create 10 shards, meaning 10 smaller db hence now we have 10 db, 1st db has first 10 entry, 2nd db has next 10 entry etc.... HOWEVER - We use hashing to assign the specific shard Scales Horizontaly and support distributed computing Faster query response times More reliable, only certain part of db fail in outage, rest is ok. Unbalanced shards can happen Resharding is painful Implementing sharding logic is an overhead","title":"Database Sharding also called Horizontal Partitioning"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#disaster-recovery-dr-rpo-vs-rto","text":"","title":"Disaster recovery (DR) - RPO vs RTO"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#rpo","text":"Recovery Point Objective - Amount of DATA allowed to be lost during disaster measurement in time Eg we backup every 1 hr, so 1hr is RPO Real Time RPO? Yes, Replication at another storage at DR region","title":"RPO"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#rto","text":"Recovery Time Objective - Amount of TIME application can be down during disaster","title":"RTO"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#strategy","text":"https://www.udemy.com/course/rocking-system-design/learn/lecture/29200292#notes Backup and Restore - Only Storage copy Pilot Light - Amazon Route 53 is used in all below Warm Standby - Complete Copy, but less instances on Multi-site active/active - Complete Copy, duplicated into two","title":"Strategy"},{"location":"Certifications-and-Learning/system-design/Rajdeep-Saha-System-Design-AWS/#cap-theorem-nosql-follows-this","text":"https://www.udemy.com/course/rocking-system-design/learn/lecture/31586070#notes Consistency - Get data or error Get the right data always, or no data Availability - Always get data, no error BUT data recent write not guarenteed Get some data always, could be old data Partition Tolerance - System continues despite messages being dropped. DB always work You can have only 2 at a time. CA, CP, AP","title":"CAP Theorem - NoSQL follows this"},{"location":"Certifications-and-Learning/web-development/","text":"Motivation Now this page is not much needed as I have a general page on languages and development. However it does help with be a bit more organised. My List CSS and HTML JavaScript TypeScript SQL NoSQL NodeJS React React Native Angular Redux Astro - island framework Fresh - zero js loaded, island framework Status Codes in API 200: Everything went okay, and the result has been returned (if any). 301: The server is redirecting you to a different endpoint. This can happen when a company switches domain names, or an endpoint name is changed. 400: The server thinks you made a bad request. This can happen when you don\u2019t send along the right data, among other things. 401: The server thinks you\u2019re not authenticated. Many APIs require login credentials, so this happens when you don\u2019t send the right credentials to access an API. 403: The resource you\u2019re trying to access is forbidden: you don\u2019t have the right permissions to see it. 404: The resource you tried to access was not found on the server. 503: The server is not ready to handle the request. Cool Frameworks and use d3js <-- For charts and customized visualizations p5js <-- Scratch off to reveal kind of effect greensock <-- Scroll driven animations. Also used by Bruno in threejs tutorial. animejs <-- General entry exit animations threejs <-- Create any 3d environment using webgl matterjs <-- 2d Physics in javascript chartsjs and Echarts <-- Data visualizations PixiJs <-- 2d Rendering engine, pretty cool showcase https://pixijs.com/ Design styles Glass morphism <-- Glass like view with blur and transparency Clay morphism <-- Clay like view Neu morphism <-- Using same background and object color with shadows Parallax <-- Different items moving differently in 3d space Parallax with focus and blur <-- Lens blur kind of effect Personal View Points Dissecting incredible experiences On the very first entry, an emotional connect should be established. Engage with all senses at once, which includes: See <-- Visuals and animations, aesthetics | composition | color science. Hear <-- Interactive sounds | background music for mood. Refer Japanese Anime and how they use insect, cooking sounds everywhere. Touch <-- Pseudo feel of touch, giving material look, which can be felt, like neu morphism. Smell <-- Pseudo feel of smell, a visual person smelling a dish, animation kind or thing. Like Disney. Taste <-- Pseudo taste, an edible item animated, with materials which looks consumable. Incorporate \"Enhance-Escape\" capturing style: Enhance, Magnify, Supplementary, in sync: Add on more emotion to what they already feel. Control though GPS, time, season etc. Example: Its morning and you give bright experiences. At night give relaxation, sexual drive feelings. Geo location near pub, party, give them energetic designs and sounds. Escape, opposite, complimentary: People are in some situation but emotional want the opposite. Control though GPS, time, season. Example. A person in cold area, give warm experience in design. A person in Africa, give them cool design. A person in dessert, give fluid water design. Website development workflow and checklist inspired by spirituality and life Start with writing a story, with story telling principles. - https://www.youtube.com/watch?v=-XGUVkOmPTA Create structure with sections and subsections in the website, app. Let people navigate based on their pseudo free will but with forced guide. Here people feel they are taking decision but actually the control is in our hands to the end climax. JavaScript - Mouse cursor events, scroll events, hover events, time events, weather events, location events, tracking interactions and actions on the website. These drive animations, colors, sounds, compositions, navigation and routes. Take compete control of experience, yet make them feel free and in charge.","title":"Motivation"},{"location":"Certifications-and-Learning/web-development/#motivation","text":"Now this page is not much needed as I have a general page on languages and development. However it does help with be a bit more organised.","title":"Motivation"},{"location":"Certifications-and-Learning/web-development/#my-list","text":"CSS and HTML JavaScript TypeScript SQL NoSQL NodeJS React React Native Angular Redux Astro - island framework Fresh - zero js loaded, island framework","title":"My List"},{"location":"Certifications-and-Learning/web-development/#status-codes-in-api","text":"200: Everything went okay, and the result has been returned (if any). 301: The server is redirecting you to a different endpoint. This can happen when a company switches domain names, or an endpoint name is changed. 400: The server thinks you made a bad request. This can happen when you don\u2019t send along the right data, among other things. 401: The server thinks you\u2019re not authenticated. Many APIs require login credentials, so this happens when you don\u2019t send the right credentials to access an API. 403: The resource you\u2019re trying to access is forbidden: you don\u2019t have the right permissions to see it. 404: The resource you tried to access was not found on the server. 503: The server is not ready to handle the request.","title":"Status Codes in API"},{"location":"Certifications-and-Learning/web-development/#cool-frameworks-and-use","text":"d3js <-- For charts and customized visualizations p5js <-- Scratch off to reveal kind of effect greensock <-- Scroll driven animations. Also used by Bruno in threejs tutorial. animejs <-- General entry exit animations threejs <-- Create any 3d environment using webgl matterjs <-- 2d Physics in javascript chartsjs and Echarts <-- Data visualizations PixiJs <-- 2d Rendering engine, pretty cool showcase https://pixijs.com/","title":"Cool Frameworks and use"},{"location":"Certifications-and-Learning/web-development/#design-styles","text":"Glass morphism <-- Glass like view with blur and transparency Clay morphism <-- Clay like view Neu morphism <-- Using same background and object color with shadows Parallax <-- Different items moving differently in 3d space Parallax with focus and blur <-- Lens blur kind of effect","title":"Design styles"},{"location":"Certifications-and-Learning/web-development/#personal-view-points","text":"","title":"Personal View Points"},{"location":"Certifications-and-Learning/web-development/#dissecting-incredible-experiences","text":"On the very first entry, an emotional connect should be established. Engage with all senses at once, which includes: See <-- Visuals and animations, aesthetics | composition | color science. Hear <-- Interactive sounds | background music for mood. Refer Japanese Anime and how they use insect, cooking sounds everywhere. Touch <-- Pseudo feel of touch, giving material look, which can be felt, like neu morphism. Smell <-- Pseudo feel of smell, a visual person smelling a dish, animation kind or thing. Like Disney. Taste <-- Pseudo taste, an edible item animated, with materials which looks consumable. Incorporate \"Enhance-Escape\" capturing style: Enhance, Magnify, Supplementary, in sync: Add on more emotion to what they already feel. Control though GPS, time, season etc. Example: Its morning and you give bright experiences. At night give relaxation, sexual drive feelings. Geo location near pub, party, give them energetic designs and sounds. Escape, opposite, complimentary: People are in some situation but emotional want the opposite. Control though GPS, time, season. Example. A person in cold area, give warm experience in design. A person in Africa, give them cool design. A person in dessert, give fluid water design.","title":"Dissecting incredible experiences"},{"location":"Certifications-and-Learning/web-development/#website-development-workflow-and-checklist-inspired-by-spirituality-and-life","text":"Start with writing a story, with story telling principles. - https://www.youtube.com/watch?v=-XGUVkOmPTA Create structure with sections and subsections in the website, app. Let people navigate based on their pseudo free will but with forced guide. Here people feel they are taking decision but actually the control is in our hands to the end climax. JavaScript - Mouse cursor events, scroll events, hover events, time events, weather events, location events, tracking interactions and actions on the website. These drive animations, colors, sounds, compositions, navigation and routes. Take compete control of experience, yet make them feel free and in charge.","title":"Website development workflow and checklist inspired by spirituality and life"},{"location":"diary/2022-05-18/","text":"Long time I made a diary entry through vimwiki. I have been exploring notion, remnote etc, but this is the best","title":"2022 05 18"},{"location":"diary/2022-06-07/","text":"This is a sample diary entry","title":"2022 06 07"},{"location":"diary/diary/","text":"Diary 2022 June 2022-06-07 May 2022-05-18","title":"Diary"},{"location":"diary/diary/#diary","text":"","title":"Diary"},{"location":"diary/diary/#2022","text":"","title":"2022"},{"location":"diary/diary/#june","text":"2022-06-07","title":"June"},{"location":"diary/diary/#may","text":"2022-05-18","title":"May"}]}